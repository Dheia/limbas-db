<?php
/*
 * Copyright notice
 * (c) 1998-2018 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.5
 */

/*
 * ID:
 */

ini_set("display_errors","1");



if(count($_REQUEST)==0){
       foreach($argv as $key => $val){
               if($key == 0)
                       continue;

               $tmp = explode("=",$val);
               $_REQUEST[$tmp[0]] = $tmp[1];
       }
}



if(!$session){

	$path = $_REQUEST["path"];
	if(!file_exists($path."/inc/include_db.lib")){die("wrong path to limbas!\n \"$path\" does not exist\n");}

	$currentpath = getcwd();
	chdir($path);

	require_once($path."/inc/include_db.lib");

	$auth_user = $_REQUEST["user"];
	$auth_pass = $_REQUEST["pass"];
	require_once($path."/lib/include.lib");
	require_once($path."/lib/session.lib");

	$umgvar["pfad"] = $path;

	if(!$session){die("Database connection failed! in ".$path."/inc/include_db.lib .. Unknown user name/password combination");}

	chdir($currentpath);
	chdir("../../");
}





function patch_db($revision,$vers,$sql,$desc='',$major=null){
	global $db;
	
	if($major){
	   patch_db2($major,$revision,$vers,$sql,$desc);
	   return;
	}

	$sqlquery = "SELECT ID FROM LMB_DBPATCH WHERE REVISION = $revision AND VERSION = '$vers'";
	$rs = odbc_exec($db,$sqlquery);
	if(!odbc_fetch_row($rs,1)){
		$id = next_db_id("LMB_DBPATCH");
		if($sql){
			$rs1 = odbc_exec($db,$sql) or errorhandle(odbc_errormsg($db),$sqlquery,'update',__FILE__,__LINE__);
		}else{
			$rs1 = 1;
		}
		if($rs1){
			$sqlquery = "INSERT INTO LMB_DBPATCH VALUES ($id,'$vers',".LMB_DBDEF_TRUE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision OK\n<br>";
		}else{
			$sqlquery = "INSERT INTO LMB_DBPATCH VALUES ($id,'$vers',".LMB_DBDEF_FALSE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision FAILURE!\n<br>";
		}
		$rs2 = odbc_exec($db,$sqlquery);
	}
}

function patch_scr($revision,$vers,$func,$desc,$major=null){
	global $db;
	
	if($major){
	   patch_scr2($major,$revision,$vers,$func,$desc);
	   return;
	}

	$sqlquery = "SELECT ID FROM LMB_DBPATCH WHERE REVISION = $revision AND VERSION = '$vers'";
	$rs = odbc_exec($db,$sqlquery);
	if(!odbc_fetch_row($rs,1)){
		$id = next_db_id("LMB_DBPATCH");
		if($func()){
			$sqlquery = "INSERT INTO LMB_DBPATCH VALUES ($id,'$vers',".LMB_DBDEF_TRUE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision OK\n<br>";
		}else{
			$sqlquery = "INSERT INTO LMB_DBPATCH VALUES ($id,'$vers',".LMB_DBDEF_FALSE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision FAILURE!\n<br>";
		}
		$rs2 = odbc_exec($db,$sqlquery);
	}
}

function patch_scr2($major,$revision,$vers,$func,$desc){
	global $db;

	$sqlquery = "SELECT ID FROM LMB_DBPATCH WHERE MAJOR = $major AND REVISION = $revision AND VERSION = $vers";
	$rs = odbc_exec($db,$sqlquery);
	if(!odbc_fetch_row($rs,1)){
		$id = next_db_id("LMB_DBPATCH");
		if($func()){
			$sqlquery = "INSERT INTO LMB_DBPATCH (ID,MAJOR,VERSION,STATUS,REVISION,DESCRIPTION) VALUES ($id,$major,$vers,".LMB_DBDEF_TRUE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision OK\n<br>";
		}else{
			$sqlquery = "INSERT INTO LMB_DBPATCH (ID,MAJOR,VERSION,STATUS,REVISION,DESCRIPTION)  VALUES ($id,$major,$vers,".LMB_DBDEF_FALSE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision FAILURE!\n<br>";
		}
		$rs2 = odbc_exec($db,$sqlquery);
	}
}

function patch_db2($major,$revision,$vers,$sql,$desc=''){
	global $db;

	$sqlquery = "SELECT ID FROM LMB_DBPATCH WHERE MAJOR = $major AND REVISION = $revision AND VERSION = $vers";
	$rs = odbc_exec($db,$sqlquery);
	if(!odbc_fetch_row($rs,1)){
		$id = next_db_id("LMB_DBPATCH");
		if($sql){
			$rs1 = odbc_exec($db,$sql) or errorhandle(odbc_errormsg($db),$sqlquery,'update',__FILE__,__LINE__);
		}else{
			$rs1 = 1;
		}
		if($rs1){
			$sqlquery = "INSERT INTO LMB_DBPATCH (ID,MAJOR,VERSION,STATUS,REVISION,DESCRIPTION) VALUES ($id,$major,$vers,".LMB_DBDEF_TRUE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision OK\n<br>";
		}else{
			$sqlquery = "INSERT INTO LMB_DBPATCH (ID,MAJOR,VERSION,STATUS,REVISION,DESCRIPTION) VALUES ($id,$major,$vers,".LMB_DBDEF_FALSE.",$revision,'".parse_db_string($desc,250)."')";
			echo "patch V $vers - $revision FAILURE!\n<br>";
		}
		$rs2 = odbc_exec($db,$sqlquery);
	}
}

function patch_import($tables){
	global $db;
	global $session;
	global $umgvar;
	
	$tables_ = array();
	if($tables){
		foreach ($tables as $key => $value){
			$tables_[] = lmb_strtoupper($value);
		}
	}
	

	require_once("admin/tools/import.dao");

	#rmdirf($umgvar["pfad"]."/USER/".$session["user_id"]."/temp/");
	$sys = system("rm ".$umgvar["pfad"]."/USER/".$session["user_id"]."/temp/*");
	$sys = system("cp -r ".$umgvar["pfad"]."/admin/UPDATE/tables/* ".$umgvar["pfad"]."/USER/".$session["user_id"]."/temp/");


	$path = $umgvar["pfad"]."/USER/".$session["user_id"]."/temp/";
	# Liste aller Tabellen
	if($folderval = read_dir($path)){
		foreach($folderval["name"] as $key => $value){
			if(in_array(lmb_strtoupper($value),$tables_)){
				$tablename = lmb_substr($value,0,lmb_strlen($value)-7);
				$tablegrouplist[$tablename] = 1;
			}
		}
	}
	
	if($umgvar["charset"] == "UTF-8"){$txt_encode = 1;}

	$result = import_tab_pool("atm","over","group",1,null,null,null,$tablegrouplist,null,$txt_encode);
	if($result){
		echo "\n\nimport SYSTEMTABLES! OK\n<br>";
	}
}
?>