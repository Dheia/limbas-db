<?php
global $externalStorage;

# TODO sprachunabhÃ¤ngigkeit desc
if ($newExternalStorage and $newDesc and $newClass) {
    $id = next_db_id('lmb_external_storage');
    $fields = array('id', 'descr', 'classname');
    $values = array($id, parse_db_string($newDesc), parse_db_string($newClass));
    if ($newClass !== 'Extension') {
        if ($newClass === 'OwnCloud') {
            $newConfig = json_encode(array(
                'url' => $_REQUEST['newConfig_OwnCloud_Url'],
                'user' => $_REQUEST['newConfig_OwnCloud_User'],
                'pass' => $_REQUEST['newConfig_OwnCloud_Pass'],
                'folder' => $_REQUEST['newConfig_OwnCloud_Folder']
            ));
        } else if ($newClass === 'SeaFile') {
            $newConfig = json_encode(array(
                'url' => $_REQUEST['newConfig_SeaFile_Url'],
                'user' => $_REQUEST['newConfig_SeaFile_User'],
                'pass' => $_REQUEST['newConfig_SeaFile_Pass'],
                'folder' => $_REQUEST['newConfig_SeaFile_Folder'],
                'repo' => $_REQUEST['newConfig_SeaFile_Repo']
            ));
        } else if ($newClass === 'Dropbox') {
            $newConfig = json_encode(array(
                'token' => $_REQUEST['newConfig_Dropbox_Token'],
            ));
        } else if ($newClass === 'Filesystem') {
            $newConfig = json_encode(array(
                'path' => $_REQUEST['newConfig_Filesystem_Path'],
            ));
        }
    }
    if ($newConfig) {
        $fields[] = 'config';
        $values[] = parse_db_string($newConfig);
        if (!json_decode($newConfig, true)) {
            echo 'Config is not valid json!';
        }
    }
    if ($newExternalAccessUrl) {
        $fields[] = 'externalaccessurl';
        $values[] = parse_db_string($newExternalAccessUrl);
    }
    if (array_key_exists('newPublicCloud', $_REQUEST)) {
        $fields[] = 'publiccloud';
        $values[] = LMB_DBDEF_TRUE;
    }
    $sqlquery = 'INSERT INTO lmb_external_storage (' . implode(',', $fields) . ') VALUES (\'' . implode('\',\'', $values) . '\')';
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    $externalStorage = null;
}

if ($changedIDs) {
    $changedIDs = array_filter(explode(';', $changedIDs));
    foreach ($changedIDs as $changedID) {
        $id = parse_db_int($changedID);
        $desc = parse_db_string($_REQUEST["desc_$changedID"]);
        $className = parse_db_string($_REQUEST["className_$changedID"]);
        $config = parse_db_string($_REQUEST["config_$changedID"]);
        $externalAccessUrl = parse_db_string($_REQUEST["externalAccessUrl_$changedID"]);
        $publicCloud = array_key_exists("publicCloud_$changedID", $_REQUEST) ? LMB_DBDEF_TRUE : LMB_DBDEF_FALSE;

        if (!json_decode($config, true)) {
            echo 'Config is not valid json!';
        }

        $sqlquery = "
            UPDATE lmb_external_storage 
            SET 
              descr='$desc', 
              classname='$className', 
              config='$config', 
              externalaccessurl='$externalAccessUrl',
              publiccloud=$publicCloud
            WHERE id=$id";
        $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    }
    $externalStorage = null;
}

if ($deleteID) {
    $sqlquery = 'DELETE FROM lmb_external_storage WHERE id=' . parse_db_int($deleteID);
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    $externalStorage = null;
}

# load storage configs into session
require_once('extra/explorer/filestructure.lib');
lmbGetExternalStorageConfig();
