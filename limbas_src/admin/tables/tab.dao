<?php
/*
 * Copyright notice
 * (c) 1998-2019 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.6
 */

/*
 * ID: 141
 */


/* --- Versionierung -------------------------------------- */
function set_version($tabid,$tabname,$versioning){
	global $db;
	global $DBA;
	global $gtab;
	
	if($versioning == -1){$versioning = 0;}

	$sqlquery =  "UPDATE LMB_CONF_TABLES SET VERSIONING = $versioning WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}


    $odbc_column = dbf_5(array($DBA["DBSCHEMA"], $tabname, "VID"));
    if ($versioning AND !$odbc_column) {
        $sqlquery1 = "ALTER TABLE $tabname " . LMB_DBFUNC_ADD_COLUMN_FIRST . " VID " . LMB_DBTYPE_SMALLINT . " DEFAULT 1, " . LMB_DBFUNC_ADD_COLUMN_NEXT . " VPID " . LMB_DBTYPE_FIXED . "(18), " . LMB_DBFUNC_ADD_COLUMN_NEXT . " VACT " . LMB_DBTYPE_BOOLEAN . " DEFAULT " . LMB_DBDEF_TRUE . ", " . LMB_DBFUNC_ADD_COLUMN_NEXT . " VDESC " . LMB_DBTYPE_VARCHAR . "(399)";
        $rs1 = odbc_exec($db, $sqlquery1) or errorhandle(odbc_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
        if (!$rs1) {
            $commit = 1;
        }
    } elseif (!$versioning) {
        // not delete for DMS
        if ($tabid != $gtab["argresult_id"]["LDMS_FILES"] AND $tabid != $gtab["argresult_id"]["LDMS_FILES_META"]) {
            $sqlquery1 = "ALTER TABLE $tabname " . LMB_DBFUNC_DROP_COLUMN_FIRST . " VID, " . LMB_DBFUNC_DROP_COLUMN_NEXT . " VPID, " . LMB_DBFUNC_DROP_COLUMN_NEXT . " VACT , " . LMB_DBFUNC_DROP_COLUMN_NEXT . " VDESC";
            $rs1 = odbc_exec($db, $sqlquery1) or errorhandle(odbc_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
            }
        }
    }


	if($versioning){
		# $sqlquery1 =  "UPDATE $tabname SET VID = 1, VPID = ID, VACT = ".LMB_DBDEF_TRUE." WHERE VPID IS NULL";
		$sqlquery1 =  "UPDATE $tabname SET VID = 1, VPID = ID, VACT = ".LMB_DBDEF_TRUE;
		$rs1 = odbc_exec($db,$sqlquery1) or errorhandle(odbc_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
		
    	$sqlquery1 = dbq_9(array($DBA["DBSCHEMA"],$tabname,dbf_4('VACT'),LMB_DBDEF_TRUE));
    	$rs1 = odbc_exec($db,$sqlquery1) or errorhandle(odbc_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
	}

}

/* --- DataSync -------------------------------------- */
function set_datasync($tabid,$tabname,$datasync){
	global $db;
	global $DBA;
	
    if($datasync == 1){$datasync = LMB_DBDEF_TRUE;}else{$datasync = LMB_DBDEF_FALSE;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET DATASYNC = $datasync WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	
	$odbc_column = dbf_5(array($DBA["DBSCHEMA"],$tabname,"LMB_SYNC_ID"));
	if($datasync == LMB_DBDEF_TRUE AND !$odbc_column){
		$sqlquery1 =  "ALTER TABLE $tabname ".LMB_DBFUNC_ADD_COLUMN_FIRST." LMB_SYNC_ID ".LMB_DBTYPE_FIXED."(18), ".LMB_DBFUNC_ADD_COLUMN_NEXT." LMB_SYNC_SLAVE ".LMB_DBTYPE_SMALLINT;
		$rs1 = odbc_exec($db,$sqlquery1) or errorhandle(odbc_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
	}elseif(!$versioning){
		$sqlquery1 =  "ALTER TABLE $tabname ".LMB_DBFUNC_DROP_COLUMN_FIRST." LMB_SYNC_ID, ".LMB_DBFUNC_DROP_COLUMN_NEXT." LMB_SYNC_SLAVE";
		$rs1 = odbc_exec($db,$sqlquery1) or errorhandle(odbc_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
		if(!$rs1) {$commit = 1;}
	}

}


# --- Transaktion START ------
lmb_StartTransaction();



// Tabelname
if($tabid) {
    $sqlquery = "SELECT TABELLE FROM LMB_CONF_TABLES WHERE TAB_ID = $tabid";
    $rs = odbc_exec($db, $sqlquery) or errorhandle(odbc_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    $tablename = odbc_result($rs, "TABELLE");
}

/* ---------------------- Gruppen ------------------------ */
/* ------------------------------------------------------------ */

/* --- Gruppensortierung / Name ändern -------------------------------------- */
if(is_numeric($group_change)){
	
	if($gup) {
		lmb_sortConf('up',$sort_id,'LMB_CONF_GROUPS');
	}elseif($gdown) {
		lmb_sortConf('down',$sort_id,'LMB_CONF_GROUPS');
	}else{
		require_once("admin/setup/language.lib");

		$sqlquery = "SELECT NAME,BESCHREIBUNG FROM LMB_CONF_GROUPS WHERE ID = $group_change";
		$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
		$name_id = odbc_result($rs,"NAME");
		$desc_id = odbc_result($rs,"BESCHREIBUNG");

		/* --- Sprachtabelle -------- */
		$name = parse_db_string(${"group_name_".$group_change},40);
		$desc = parse_db_string(${"group_desc_".$group_change},60);

		lang_change(null,$name_id,$name,$session["language"],"_DEPEND");
		lang_change(null,$desc_id,$desc,$session["language"],"_DEPEND");
	}
}

# Untergruppe für Tabelle ändern
if(is_numeric($subgroup_change)){
	$sqlquery = "UPDATE LMB_CONF_GROUPS SET LEVEL = ".${"subgroup_".$subgroup_change}." WHERE ID = $subgroup_change";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

# Untergruppe für Tabelle ändern
if(is_numeric($icongroup_change)){
	$sqlquery = "UPDATE LMB_CONF_GROUPS SET ICON = '".parse_db_string(${"icongroup_".$icongroup_change},250)."' WHERE ID = $icongroup_change";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}




/* --- Gruppe anlegen -------------------------------------- */
if($group_name AND $group_add){
	add_tabgroup($group_name,$group_desc);
}

/* --- Gruppe löschen -------------------------------------- */
if($group_del){
	$GLOBALS["filestruct"]['admin'] = 1;
	if(!delete_tabgroup($group_del)){
	 	$commit = 1;
	}
}

/* --- Tabellen-Bezeichnung ändern -------------------------------------- */
if($tabid AND $desc){

	$sqlquery = "SELECT BESCHREIBUNG FROM LMB_CONF_TABLES WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$desc_id = odbc_result($rs,"BESCHREIBUNG");

	lang_change(null,$desc_id,trim($desc),$session["language"],"_DEPEND");
}


/* --- Tabellen-Name ändern -------------------------------------- */
if($tabid AND $tabname){
	lmb_renameTable($tabid,trim($tabname));
}


/* ---------------------- Tabellen ------------------------ */
/* ------------------------------------------------------------ */

/* --- Tabellen Hauptgruppe ändern -------------------------------------- */
$setmaingroup = trim($setmaingroup);
if($tabid AND is_numeric(trim($setmaingroup)) AND $setmaingroup > 0){
	$sqlquery = "UPDATE LMB_CONF_TABLES SET TAB_GROUP = ".$setmaingroup." WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$sqlquery = "UPDATE LMB_CONF_FIELDS SET TAB_GROUP = ".$setmaingroup." WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	$sqlquery = "UPDATE LMB_RULES_TABLES SET TAB_GROUP = ".$setmaingroup." WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}


if($up AND $fieldid > 1) {
	lmb_sortConf('up',$fieldid,'LMB_CONF_TABLES','SORT',"TAB_GROUP = $tab_group");
}

if($down) {
	lmb_sortConf('down',$fieldid,'LMB_CONF_TABLES','SORT',"TAB_GROUP = $tab_group");
}

/* --- Lockable -------------------------------------- */
if($lockable) {
        if($lockable == 1){$lockable = LMB_DBDEF_TRUE;}else{$lockable = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET LOCKABLE = $lockable WHERE TAB_ID = $tabid";
        $rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- Lockable -------------------------------------- */
if($ajaxpost) {
        if($ajaxpost == 1){$ajaxpost = LMB_DBDEF_TRUE;}else{$ajaxpost = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET AJAXPOST = $ajaxpost WHERE TAB_ID = $tabid";
        $rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- Logging -------------------------------------- */
if($logging) {
        if($logging == 1){$logging = LMB_DBDEF_TRUE;}else{$logging = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET LOGGING = $logging WHERE TAB_ID = $tabid";
        $rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- reserveid -------------------------------------- */
if($reserveid) {
        if($reserveid == 1){$reserveid = LMB_DBDEF_TRUE;}else{$reserveid = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET RESERVEID = $reserveid WHERE TAB_ID = $tabid";
        $rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- Zeilenfarbe -------------------------------------- */
if($linecolor) {
        if($linecolor == 1){$linecolor = LMB_DBDEF_TRUE;}else{$linecolor = LMB_DBDEF_FALSE;}
		$sqlquery =  "UPDATE LMB_CONF_TABLES SET LINECOLOR = $linecolor WHERE TAB_ID = $tabid";
        $rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
        if(!$rs) {$commit = 1;}
}

/* --- User rechte -------------------------------------- */
if($userrules) {
	if($userrules == 1){$userrules = LMB_DBDEF_TRUE;}else{$userrules = LMB_DBDEF_FALSE;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET USERRULES = $userrules WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	if($userrules == "TRUE"){
		add_erstuserRules($tabid);
	}else{
		del_erstuserRules($tabid,1);
	}
}

/* --- Versionierung -------------------------------------- */
if($versioning) {
	$sqlquery =  "SELECT TAB_ID,TABELLE FROM LMB_CONF_TABLES WHERE VERKN = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
	while(odbc_fetch_row($rs)) {
		set_version(odbc_result($rs,"TAB_ID"),odbc_result($rs,"TABELLE"),trim($versioning));
	}
}

/* --- datasync -------------------------------------- */
if($datasync) {
        set_datasync($tabid,$tablename,$datasync);
}

/* --- ErgenisAnzahl -------------------------------------- */
if($numrowcalc) {
	$numrowcalc = trim($numrowcalc);
	if($numrowcalc == -1){$numrowcalc = 0;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET NUMROWCALC = ".parse_db_int($numrowcalc,1)." WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- Gruppierung -------------------------------------- */
if($groupable) {
	if($groupable == 1){$groupable = 1;}else{$groupable = 0;}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET GROUPABLE = $groupable WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- Trigger -------------------------------------- */
$trg = $GLOBALS['tab_trigger_'.$trigger];
if($trigger OR is_array($trg)) {
	if(!is_array($trg)){$trg = array();}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET LMTRIGGER = '".parse_db_string(implode(",",$trg),20)."' WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- marcolor -------------------------------------- */
if($markcolor AND $tabid) {
	if($markcolor == "transparent"){$markcolor = "";}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET MARKCOLOR = '".parse_db_string($markcolor,7)."' WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- indicator -------------------------------------- */
if($indicator AND $tabid) {
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET INDICATOR = '".trim(parse_db_string($indicator,250))."' WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- indicator -------------------------------------- */
if($keyfield AND $tabid) {
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET KEYFIELD = '".trim(parse_db_string($keyfield,30))."' WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}


/* --- params1 -------------------------------------- */
if($params1 AND $tabid) {
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET PARAMS1 = '".parse_db_int(trim($params1),5)."' WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/* --- params2 -------------------------------------- */
if($params2 AND $tabid) {
	if($param2){$param2 = serialize($param2);}
	$sqlquery =  "UPDATE LMB_CONF_TABLES SET PARAMS2 = '".parse_db_blob(trim($param2))."' WHERE TAB_ID = $tabid";
	$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}


/* --- temprefresh -------------------------------------- */
if($tablesync AND $tabid) {
	require_once("admin/tools/multiselect_refresh.lib");
	multiselectRefreshCount($tabid);
    relationRefreshCount($tabid);
}


/* --- Tabelle kopieren -------------------------------------- */
if($copy AND $add AND $gtable) {
	$commit = lmb_copy_table($copy,$gtable,$tab_group,$beschreibung,$add_permission);
	$new_gtabid = $new_gtabid[0];
/* --- Tabelle hinzufügen -------------------------------------- */
}elseif($add AND $gtable) {
	if(!$new_gtabid = add_tab($gtable,$tab_group,$beschreibung,$verkn,$typ,$add_permission,'default',$viewtyp,$use_serial)){$commit =1;}
	$new_gtabid = $new_gtabid[0];
	#sort_tables($tab_group);
}


/* --- Tabelle löschen -------------------------------------- */
if($del AND $gtable) {
	$GLOBALS["filestruct"]["admin"] = 1;
	if(!delete_tab($tabid,$drop_physical)){
	 	$commit = 1;
	}
	#sort_tables($tab_group);
}


# --- Transaktion ENDE --------
lmb_EndTransaction(!$commit);


if(!$import){
	/* --- Groups and Tables --------------------------------------------- */
    $sqlquery = "
        SELECT 
            LMB_CONF_GROUPS.ID AS GROUPID, 
            LMB_CONF_GROUPS.NAME, 
            LMB_CONF_GROUPS.BESCHREIBUNG AS GROUPDESC, 
            LMB_CONF_GROUPS.SORT AS GROUPSORT, 
            LMB_CONF_GROUPS.LEVEL, 
            LMB_CONF_GROUPS.ICON,
            LMB_CONF_TABLES.ID AS TABLEID,
            LMB_CONF_TABLES.TAB_ID,
            LMB_CONF_TABLES.SORT AS TABLESORT,
            LMB_CONF_TABLES.TABELLE,
            LMB_CONF_TABLES.BESCHREIBUNG AS TABLEDESC,
            LMB_CONF_TABLES.LOCKABLE,
            LMB_CONF_TABLES.GROUPABLE,
            LMB_CONF_TABLES.MARKCOLOR,
            LMB_CONF_TABLES.LINECOLOR,
            LMB_CONF_TABLES.USERRULES,
            LMB_CONF_TABLES.LOGGING,
            LMB_CONF_TABLES.VERSIONING,
            LMB_CONF_TABLES.TYP,
            LMB_CONF_TABLES.VERKN,
            LMB_CONF_TABLES.LMTRIGGER,
            LMB_CONF_TABLES.INDICATOR,
            LMB_CONF_TABLES.AJAXPOST,
            LMB_CONF_TABLES.NUMROWCALC,
            LMB_CONF_TABLES.RESERVEID,
            LMB_CONF_TABLES.DATASYNC,
            LMB_CONF_TABLES.PARAMS1,
            LMB_CONF_TABLES.PARAMS2,
			LMB_CONF_VIEWS.VIEWTYPE,
			LMB_CONF_TABLES.KEYFIELD,
			TABLES2.BESCHREIBUNG AS TABLE2DESC,
			LMB_CONF_FIELDS.ID AS FIELDSID,
			(
			    SELECT COUNT(*) AS ANZAHL 
			    FROM LMB_CONF_FIELDS 
			    WHERE TAB_GROUP = LMB_CONF_GROUPS.ID 
			    AND TAB_ID = LMB_CONF_TABLES.TAB_ID
            ) AS ANZAHL
        FROM LMB_CONF_GROUPS 
        LEFT JOIN LMB_CONF_TABLES ON (LMB_CONF_GROUPS.ID = LMB_CONF_TABLES.TAB_GROUP)
		LEFT JOIN LMB_CONF_VIEWS ON (LMB_CONF_VIEWS.ID = LMB_CONF_TABLES.ID)
		LEFT JOIN LMB_CONF_TABLES AS TABLES2 ON (TABLES2.TAB_ID = LMB_CONF_TABLES.VERKN)
		LEFT JOIN LMB_CONF_FIELDS ON (LMB_CONF_FIELDS.TAB_ID = LMB_CONF_TABLES.TAB_ID AND LMB_CONF_FIELDS.VERKNTABID = LMB_CONF_TABLES.TAB_ID)
        ORDER BY LMB_CONF_GROUPS.SORT, LMB_CONF_TABLES.SORT";
    $rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    unset($tabgroup_);
    $lastTabGroupId = -1;
    $tabIndex = 1;
    while(odbc_fetch_row($rs)) {

        # properties of group (only set on the first output of the group)
        $tabgroupid = odbc_result($rs, 'GROUPID');
        if ($tabgroupid != $lastTabGroupId) {
            $lastTabGroupId = $tabgroupid;
            $tabIndex = 1;
            $tabgroup_['id'][$tabgroupid] = odbc_result($rs, 'GROUPID');
            $tabgroup_['name'][$tabgroupid] = $lang[odbc_result($rs, 'NAME')];
            $tabgroup_['beschreibung'][$tabgroupid] = $lang[odbc_result($rs, 'GROUPDESC')];
            $tabgroup_['sort'][$tabgroupid] = odbc_result($rs, 'GROUPSORT');
            $tabgroup_['level'][$tabgroupid] = odbc_result($rs, 'LEVEL');
            $tabgroup_['icon'][$tabgroupid] = odbc_result($rs, 'ICON');
            $tabgroup_['systemtab'][$tabgroupid] = 0;
            $tabgroup_['tabellen'][$tabgroupid] = 0;
        }

        # properties of table
        if (odbc_result($rs, 'TABLEID')) {
            $result_gtab[$tabgroupid]['ID'][$tabIndex] = odbc_result($rs, 'TABLEID');
            $result_gtab[$tabgroupid]['id'][$tabIndex] = odbc_result($rs, 'TAB_ID');
            $result_gtab[$tabgroupid]['sort'][$tabIndex] = odbc_result($rs, 'TABLESORT');
            $result_gtab[$tabgroupid]['tabelle'][$tabIndex] = odbc_result($rs, 'TABELLE');
            $result_gtab[$tabgroupid]['beschreibung'][$tabIndex] = $lang[odbc_result($rs, 'TABLEDESC')];
            $result_gtab[$tabgroupid]['lockable'][$tabIndex] = odbc_result($rs, 'LOCKABLE');
            $result_gtab[$tabgroupid]['groupable'][$tabIndex] = odbc_result($rs, 'GROUPABLE');
            $result_gtab[$tabgroupid]['markcolor'][$tabIndex] = odbc_result($rs, 'MARKCOLOR');
            $result_gtab[$tabgroupid]['linecolor'][$tabIndex] = odbc_result($rs, 'LINECOLOR');
            $result_gtab[$tabgroupid]['userrules'][$tabIndex] = odbc_result($rs, 'USERRULES');
            $result_gtab[$tabgroupid]['logging'][$tabIndex] = odbc_result($rs, 'LOGGING');
            $result_gtab[$tabgroupid]['versioning'][$tabIndex] = odbc_result($rs, 'VERSIONING');
            $result_gtab[$tabgroupid]['typ'][$tabIndex] = odbc_result($rs, 'TYP');
            $result_gtab[$tabgroupid]['verknid'][$tabIndex] = odbc_result($rs, 'VERKN');
            $result_gtab[$tabgroupid]['trigger'][$tabIndex] = explode(',', odbc_result($rs, 'LMTRIGGER'));
            $result_gtab[$tabgroupid]['indicator'][$tabIndex] = odbc_result($rs, 'INDICATOR');
            $result_gtab[$tabgroupid]['ajaxpost'][$tabIndex] = odbc_result($rs, 'AJAXPOST');
            $result_gtab[$tabgroupid]['numrowcalc'][$tabIndex] = odbc_result($rs, 'NUMROWCALC');
            $result_gtab[$tabgroupid]['reserveid'][$tabIndex] = odbc_result($rs, 'RESERVEID');
            $result_gtab[$tabgroupid]['argresult'][odbc_result($rs, 'TAB_ID')] = $tabIndex;
            $result_gtab[$tabgroupid]['maingroup'][$tabIndex] = $tabgroupid;
            $result_gtab[$tabgroupid]['datasync'][$tabIndex] = odbc_result($rs, 'DATASYNC');
            $result_gtab[$tabgroupid]['params1'][$tabIndex] = odbc_result($rs, 'PARAMS1');
            $result_gtab[$tabgroupid]['params2'][$tabIndex] = unserialize(odbc_result($rs, 'PARAMS2'));
            $result_gtab[$tabgroupid]['keyfield'][$tabIndex] = odbc_result($rs, 'KEYFIELD');

            # count tables per group
            $tabgroup_['tabellen'][$tabgroupid]++;

            # check if contains system tables
            $tableName = odbc_result($rs, 'TABELLE');
            if ($tableName == 'LDMS_FILES' OR $tableName == 'LDMS_META') {
                $tabgroup_['systemtab'][$tabgroupid] = 1;
            }

            if(odbc_result($rs, 'VERKN')){
                $result_gtab[$tabgroupid]['verkn'][$tabIndex] = $lang[odbc_result($rs, 'TABLE2DESC')];
            }

            if(odbc_result($rs, 'TYP') == 5){
                $result_gtab[$tabgroupid]['viewtype'][$tabIndex] = odbc_result($rs, 'VIEWTYPE');
            }

            if(odbc_result($rs,'FIELDSID')) {
                $result_gtab[$tabgroupid]['sverkn'][$tabIndex] = 1;
            }

            $result_gtab[$tabgroupid]['num_gtab'][$tabIndex] = odbc_result($rs, 'ANZAHL');

            $tabIndex++;
        }
    }
}

// finds the parents of the tabgroup with index $groupIndex
// returns an array, where a 1 at index i means, that tabgroup with id i is a parent
function getTabgroupParents($groupIndex) {
    global $tabgroup;
    
    $parents = array();
    $currentIndex = $groupIndex;
    $visited = array();
    
    while($tabgroup['level'][$currentIndex] != 0) {
        // prevent infinite recursion
        if($visited[$currentIndex]) {
            error_log('infinite recursion in tabgroup hierarchy!');
            return $tabgroup['id'];
        }
        
        // set current tabgroup as visited
        $visited[$currentIndex] = 1;
        
        // set parent tabgroup as next current and save as parent
        $currentIndex = $tabgroup['level'][$currentIndex];
        $parents[$currentIndex] = 1;        
    }
    
    return $parents;
}

?>