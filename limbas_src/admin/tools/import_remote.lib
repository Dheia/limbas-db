<?php
/*
 * Copyright notice
 * (c) 1998-2019 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.6
 */

/*
 * ID:
 */

require_once("admin/tools/import.dao");


/**
 * drop temporary lmbx tables
 */
function clean_import_temp()
{
    global $db;
    global $umgvar;
    global $DBA;
    global $session;
    global $tabgroup;
    global $lang;
    global $newTABID;
    global $newGROUPID;

    # drop old copy-tables
    $odbc_table = dbf_20(array($DBA["DBSCHEMA"], "LMBX_%", "'TABLE'"));
    if (is_array($odbc_table)) {
        echo "<br><b>-----> remove temporary tables ... </b>";
        foreach ($odbc_table["table_name"] as $tkey => $tvalue) {
            if (lmb_substr(lmb_strtoupper($tvalue), 0, 5) == "LMBX_") {
                $sqlquery1 = "DROP TABLE " . dbf_4($tvalue) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
                $rs1 = lmbdb_exec($db, $sqlquery1);
                echo $tvalue . ", ";
            }
        }
        echo "<br><br>";
    }
    #echo "<br><br><hr><span style=\"color:green;\">import done .. </span> <u><i>to apply changes reset system</i></u>!!<br><br><br><br><br>";
}


/**
 * import language element
 *
 * @param number $eid
 * @return new element-id
 */
#remote_insert_lang
function remote_mergeLang($eid)
{
    global $db;
    global $lang;
    global $session;

    $sqlquery = "SELECT DISTINCT LANGUAGE,LANGUAGE_ID FROM LMB_LANG";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    while (lmbdb_fetch_row($rs)) {
        $islang[lmbdb_result($rs, "LANGUAGE")] = lmbdb_result($rs, "LANGUAGE_ID");
    }

    # Spracheintrag
    $sqlquery = "SELECT * FROM LMBX_LMB_LANG_DEPEND WHERE ELEMENT_ID = " . $eid;
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    while (lmbdb_fetch_row($rs)) {

        if ($islang[lmbdb_result($rs, "LANGUAGE")]) {

            $NEXTID = next_db_id("LMB_LANG_DEPEND");

            if (!$NEXTEID) {
                $NEXTEID = next_db_id("LMB_LANG_DEPEND", "ELEMENT_ID");
            }

            if ($NEXTEID < 10000) {
                $NEXTID = 100000;
                $NEXTEID = 10000;
            }

            $sqlquery1 = "INSERT INTO LMB_LANG_DEPEND (ID,LANGUAGE_ID,ELEMENT_ID,TYP,WERT,LANGUAGE,EDIT,LMFILE) VALUES (
					$NEXTID,
					" . parse_db_int(lmbdb_result($rs, "LANGUAGE_ID"), 5) . ",
					$NEXTEID,
					" . parse_db_int(lmbdb_result($rs, "TYP"), 5) . ",
					'" . parse_db_string(lmbdb_result($rs, "WERT"), 250) . "',
					'" . parse_db_string(lmbdb_result($rs, "LANGUAGE"), 20) . "',
					" . parse_db_bool(lmbdb_result($rs, "EDIT")) . ",
					'" . parse_db_string(lmbdb_result($rs, "LMFILE"), 160) . "'
					)";
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);

            if ($session["language"] == lmbdb_result($rs, "LANGUAGE_ID")) {
                $GLOBALS["lang"][$NEXTEID] = lmbdb_result($rs, "WERT");
            }
        }

    }

    return $NEXTEID;

}


/**
 * import select pools and values
 *
 * @param array $sfields
 */

#merge_select
function remote_mergePools($sfields)
{
    global $db;
    global $session;

    # Select-Pool
    $select_pool_list = array_unique($sfields["select_pool"]);
    foreach ($select_pool_list as $key => $value) {
        if (!$value) {
            continue;
        }

        $sqlquery = "SELECT * FROM LMBX_LMB_SELECT_P WHERE ID = $value";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }
        $newpoolid = next_db_id("LMB_SELECT_P");
        if (lmbdb_fetch_row($rs)) {
            $sqlquery1 = "INSERT INTO LMB_SELECT_P (ID,ERSTDATUM,ERSTUSER,NAME,SNUM) VALUES ($newpoolid," . LMB_DBDEF_TIMESTAMP . "," . $session["user_id"] . ",'" . parse_db_string(lmbdb_result($rs, "NAME"), 40) . "'," . parse_db_int(lmbdb_result($rs, "SNUM"), 5) . ")";
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
            }

            $new_poolid[lmbdb_result($rs, "ID")] = $newpoolid;

            # Pool-Words
            $sqlquery2 = "SELECT * FROM LMBX_LMB_SELECT_W WHERE POOL = $value";
            $rs2 = lmbdb_exec($db, $sqlquery2) or errorhandle(lmbdb_errormsg($db), $sqlquery2, $action, __FILE__, __LINE__);
            if (!$rs2) {
                $commit = 1;
            }
            $newwordid = next_db_id("LMB_SELECT_W");
            while (lmbdb_fetch_row($rs2)) {
                $sqlquery3 = "INSERT INTO LMB_SELECT_W (ID,ERSTDATUM,ERSTUSER,SORT,WERT,DEF,KEYWORDS,POOL,HIDE) VALUES ($newwordid," . LMB_DBDEF_TIMESTAMP . "," . $session["user_id"] . "," . parse_db_int(lmbdb_result($rs2, "SORT"), 10) . ",'" . parse_db_string(lmbdb_result($rs2, "WERT"), 255) . "'," . parse_db_bool(lmbdb_result($rs2, "DEF")) . ",'" . parse_db_string(lmbdb_result($rs2, "KEYWORDS"), 250) . "'," . parse_db_string($newpoolid, 5) . "," . parse_db_bool(lmbdb_result($rs2, "HIDE")) . ")";
                $rs3 = lmbdb_exec($db, $sqlquery3) or errorhandle(lmbdb_errormsg($db), $sqlquery3, $action, __FILE__, __LINE__);
                if (!$rs3) {
                    $commit = 1;
                }
                $newwordid++;

                $new_wordid[lmbdb_result($rs2, "ID")] = $newwordid;

            }

            # Update Table Pool-ID
            if (!$commit) {
                $sqlquery4 = "UPDATE LMB_CONF_FIELDS SET SELECT_POOL = $newpoolid WHERE SELECT_POOL = " . lmbdb_result($rs, "ID") . " AND TAB_ID IN (" . implode(",", array_unique($sfields["tabid"])) . ")";
                $rs4 = lmbdb_exec($db, $sqlquery4) or errorhandle(lmbdb_errormsg($db), $sqlquery3, $action, __FILE__, __LINE__);
                if (!$rs4) {
                    $commit = 1;
                }
            }

            $newpoolid++;
        }
    }

    # Pool-Entrys
    if (!$commit) {
        foreach ($sfields["tabid"] as $key => $value) {
            $sqlquery = "SELECT * FROM LMBX_LMB_SELECT_D WHERE TAB_ID = " . $sfields["old_tabid"][$key] . " AND FIELD_ID = " . $sfields["field_id"][$key];
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }
            $newentryid = next_db_id("LMB_SELECT_D");
            while (lmbdb_fetch_row($rs)) {
                $sqlquery1 = "INSERT INTO LMB_SELECT_D (ID,ERSTDATUM,ERSTUSER,TAB_ID,FIELD_ID,DAT_ID,W_ID) VALUES ($newentryid," . LMB_DBDEF_TIMESTAMP . "," . $session["user_id"] . "," . parse_db_int($sfields["tabid"], 5) . "," . parse_db_int($sfields["field_id"], 5) . "," . parse_db_int(lmbdb_result($rs, "DAT_ID"), 10) . "," . parse_db_int($new_wordid[lmbdb_result($rs, "W_ID")], 10) . ")";
                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
                if (!$rs1) {
                    $commit = 1;
                }
                $newentryid++;
            }
        }
    }
}


/**
 * import of tables
 *
 * @param array $lmbs
 * @param string $path
 */
function remote_mergeTables($lmbs, $path, $precheck)
{
    global $db;
    global $umgvar;
    global $DBA;
    global $session;
    global $tabgroup;
    global $lang;
    global $newTABID;
    global $newGROUPID;
    global $summary;


    # ----------- merge -----------
    $rm_gtab = $lmbs["lmp"]["gtab"];
    $rm_gtabgroup = $lmbs["lmp"]["tabgroup"];

    ###### Vorverarbeitung für Verknüpfungen ######

    # nächste Tabellen ID
    $first_new_tabid = next_db_id("LMB_CONF_TABLES", "TAB_ID");

    # Liste neuer Tabellen IDs
    foreach ($rm_gtab["tab_id"] as $key => $value) {
        # nur zu importierende Projekttabellen
        #if($tableprojektlist[lmb_strtoupper($rm_gtab["table"][$key])]){
        $newTABID[$key] = $first_new_tabid;
        $first_new_tabid++;
        #}
    }


    echo "\n<BR><HR>\n";

    # remote gtab-array
    foreach ($rm_gtab["tab_id"] as $key => $value) {

        $summary[] = '--------------------------------' . $rm_gtab["table"][$key] . '-----------------------------------------';

        # nur zu importierende Projekttabellen
        #if($tableprojektlist[$rm_gtab["table"][$key]]){

        # ------ Eintrag in LMB_CONF_GROUPS ------
        #$old_groupid = $rm_gtabgroup["argid"][$rm_gtab["tab_group"][$key]];
        $old_groupid = $rm_gtab["tab_group"][$key];
        $new_groupid = null;

        # Gruppe schon vorhanden
        $sqlquery = "SELECT * FROM LMB_CONF_GROUPS";
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }
        while (lmbdb_fetch_row($rs)) {
            if (lmb_strtolower($lang[lmbdb_result($rs, "NAME")]) == lmb_strtolower($rm_gtabgroup["name"][$old_groupid])) {
                $new_groupid = lmbdb_result($rs, "ID");
            }
        }

        # Gruppe schon vorhanden
        if ($new_groupid) {
            $ok["conf_tabgruppen"] = 1;
            # Gruppe neu erstellen
        } else {
            $new_groupid = next_db_id("LMB_CONF_GROUPS");
            $new_sort = next_db_id("LMB_CONF_GROUPS", "SORT");

            # lang
            $name_id = parse_db_int(remote_mergeLang($rm_gtabgroup["name_lid"][$old_groupid]), 10);
            $desc_id = parse_db_int(remote_mergeLang($rm_gtabgroup["beschreibung_lid"][$old_groupid]), 10);

            $sqlquery = "INSERT INTO LMB_CONF_GROUPS (ID,NAME,BESCHREIBUNG,SORT) VALUES ($new_groupid,$name_id,$desc_id,$new_sort)";
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
                $notok["conf_tabgruppen"] = "conf_tabgruppen ";
            } else {
                $ok["conf_tabgruppen"] = 1;
            }
            $summary[] = $sqlquery;
            $summary[] = '-------------------------------------------------------------------------';
            echo "<span style=\"color:green;\">adding</span> Group <b>" . $rm_gtabgroup["name"][$old_groupid] . "</b> to Configuration<br><br>";
            if (!$precheck) {
                # Session
                $_SESSION["tabgroup"]["id"][] = $new_groupid;
                $_SESSION["tabgroup"]["name"][] = $rm_gtabgroup["name"][$old_groupid];
                $_SESSION["tabgroup"]["beschreibung"][] = $rm_gtabgroup["beschreibung"][$old_groupid];
            }
        }

        # ------ Eintrag in LMB_CONF_TABLES ------

        # new IDs
        $new_tabkeyid = next_db_id("LMB_CONF_TABLES");
        $new_tabid = $newTABID[$key];
        $old_tabid = $rm_gtab["tab_id"][$key];
        $newGROUPID[$key] = $new_groupid;

        #$new_tabkeyid = $newTABID[$key];
        #$new_tabid = next_db_id("LMB_CONF_TABLES","TAB_ID");

        # Table Fields
        $domain_columns = dbf_5(array($DBA["DBSCHEMA"], "LMBX_LMB_CONF_TABLES"));
        $fieldlist = implode(', ', $domain_columns["columnname"]);

        # Fields Values
        $sqlquery = "SELECT $fieldlist FROM LMBX_LMB_CONF_TABLES WHERE TAB_ID = " . $rm_gtab["tab_id"][$key];
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        }
        if (lmbdb_fetch_row($rs)) {
            $tabletype = lmbdb_result($rs, "TYP");
            $qu_value = array();
            $qu_field = array();
            # generate SQL
            foreach ($domain_columns["columnname"] as $key1 => $fieldname) {
                # Field-Name
                $value1 = lmbdb_result($rs, $fieldname);
                if ($value1 == '') {
                    continue;
                }

                $qu_field[] = $fieldname;
                # Key-ID
                if (lmb_strtoupper($fieldname) == "ID") {
                    $qu_value[] = $new_tabkeyid;
                    # Table-ID
                } elseif (lmb_strtoupper($fieldname) == "TAB_ID") {
                    $qu_value[] = $new_tabid;
                    # TAB_GROUP
                } elseif (lmb_strtoupper($fieldname) == "TAB_GROUP") {
                    $qu_value[] = $new_groupid;
                    # Desc
                } elseif (lmb_strtoupper($fieldname) == "BESCHREIBUNG") {
                    # lang
                    $name_id = remote_mergeLang(lmbdb_result($rs, "BESCHREIBUNG"));
                    $qu_value[] = $name_id;
                    # 1:1 Verknüpfung
                } elseif (lmb_strtoupper($fieldname) == "VERKN") {
                    $qu_value[] = parse_db_int($newTABID[lmbdb_result($rs, "VERKN")], 5);
                    # default values
                } else {
                    $qu_value[] = lmb_parseImport($value1, $domain_columns, $key1);
                }
            }

            $sqlquery = "INSERT INTO LMB_CONF_TABLES (" . implode(",", $qu_field) . ") VALUES (" . implode(",", $qu_value) . ")";
            $rs1 = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
                $notok["conf_tabellen"] = "conf_tabellen ";
            } else {
                $ok["conf_tabellen"] = 1;
            }
            $summary[] = $sqlquery;
            $summary[] = '-------------------------------------------------------------------------';
        }


        unset($qu_field);
        unset($qu_value);
        unset($domain_columns);


        # ------ Eintrag in LMB_CONF_FIELDS ------

        # new IDs
        $new_fieldkeyid = next_db_id("LMB_CONF_FIELDS");
        $domain_columns = dbf_5(array($DBA["DBSCHEMA"], "LMBX_LMB_CONF_FIELDS"));
        $fieldlist = implode(', ', $domain_columns["columnname"]);

        # Fields Values
        $sqlquery = "SELECT $fieldlist FROM LMBX_LMB_CONF_FIELDS WHERE TAB_ID = " . $rm_gtab["tab_id"][$key];
        $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
        if (!$rs) {
            $commit = 1;
        } else {
            $ok["conf_spalten"] = 1;
        }
        while (lmbdb_fetch_row($rs)) {
            $qu_value = array();
            $qu_field = array();
            # generate SQL
            foreach ($domain_columns["columnname"] as $key1 => $fieldname) {
                $value1 = lmbdb_result($rs, $fieldname);
                if ($value1 == '') {
                    continue;
                }

                $qu_field[] = $fieldname;
                # Key-ID
                if (lmb_strtoupper($fieldname) == "ID") {
                    $qu_value[] = $new_fieldkeyid;
                    # TAB-ID
                } elseif (lmb_strtoupper($fieldname) == "TAB_ID") {
                    $qu_value[] = $new_tabid;
                    # GROUP-ID
                } elseif (lmb_strtoupper($fieldname) == "TAB_GROUP") {
                    $qu_value[] = $new_groupid;
                    # Desc
                } elseif (lmb_strtoupper($fieldname) == "BESCHREIBUNG") {
                    # lang
                    $desc_id = remote_mergeLang(lmbdb_result($rs, "BESCHREIBUNG"));
                    $qu_value[] = $desc_id;
                    # Desc
                } elseif (lmb_strtoupper($fieldname) == "SPELLING") {
                    # lang
                    $name_id = remote_mergeLang(lmbdb_result($rs, "SPELLING"));
                    $qu_value[] = $name_id;
                    # Verknüpfungen
                } elseif (lmb_strtoupper($fieldname) == "VERKNTABID") {
                    $qu_value[] = parse_db_int($newTABID[lmbdb_result($rs, "VERKNTABID")], 5);
                    # default values
                } else {
                    $qu_value[] = lmb_parseImport($value1, $domain_columns, $key1);
                }

                # prepare Select-Fields
                if (lmbdb_result($rs, "FIELD_TYPE") == 4) {
                    $todo["select"]["tabid"][] = $new_tabid;
                    $todo["select"]["table"][] = $rm_gtab["table"];
                    $todo["select"]["old_tabid"][] = lmbdb_result($rs, "TAB_ID");
                    $todo["select"]["field_id"][] = lmbdb_result($rs, "FIELD_ID");
                    $todo["select"]["select_pool"][] = lmbdb_result($rs, "SELECT_POOL");
                }

                $new_fieldkeyid++;
            }

            $sqlquery1 = "INSERT INTO LMB_CONF_FIELDS (" . implode(",", $qu_field) . ") VALUES (" . implode(",", $qu_value) . ")";
            $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
            if (!$rs1) {
                $commit = 1;
                $ok["conf_spalten"] = 0;
                $notok["conf_tabgruppen"] = "conf_tabgruppen ";
            }
            $summary[] = $sqlquery1;

        }
        $summary[] = '-------------------------------------------------------------------------';

        # ------ VIEW ------
        $tname = 'Table';
        if ($tabletype == 5) {
            $tname = 'View';
            if (!remote_mergeView($old_tabid, $new_tabid, $precheck)) {
                $commit = 1;
            }
        }

        # Summery
        if ($ok["conf_spalten"] AND $ok["conf_tabgruppen"] AND $ok["conf_tabellen"]) {
            echo "<span style=\"color:green;\">adding</span> $tname <b>" . $rm_gtab["table"][$key] . "</b> to Configuration<br><br>";
        } else {
            echo "Configuration <span style=\"color:red;\">Failure</span> in <b>" . $rm_gtab["table"][$key] . " " . $notok["conf_tabgruppen"] . $notok["conf_tabellen"] . $notok["conf_spalten"] . "</b><br>";
        }


        if ($commit) {
            return false;
        }
        #}


    }

    # ------ Select Values ------
    if ($todo["select"] AND $ok["conf_spalten"] AND $ok["conf_tabgruppen"] AND $ok["conf_tabellen"]) {
        remote_mergePools($todo["select"]);
    }

    # ----------- try to execute failed statements -----------
    if ($GLOBALS["LAST_SQL"]) {
        echo "<br><b>-----> try to execute failed actions ... </b><br><br>";
        foreach ($GLOBALS["LAST_SQL"]["sql"] as $key_sql => $sqlquery) {
            if ($rs = lmbdb_exec($db, $sqlquery)) {
                echo $GLOBALS["LAST_SQL"]["desc1"][$key_sql];
            } else {
                echo $GLOBALS["LAST_SQL"]["desc2"][$key_sql];
            }
        }
    }


    return true;


    /*# drop old copy-tables
    echo "<br><b>-----> remove temporary tables ... </b>";
    $odbc_table = dbf_20(array($DBA["DBSCHEMA"],"LMBX_%","'TABLE'"));
    foreach($odbc_table["table_name"] as $tkey => $tvalue) {
        if(lmb_substr(lmb_strtoupper($tvalue),0,5) == "LMBX_"){
            $sqlquery1 = "DROP TABLE ".dbf_4($tvalue) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
            $rs1 = lmbdb_exec($db,$sqlquery1);
            echo $tvalue.", ";
        }
    }

    echo "<br><br>";

    echo "<br><br><hr><span style=\"color:green;\">import done .. </span> <u><i>to apply changes reset system</i></u>!!<br><br><br><br><br>";*/

}


function remote_mergeView($oldID, $newID, $precheck)
{
    global $DBA;
    global $db;
    global $summary;


    # LMBX_LMB_CONF_VIEWS
    $sqlquery = "SELECT * FROM LMBX_LMB_CONF_VIEWS WHERE ID = $oldID";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);

    if (lmbdb_fetch_row($rs)) {
        $sqlquery1 = "INSERT INTO LMB_CONF_VIEWS (ID,VIEWDEF,ISPUBLIC,HASID,RELATION,USESYSTABS,VIEWTYPE) VALUES(
		$newID,
		'" . parse_db_string(lmbdb_result($rs, 'VIEWDEF')) . "',
		" . parse_db_bool(lmbdb_result($rs, 'ISPUBLIC')) . ",
		" . parse_db_bool(lmbdb_result($rs, 'HASID')) . ",
		'" . parse_db_string(lmbdb_result($rs, 'RELATION')) . "',
		" . parse_db_bool(lmbdb_result($rs, 'USESYSTABS')) . ",
		" . parse_db_int(lmbdb_result($rs, 'VIEWTYPE')) . "
		)
		";
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
        if (!$rs1) {
            $commit = 1;
        }

        $summary[] = $sqlquery1;
    }


    # LMBX_LMB_CONF_VIEWS
    $sqlquery = "SELECT * FROM LMBX_LMB_CONF_VIEWFIELDS WHERE VIEWID = $oldID";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);

    $NEXTID = next_db_id("LMB_CONF_VIEWFIELDS");
    while (lmbdb_fetch_row($rs)) {
        $sqlquery1 = "INSERT INTO LMB_CONF_VIEWFIELDS (ID,VIEWID,TABLENAME,QFIELD,QFILTER,QORDER,QALIAS,SORT,QSHOW,QFUNC) VALUES(
		$NEXTID,
		$newID,
		'" . parse_db_string(lmbdb_result($rs, 'TABLENAME')) . "',
		'" . parse_db_string(lmbdb_result($rs, 'QFIELD')) . "',
		'" . parse_db_string(lmbdb_result($rs, 'QFILTER')) . "',
		" . parse_db_int(lmbdb_result($rs, 'QORDER')) . ",
		'" . parse_db_string(lmbdb_result($rs, 'QALIAS')) . "',
		" . parse_db_int(lmbdb_result($rs, 'SORT')) . ",
		" . parse_db_bool(lmbdb_result($rs, 'QSHOW')) . ",
		" . parse_db_int(lmbdb_result($rs, 'QFUNC')) . "
		)
		";
        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
        if (!$rs1) {
            $commit = 1;
        }

        $summary[] = $sqlquery1;

        $NEXTID++;
    }

    # LMBX_LMB_CONF_VIEWS
    $sqlquery = "SELECT * FROM LMBX_LMB_GTAB_PATTERN WHERE VIEWID = $oldID";
    $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
    $NEXTID = next_db_id("LMB_GTAB_PATTERN");
    while (lmbdb_fetch_row($rs)) {
        $sqlquery1 = "INSERT INTO LMB_GTAB_PATTERN (ID,ERSTUSER,PATID,TABID,POSX,POSY,WIDTH,HEIGHT,VISIBLE,VIEWID) VALUES(
		$NEXTID,
		" . parse_db_int(lmbdb_result($rs, 'ERSTUSER')) . ",
		" . parse_db_int(lmbdb_result($rs, 'PATID')) . ",
		'" . parse_db_string(lmbdb_result($rs, 'TABID')) . "',
		" . parse_db_int(lmbdb_result($rs, 'POSX')) . ",
		" . parse_db_int(lmbdb_result($rs, 'POSY')) . ",
		" . parse_db_int(lmbdb_result($rs, 'WIDTH')) . ",
		" . parse_db_int(lmbdb_result($rs, 'HEIGHT')) . ",
		" . parse_db_bool(lmbdb_result($rs, 'VISIBLE')) . ",
		$newID
		)
		";

        $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
        if (!$rs1) {
            $commit = 1;
        }

        $summary[] = $sqlquery1;

        $NEXTID++;
    }


    if ($commit) {
        return false;
    }

    return true;

}


function remote_mergeForms(&$exptable, $precheck)
{
    global $db;
    global $umgvar;
    global $DBA;
    global $session;
    global $tabgroup;
    global $lang;
    global $newTABID;
    global $newGROUPID;
    global $summary;

    $new_fieldkeyid = next_db_id("LMB_FORMS");
    $new_formid = next_db_id("LMB_FORM_LIST");

    if ($exptable['form']) {
        foreach ($exptable['form'] as $key => $value) {

            $qu_value = array();
            $qu_field = array();

            ################## LMB_FORM_LIST ##################
            $domain_columns = dbf_5(array($DBA["DBSCHEMA"], "LMBX_LMB_FORM_LIST"));
            $fieldlist = implode(', ', $domain_columns["columnname"]);

            $sqlquery = "SELECT $fieldlist FROM LMBX_LMB_FORM_LIST WHERE ID = " . $value;
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }
            if (lmbdb_fetch_row($rs)) {

                //$new_formid = next_db_id("LMB_FORM_LIST");
                $referenz_tab = $newTABID[lmbdb_result($rs, 'REFERENZ_TAB')];
                $form_name = lmbdb_result($rs, 'NAME');

                if (!$referenz_tab) {
                    return false;
                }

                foreach ($domain_columns["columnname"] as $key1 => $fieldname) {

                    $value1 = lmbdb_result($rs, $fieldname);
                    if ($value1 == '') {
                        continue;
                    }

                    /* ---- field ------ */
                    $qu_field[] = $fieldname;

                    /* ---- value ------ */
                    # ID
                    if (lmb_strtoupper($fieldname) == "ID") {
                        $qu_value[] = $new_formid;
                        # REFERENZ_TAB
                    } elseif (lmb_strtoupper($fieldname) == "REFERENZ_TAB") {
                        $qu_value[] = $referenz_tab;
                        /*# name
                        }elseif(lmb_strtoupper($value1) == "NAME"){
                            $qu_value[] = $referenz_tab;
                            */
                        # default values
                    } else {
                        $qu_value[] = lmb_parseImport($value1, $domain_columns, $key1);
                    }

                }

                $sqlquery1 = "INSERT INTO LMB_FORM_LIST (" . implode(",", $qu_field) . ") VALUES (" . implode(",", $qu_value) . ")";
                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
                if (!$rs1) {
                    $commit = 1;
                }

                $summary[] = $sqlquery1;

            }


            ################## LMB_FORMS ##################
            $domain_columns = dbf_5(array($DBA["DBSCHEMA"], "LMBX_LMB_FORMS"));
            $fieldlist = implode(', ', $domain_columns["columnname"]);

            $sqlquery = "SELECT $fieldlist FROM LMBX_LMB_FORMS WHERE FORM_ID = " . $value;
            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }

            while (lmbdb_fetch_row($rs)) {

                # tab_group
                # tab_id
                # parentrel
                # form_id

                $qu_value = array();
                $qu_field = array();
                # generate SQL
                foreach ($domain_columns["columnname"] as $key1 => $fieldname) {

                    $value1 = lmbdb_result($rs, $fieldname);
                    if ($value1 == '') {
                        continue;
                    }

                    $qu_field[] = $fieldname;
                    # Key-ID
                    if (lmb_strtoupper($fieldname) == "ID") {
                        $qu_value[] = $new_fieldkeyid;
                        # FORM_ID
                    } elseif (lmb_strtoupper($fieldname) == "FORM_ID") {
                        $qu_value[] = $new_formid;
                        # TAB_ID
                    } elseif (lmb_strtoupper($fieldname) == "TAB_ID") {
                        $qu_value[] = $referenz_tab; //$newTABID[lmbdb_result($rs, 'REFERENZ_TAB')];
                        # TAB_GROUP
                    } elseif (lmb_strtoupper($fieldname) == "TAB_GROUP") {
                        $qu_value[] = $referenz_tab; //$newGROUPID[lmbdb_result($rs, 'REFERENZ_TAB')];
                        # default values
                    } else {
                        $qu_value[] = lmb_parseImport($value1, $domain_columns, $key1);
                    }

                }
                $sqlquery1 = "INSERT INTO LMB_FORMS (" . implode(",", $qu_field) . ") VALUES (" . implode(",", $qu_value) . ")";
                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
                if (!$rs1) {
                    $commit = 1;
                }

                $summary[] = $sqlquery1;

                #if(!$rs1) {$commit = 1;$notok["conf_tabgruppen"] = "conf_tabgruppen ";}else{$ok["conf_forms"] = 1;}
                $new_fieldkeyid++;
            }


            $new_formid++;

            echo "<span style=\"color:green;\">adding</span> Form <b>" . $form_name . "</b> to Configuration<br><br>";

        }

    }


    if ($commit) {
        return false;
    }

    return true;

}

function remote_mergeReport(&$exptable, $precheck)
{
    global $db;
    global $umgvar;
    global $DBA;
    global $session;
    global $tabgroup;
    global $lang;
    global $newTABID;
    global $summary;


    $new_fieldkeyid = next_db_id("LMB_REPORTS");
    $new_reportid = next_db_id("LMB_REPORT_LIST");

    if ($exptable['report']) {
        foreach ($exptable['report'] as $key => $value) {

            $qu_value = array();
            $qu_field = array();

            ################## LMB_REPORT_LIST ##################

            $domain_columns = dbf_5(array($DBA["DBSCHEMA"], "LMBX_LMB_REPORT_LIST"));
            $fieldlist = implode(', ', $domain_columns["columnname"]);
            $sqlquery = "SELECT $fieldlist FROM LMBX_LMB_REPORT_LIST WHERE ID = " . $value;

            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }
            if (lmbdb_fetch_row($rs)) {

                $referenz_tab = $newTABID[lmbdb_result($rs, 'REFERENZ_TAB')];
                $report_name = lmbdb_result($rs, 'NAME');

                if (!$referenz_tab) {
                    return false;
                }

                foreach ($domain_columns["columnname"] as $key1 => $fieldname) {

                    $value1 = lmbdb_result($rs, $fieldname);
                    if ($value1 == '') {
                        continue;
                    }

                    /* ---- field ------ */
                    $qu_field[] = $fieldname;

                    /* ---- value ------ */
                    # ID
                    if (lmb_strtoupper($fieldname) == "ID") {
                        $qu_value[] = $new_reportid;
                        # REFERENZ_TAB
                    } elseif (lmb_strtoupper($fieldname) == "REFERENZ_TAB") {
                        $qu_value[] = $referenz_tab;
                        # default values
                    } else {
                        $qu_value[] = lmb_parseImport($value1, $domain_columns, $key1);
                    }

                }

                $sqlquery1 = "INSERT INTO LMB_REPORT_LIST (" . implode(",", $qu_field) . ") VALUES (" . implode(",", $qu_value) . ")";
                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
                if (!$rs1) {
                    $commit = 1;
                }

                $summary[] = $sqlquery1;


            }

            ################## LMB_REPORTS ##################
            $domain_columns = dbf_5(array($DBA["DBSCHEMA"], "LMBX_LMB_REPORTS"));
            $fieldlist = implode(', ', $domain_columns["columnname"]);
            $sqlquery = "SELECT $fieldlist FROM LMBX_LMB_REPORTS WHERE BERICHT_ID = " . $value;

            $rs = lmbdb_exec($db, $sqlquery) or errorhandle(lmbdb_errormsg($db), $sqlquery, $action, __FILE__, __LINE__);
            if (!$rs) {
                $commit = 1;
            }

            while (lmbdb_fetch_row($rs)) {

                $qu_value = array();
                $qu_field = array();
                # generate SQL

                foreach ($domain_columns["columnname"] as $key1 => $fieldname) {

                    $value1 = lmbdb_result($rs, $fieldname);
                    if ($value1 == '') {
                        continue;
                    }

                    $qu_field[] = $fieldname;
                    # Key-ID
                    if (lmb_strtoupper($fieldname) == "ID") {
                        $qu_value[] = $new_fieldkeyid;
                        # FORM_ID
                    } elseif (lmb_strtoupper($fieldname) == "BERICHT_ID") {
                        $qu_value[] = $new_reportid;
                        # default values
                    } else {
                        $qu_value[] = lmb_parseImport($value1, $domain_columns, $key1);
                    }
                }
                $sqlquery1 = "INSERT INTO LMB_REPORTS (" . implode(",", $qu_field) . ") VALUES (" . implode(",", $qu_value) . ")";
                $rs1 = lmbdb_exec($db, $sqlquery1) or errorhandle(lmbdb_errormsg($db), $sqlquery1, $action, __FILE__, __LINE__);
                if (!$rs1) {
                    $commit = 1;
                }

                $summary[] = $sqlquery1;

                #if(!$rs1) {$commit = 1;$notok["conf_tabgruppen"] = "conf_tabgruppen ";}else{$ok["conf_forms"] = 1;}
            }


            $new_reportid++;

            echo "<span style=\"color:green;\">adding</span> report <b>" . $report_name . "</b> to Configuration<br><br>";
        }
    }

    if ($commit) {
        return false;
    }

    return true;


}


?>