<?php
/*
 * Copyright notice
 * (c) 1998-2019 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.6
 */

/*
 * ID:
 */



require_once("extra/explorer/metadata.lib");
require_once("extra/explorer/filestructure.lib");
global $db;

#----------------- Mimetypes -------------------
if(!$gmimetypes){
	$sqlquery = "SELECT * FROM LMB_MIMETYPES ORDER BY MIMETYPE";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	while(lmbdb_fetch_row($rs)) {
		$key = lmbdb_result($rs, "ID");
		$gmimetypes["mimetype"][$key] = lmbdb_result($rs, "MIMETYPE");
		$gmimetypes["ext"][$key] = lmbdb_result($rs, "EXT");
		$gmimetypes["pic"][$key] = lmbdb_result($rs, "PIC");
	}
}

# ------------ Ordnerstruktur ------------------------------
$sqlquery = "SELECT ID,LEVEL,NAME FROM LDMS_STRUCTURE WHERE TYP = 1 OR TYP = 3 OR TYP = 7 ORDER BY TYP,NAME";
$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
if(!$rs){$commit = 1;}
while(lmbdb_fetch_row($rs)) {
	$file_struct["id"][] = lmbdb_result($rs, "ID");
	$file_struct["name"][] = lmbdb_result($rs, "NAME");
	$file_struct["level"][] = lmbdb_result($rs, "LEVEL");
}

/**
 * Outputs a progress bar
 * @param $id string new element id
 * @param $description string text to show above
 * @see updateProgressBar()
 * @see finishProgressBar()
 */
function createProgressBar($id, $description) {
    echo "
        <script>$('#indcontainer').show();</script>
        <div class='lmb-progress-container'>
            <div id='{$id}_desc'>$description</div>
            <div class='lmb-progress'>
                <span id='{$id}_valtext' class='lmb-progress-valtext'></span>
                <span id='{$id}_val' class='lmb-progress-val'></span>
            </div>
        </div>";
}

/**
 * Updates the progress bar (every 0.2 seconds)
 * @param $id string progress bar element id
 * @param $currentValue int
 * @param $maxValue int
 * @param $description string|null text to put above progress bar, if set
 * @see createProgressBar()
 * @see finishProgressBar()
 */
function updateProgressBar($id, $currentValue, $maxValue, $description = null) {
    static $lastID = null;
    static $lastUpdateTime = 0;

    // skip update if too short after previous update
    $currentTime = microtime(true);
    if ($lastID === $id && !$description) {
        if ($currentTime - $lastUpdateTime < 0.2 /* seconds */) {
            return;
        }
    }
    $lastUpdateTime = $currentTime;
    $lastID = $id;

    $percent = round(100 * $currentValue / $maxValue);
    $script = "$('#{$id}_val').css('width', '{$percent}%');";
    $script .= "$('#{$id}_valtext').html('{$currentValue} / {$maxValue}');";
    if ($description) {
        $script .= "$('#{$id}_desc').html('{$description}');";
    }
    echo '<script>', $script, '</script>';
}

/**
 * Sets the progress bar to completed
 * @param $id string progress bar element id
 * @param $maxValue int
 * @see createProgressBar()
 * @see updateProgressBar()
 */
function finishProgressBar($id, $maxValue) {
    $script = "$('#{$id}_val').css('width', '100%');";
    $script .= "$('#{$id}_valtext').html('{$maxValue} done');";
    echo '<script>', $script, '</script>';
}

/**
* crontab Datei anpassen
* @global db database handler
* @global umgvar Array Umgebungvariablen
* @deprecated
* @return BOOLEAN
*/
function update_crontab(){
	global $db;
	global $umgvar;

	if(is_writable($umgvar["crontab"])){
		# --- lesen ----
		$handle = fopen($umgvar["crontab"],"r");
			while($line = fgets($handle, 1000)){
				if(!lmb_strpos($line,$umgvar['pfad'])){
					$crontab[] = $line;
				}
			}
		fclose($handle);

		# --- schreiben alter Inhalte ----
		$handle = fopen($umgvar["crontab"],"w");
		if($crontab){
		foreach($crontab as $key => $value){
			fputs($handle,$value);
		}
		}
		# --- schreiben neuer Inhalte ----
		$sqlquery = "SELECT * FROM LMB_CRONTAB WHERE ACTIV = ".LMB_DBDEF_TRUE." ORDER BY ERSTDATUM";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
		while(lmbdb_fetch_row($rs)){
			fputs($handle,str_replace(";"," ",lmbdb_result($rs,"START"))."\twebuser (/usr/local/bin/php \"".$umgvar['pfad']."/cron.php\" < /bin/echo ".lmbdb_result($rs,"ID").")\n");
			}
		fclose($handle);
		return true;
	}else{
		return false;
	}
}

# ---- add new job ----
function add_job($kategorie,$job_desc,$job_template=null,$cron=null,$ifile=null,$subdir=null){
	
	global $gtab;
	global $gfield;
	global $db;
	
	# --- Felder ---
	if($gtab["table"]){
		foreach($gtab["table"] as $key => $value){
			if(is_array($gfield[$key]["indize"])){
				if(in_array("1",$gfield[$key]["indize"])){
					foreach($gfield[$key]["id"] as $key1 => $value1){
						if($gfield[$key]["indize"][$key1] AND $GLOBALS["memo_".$key."_".$key1]){
							#${"memo_".$key."_".$key1};
							$val[] = "field,".$key."_".$key1;
						}
					}
				}}
		}
	}
	# --- Ordner ----
	if($ifile){
		foreach($ifile as $key => $value){
			if($ifile){
				if($subdir){$sub = "s";}else{$sub = "0";}
				$val[] = "file,".$key.",$sub";
			}
		}
	}
	
	if($job_template){$val = array();$val[0] = $job_template;}
	if(!$job_desc){$job_desc = "$kategorie (".count($val).")";}
	
	if($val){
		$val[] = lmb_strtolower($kategorie).",db";
		$val = implode(";",$val);

		$NEXTID = next_db_id("LMB_CRONTAB");
		
		$sqlquery = "INSERT INTO LMB_CRONTAB (ID,KATEGORY,START,VAL,DESCRIPTION,ACTIV,JOB_USER) VALUES($NEXTID,'$kategorie','$cron[0];$cron[1];$cron[2];$cron[3];$cron[4]','$val','".parse_db_string($job_desc,60)."',".LMB_DBDEF_TRUE.",".parse_db_int(str_replace('_u','',$cron[5])).")";
		$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}else{
			#if(!update_crontab()){lmb_alert("no permission to /etc/crontab\\ncheck it manualy");};
		}
	}
}


/**
 * check timelimit
 *
 * @return unknown
 */
function check_timeout($timeout){
	global $starttime;
	global $umgvar;

	# seconds
	$timeout = ($timeout*60);

	list($usec, $sec) = explode(" ",time());
	$t = ((float)$usec + (float)$sec);

	if($starttime){
		if(($t - $starttime) > $timeout){
			return ($t - $starttime);
		}else{
			return false;
		}
	}else{
		return $t;
	}
}

/**
 * get subdirs
 *
 * @param unknown_type $LEVEL
 * @param unknown_type $s
 * @return unknown
 */
function getasubdir($LEVEL,$s){
	global $file_struct;
	global $subd;
	global $db;

	if($s){$GLOBALS["subd"][] = $LEVEL;}

	foreach($file_struct["id"] as $key => $value){
		if($file_struct['level'][$key] == $LEVEL){
			$GLOBALS["subd"][] = $file_struct["id"][$key];
			if(in_array($file_struct["id"][$key],$file_struct["level"])){
					getasubdir($file_struct["id"][$key],0);
			}
		}
	}
	return $GLOBALS["subd"];
}

/**
 * error handling
 *
 * @param unknown_type $msg
 * @param unknown_type $query
 * @param unknown_type $error
 */
/*
function job_errorhandle($msg,$query,$error){
	global $error_logfile;
	global $error_msg;
	global $kategorie;
	global $umgvar;

	$kat = explode(".",$kategorie);
	$kat = $kat[0];

	# open Logfiles
	if(!$logfile){
		$error_logfile = fopen($umgvar["pfad"]."/TEMP/log/".$kat."_error.log","a");
	}

	if($error){$error_msg = 1;}
	if($query){$query = "\t".$query;}
	fputs($error_logfile,date("Y-m-d H:i:s")." : ".$msg.$query."\n");
}
*/


/**
 * log handling
 *
 * @param unknown_type $msg
 * @param unknown_type $query
 * @param unknown_type $error
 */

/*
function job_loghandle($msg,$zeit_main){
	global $logfile;
	global $kategorie;
	global $umgvar;

	$kat = explode(".",$kategorie);
	$kat = $kat[0];

	# open Logfiles
	if(!$logfile){
		$logfile = fopen($umgvar["pfad"]."/TEMP/log/".$kat.".log","a");
	}

	$zeit_now = gettime();
	$zeit_dauer = number_format((($zeit_now - $zeit_main)/60),1,'.','');
	fputs($logfile,date("Y-m-d H:i:s")." : ".$zeit_dauer." min. : ".$msg."\n");
}
*/

/**
* save History
* @global db database handler
* @global umgvar Umgebungsvariablen
* @global job
* @param typ ACTION (Indizierungstyp)
* @param res RESULT (Erfolg)
* @param time ERSTDATUM (Zeit)
* @param indize_count INUM (Anzahl Indizierungen)
* @param msg MESSAGE (Zusatz)
* @return null
*/
function fill_history($typ,$res,$time,$inum,$jnum,$msg){
	global $umgvar;
	global $db;
	global $job;

	if(!$inum){$inum = 0;}
	if(!$jnum){$jnum = 0;}
	$NEXTID = next_db_id("LMB_INDIZE_HISTORY");
	$sqlquery = "INSERT INTO LMB_INDIZE_HISTORY (ID,ACTION,RESULT,USED_TIME,MESSAGE,INUM,JNUM,JOB) VALUES($NEXTID,'$typ',$res,$time,'".str_replace("'","''",lmb_substr($msg,0,119))."',$inum,$jnum,$job)";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(!$rs) {$commit = 1;}
}

/**
* Liste zu der Felder aus Cron-Tabelle
* @param cronval Feld "VAL" aus DB, durch ";" getrennte zu indizierende Felder; Format: "field,fieldid,tabid" oder "file,Odnerid"
* @return indize Array: [tab][]|[field][]
*/
function field_list($cronval){
	$cronval = explode(";",$cronval);
	if($cronval){
		$bzm = 0;
		foreach($cronval as $cronValue){
			$partval = explode(",",$cronValue);
			# --- Felder-Memos/Dateien ---
			if($partval[0] == "field"){
				$fieldval = explode("_",$partval[1]);
				$indize["id"][] = $bzm;
				$indize['typ'][] = $partval[0];
				$indize['tab'][] = $fieldval[0];
				$indize['field'][] = $fieldval[1];
				$indize['file'][] = 0;
				$bzm++;
				# --- Ordner-Dateien ---
			}elseif($partval[0] == "file"){
				# Unterordner einbinden
				if($partval[2] == "s"){
					$subd = array_unique(getasubdir($partval[1],1));
					foreach ($subd as $value){
						$indize["id"][] = $bzm;
						$indize['typ'][] = $partval[0];
						$indize['tab'][] = 0;
						$indize['field'][] = 0;
						$indize['file'][] = $value;
						$bzm++;
					}
				# einzelner Ordner
				}else{
					$indize["id"][] = $bzm;
					$indize['typ'][] = $partval[0];
					$indize['tab'][] = 0;
					$indize['field'][] = 0;
					$indize['file'][] = $partval[1];
					$bzm++;
				}
			}
		}
	}
	return $indize;
}


/**
 * Reads current system crontab
 * @return string
 */
function get_cron_tab() {
    global $umgvar;
    global $db;


    //get all limbas jobs
    $sqlquery = "SELECT LMB_CRONTAB.ID,KATEGORY,START,VAL,LMB_CRONTAB.ERSTDATUM,ACTIV,DESCRIPTION,ALIVE,JOB_USER,USERNAME FROM LMB_CRONTAB LEFT JOIN LMB_USERDB ON LMB_USERDB.ID = LMB_CRONTAB.JOB_USER WHERE ACTIV = ".LMB_DBDEF_TRUE;
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);

    $cronStr = '';
    while(lmbdb_fetch_row($rs)){
        $cronStr .= str_replace(";", " ", str_replace(";"," ",lmbdb_result($rs,"START"))." php \"".$umgvar["pfad"]."/cron.php\" ".lmbdb_result($rs,"ID")).' '.lmbdb_result($rs,"USERNAME"). "\n";
    }


    //parse exsting cron file
    $crontab = shell_exec('crontab -l');

    $lines = explode("\n", $crontab);

    $beginlmb = '# BEGIN limbas jobs';
    $endlmb = '# END limbas jobs';


    $precom = true;

    foreach ($lines as $key => $line) {
        //remove all comments before first job (because of automatically added repeating info)
        if ($line[0] == '#' && $precom) {
            unset($lines[$key]);
        } else {
            $precom = false;
        }


        //remove all limbas related lines
        if (strpos($line,'limbas') !== false || strpos($line,'cron.php') !== false) {
            unset($lines[$key]);
        }
    }


    $cronfile = implode("\n",$lines);
    $cronfile .= "\n".$beginlmb."\n".$cronStr.$endlmb;

    return $cronfile;
}

/**
 * set complete refreshed crontab
 * @return int
 */
function apply_cron_tab() {
    global $umgvar;
    global $session;

    $cronfile = get_cron_tab();

    $tmpfile = $umgvar["path"]."/USER/".$session["user_id"]."/temp/crontab.txt";

    file_put_contents($tmpfile, $cronfile);
    exec('crontab '.$tmpfile, $output, $return);
    if (!$return) {
        return 0; //commit = 0
    } else {
        return 1; //commit = 1
    }
}



?>