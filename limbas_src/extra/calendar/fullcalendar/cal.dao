<?php
/*
 * Copyright notice
 * (c) 1998-2016 Limbas GmbH - Axel westhagen (support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.0
 */

/*
 * ID: 199
 */


    
class lmb_calendar {
    
	// default fieldnames for calendar - change this array in own class
	protected $lmbCalFields = array('SUBJECT'=>'SUBJECT','STARTSTAMP'=>'STARTSTAMP','ENDSTAMP'=>'ENDSTAMP','COLOR'=>'COLOR','ALLDAY'=>'ALLDAY','REPETITION'=>'REPETITION','REPEATUNTIL'=>'REPEATUNTIL','INTERVAL'=>'INTERVAL');
	
	protected $lmbCalFieldsID = array();
	
	
	function __construct($gtabid){
		global $gfield;
		foreach ($this->lmbCalFields as $key => $value){
			$this->lmbCalFieldsID[$key] = $gfield[$gtabid]["argresult_name"][$value];
		}
	}
	
	function lmb_getlmbCalFields(){
	   return $this->lmbCalFields;
	}
	
	function lmb_getlmbCalFieldsID(){
	   return $this->lmbCalFieldsID;
	}

	/**
	 * add event from default formular
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $title
	 * @param unknown_type $start
	 * @param unknown_type $end
	 * @param unknown_type $allDay
	 */
	function lmb_addEvent($gtabid,$title,$start,$end,$allDay,$resource,$verkn,$params=null){
		global $gtab;
		global $gfield;
		
		lmb_StartTransaction();
		if($ID = new_record($gtabid,$verkn["verknpf"],$verkn["fieldid"],$verkn["tabid"],$verkn["id"],0,0)){
			# --- subject ---
			$tkey = "$gtabid,".$this->lmbCalFieldsID['SUBJECT'].",$ID";
			$change_kal[$tkey] = $title;
			# --- startdate ---
			$tkey = "$gtabid,".$this->lmbCalFieldsID['STARTSTAMP'].",$ID";
			$change_kal[$tkey] = stampToDate($start);
			# --- enddate ---
			$tkey = "$gtabid,".$this->lmbCalFieldsID['ENDSTAMP'].",$ID";
			$change_kal[$tkey] = stampToDate($end);
			# --- resource ---
			if($resource AND $gtab['params1'][$gtabid]){
				$relation = init_relation($gtabid,$gtab['params1'][$gtabid],$ID,$resource);
				set_relation($relation);
			}
			
		    # Extension
		    if(method_exists($this, 'lmb_addEventExtend')){
		      $this->lmb_addEventExtend($ID,$params,$change_kal);
		    }
		    
			if(update_data($change_kal,3,0)){
				lmb_EndTransaction(1);
				return $ID;
			}else{
				lmb_EndTransaction(0);
			}
		}else{
			lmb_EndTransaction(0);
		}
	}


	/**
	 * add event EXTENSION
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $filter
	 * @param unknown_type $extension
	 * @param unknown_type $params
	 *

	   function lmb_addEventExtend($ID,&$params,&$update_values){ }
	
	*/
	

	/**
	 * drop event
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $ID
	 * @param unknown_type $dayDelta
	 * @param unknown_type $minuteDelta
	 * @return unknown
	 */
	function lmb_dropEvent($gtabid,$ID,$dayDelta,$minuteDelta,$action=null,$resource=null){
		global $db;
		global $gtab;
		global $gfield;

		$sqlquery = "SELECT ID,".$this->lmbCalFields['STARTSTAMP'].",".$this->lmbCalFields['ENDSTAMP']." FROM ".$gtab["table"][$gtabid]." WHERE ID = ".$ID;
		$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
		if(odbc_result($rs, "ID") AND ($dayDelta OR $minuteDelta OR $resource)){
			
			$startstamp = get_stamp(odbc_result($rs, $this->lmbCalFields['STARTSTAMP']));
			$endstamp = get_stamp(odbc_result($rs, $this->lmbCalFields['ENDSTAMP']));
			if($startstamp > $endstamp){return false;}
			
			# drop event  - new start date
			if($action == "drop"){
				if($dayDelta OR $minuteDelta){
					$newstart = mktime(date("H",$startstamp),date("i",$startstamp) + $minuteDelta,date("s",$startstamp),date("m",$startstamp),date("d",$startstamp) + $dayDelta,date("Y",$startstamp));
					#$sqlstart = $this->lmbCalFields['STARTSTAMP']." = '".convert_stamp($newstart)."',";
				}

				# --- resource ---
				if($resource AND $gtab['params1'][$gtabid]){
					
					$sqlquery0 = "SELECT KEYID,VERKN_ID FROM ".$gfield[$gtabid]['md5tab'][$gtab['params1'][$gtabid]]." WHERE ID = ".$ID;
					$rs0 = odbc_exec($db,$sqlquery0) or errorhandle(odbc_errormsg($db),$sqlquery0,$action,__FILE__,__LINE__);
					if(!$rs0) {$commit = 1;}
					$recource_id = odbc_result($rs0, "VERKN_ID");

					# new rsource relation
					if($recource_id != $resource){
						# drop old resource
						$relation = init_relation($gtabid,$gtab['params1'][$gtabid],$ID,null,$recource_id);
						set_relation($relation);
						# add new resource
						$relation = init_relation($gtabid,$gtab['params1'][$gtabid],$ID,$resource);
						set_relation($relation);
					}

				}
				
			}
			
			# resize event - new end date
			if($dayDelta OR $minuteDelta){
				$newend = mktime(date("H",$endstamp),date("i",$endstamp) + $minuteDelta,date("s",$endstamp),date("m",$endstamp),date("d",$endstamp) + $dayDelta,date("Y",$endstamp));
				if($newstart > $newend){return false;}
			}
                
                // if($newend){
                // $sqlend = $this->lmbCalFields['ENDSTAMP']." = '".convert_stamp($newend)."'";
                // }
                
            // if($sqlend OR $sqlstart){
            if ($newend or $newstart) {
				
				if($newstart){$update["$gtabid,".$this->lmbCalFieldsID['STARTSTAMP'].",$ID"] = stampToDate($newstart);}
				if($newend){$update["$gtabid,".$this->lmbCalFieldsID['ENDSTAMP'].",$ID"] = stampToDate($newend);}
				if(!update_data($update)){$commit=1;}

				#$sqlquery1 = "UPDATE ".$gtab["table"][$gtabid]." SET $sqlstart $sqlend WHERE ID = $ID";
				#$rs1 = odbc_exec($db,$sqlquery1) or errorhandle(odbc_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
				#if(!$rs0) {$commit = 1;}
			}

			if($commit) {return false;}else{return true;}
		}else{return false;}
		
		return true;
	}
	
	# move event
	function lmb_moveEvent($gtabid,$ID,$movestamp,$resource){
	    global $db;
	    global $gtab;

		$sqlquery = "SELECT ".$this->lmbCalFields['STARTSTAMP'].",".$this->lmbCalFields['ENDSTAMP']." FROM ".$gtab["table"][$gtabid]." WHERE ID = ".$ID;
		$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}
	    if(odbc_fetch_row($rs)){
	          $startstamp = get_stamp(odbc_result($rs,$this->lmbCalFields['STARTSTAMP']));
		      $endstamp = get_stamp(odbc_result($rs,$this->lmbCalFields['ENDSTAMP']));
	    }
	    $start = convert_stamp($movestamp);
	    $len = ($endstamp - $startstamp);
	    $end = convert_stamp($movestamp + $len);

		$sqlquery = "UPDATE ".$gtab["table"][$gtabid]." SET ".$this->lmbCalFields['STARTSTAMP']." = '$start', ".$this->lmbCalFields['ENDSTAMP']." = '$end' WHERE ID = ".$ID;
		$rs = odbc_exec($db,$sqlquery) or errorhandle(odbc_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
		if(!$rs) {$commit = 1;}

		# --- resource ---
		$resource = parse_db_int($resource);
		if($resource AND $gtab['params1'][$gtabid]){
		  $relation = init_relation($gtabid,$gtab['params1'][$gtabid],$ID,$resource);
		  set_relation($relation);
		}

	}
	
	# copy event
	function lmb_copyEvent($gtabid,$ID,$movestamp,$resource){
	    global $db;
	    global $gtab;

	    $newID = new_data($gtabid,null,$ID);
	    $this->lmb_moveEvent($gtabid,$newID,$movestamp,$resource);

	}
	
	# delete event
	function lmb_deleteEvent($gtabid,$ID,$verkn=null){
		
		# 1:n
		if($verkn['typ'] == 27){$forcedel = 1;}
		
		if(del_data($gtabid, $ID, 'delete', $forcedel)){
			echo "true";
		}
	}
	

	
	/**
	 * get event gsr
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $startstamp
	 * @param unknown_type $endstamp
	 * @param unknown_type $viewtype
	 * @param unknown_type $verkn
	 * @return unknown
	 */
	function lmb_getEventGSR($gtabid,&$params){
		global $gtab;
		global $gfield;
		global $LMCAf;
		global $umgvar;
		
		$startstamp = $params["start"];
		$endstamp = $params["end"];
		$viewtype = $params["viewtype"];
		$verkn = $params["verkn"];
		$gsr = $params["gs"];
		$recurrent = $params["recurrent"];
		$fieldlist[$gtabid] = $gfield[$gtabid]["sort"];
	
		# Zeige Heute
		if(!$startstamp){
			$startstamp = (local_stamp(1)-432000);
			$endstamp = (local_stamp(1)+1209600);
		}
		
		/*
		$gsr[$gtabid][LMCAf_STARTSTAMP][0] = stampToDate($startstamp,0);$gsr[$gtabid][LMCAf_STARTSTAMP]["num"][0] = 5; # >=
		$gsr[$gtabid][LMCAf_ENDSTAMP][0] = stampToDate($endstamp,0);$gsr[$gtabid][LMCAf_ENDSTAMP][andor][0] = 1;$gsr[$gtabid][LMCAf_ENDSTAMP]["num"][0] = 4; # <=
		#$extension = $gfield[$gtabid][LMCAf_ENDSTAMP]['field_name']." >= ".$gfield[$gtabid][LMCAf_STARTSTAMP]['field_name'];
		if(!$recurrent){
			$gsr[$gtabid][LMCAf_REPETITION][0] = '0';
		}
		*/

		$tab = $gtab['table'][$gtabid];
		
		$extension['where'][0] = "
			(
			($tab.".$this->lmbCalFields['STARTSTAMP']." >= '".convert_stamp($startstamp,0)."' AND $tab.".$this->lmbCalFields['STARTSTAMP']." <= '".convert_stamp($endstamp,0)."') OR
			($tab.".$this->lmbCalFields['ENDSTAMP']." >= '".convert_stamp($startstamp,0)."' AND $tab.".$this->lmbCalFields['ENDSTAMP']." <= '".convert_stamp($endstamp,0)."') OR
			($tab.".$this->lmbCalFields['STARTSTAMP']." < '".convert_stamp($startstamp,0)."' AND $tab.".$this->lmbCalFields['ENDSTAMP']." > '".convert_stamp($endstamp,0)."')
			)
			";
		
		# use calendar_repetition
		if($umgvar['calendar_repetition']){
			$extension['where'][0] = "((".$extension['where'][0]." AND $tab.".$this->lmbCalFields['REPETITION']." = 0)";
			#$extension['where'][0] = "(($tab.".$this->lmbCalFields['STARTSTAMP']." >= '".convert_stamp($startstamp,0)."' AND $tab.".$this->lmbCalFields['ENDSTAMP']." <= '".convert_stamp($endstamp,0)."' AND $tab.".$this->lmbCalFields['REPETITION']." = 0)";
			if($recurrent){
				$extension['where'][0] .= " OR ($tab.".$this->lmbCalFields['REPETITION']." > 0)";
			}
			$extension['where'][0] .= ")";
		}else{
			#$extension['where'][0] = "
			#($tab.".$this->lmbCalFields['STARTSTAMP']." >= '".convert_stamp($startstamp,0)."' AND $tab.".$this->lmbCalFields['STARTSTAMP']." <= '".convert_stamp($endstamp,0)."') OR
			#($tab.".$this->lmbCalFields['ENDSTAMP']." >= '".convert_stamp($startstamp,0)."' AND $tab.".$this->lmbCalFields['ENDSTAMP']." <= '".convert_stamp($endstamp,0)."')
			#";
		}
		
		# resource
		if($gfield[$gtabid]["md5tab"][$gtab['params1'][$gtabid]]){
			$rfieldid = $gtab['params1'][$gtabid];
			$rgtabid = $gfield[$gtabid]['verkntabid'][$gtab["params1"][$gtabid]];
			
			$ojoin[$gtab["table"][$gtabid]][$gfield[$gtabid]["md5tab"][$rfieldid]][0] = $gtab['table'][$gtabid].'.id = '.$gfield[$gtabid]["md5tab"][$rfieldid].'.ID';
			$extension["ojoin"] = $ojoin;
			$extension['select'][0] = $gfield[$gtabid]["md5tab"][$rfieldid].'.VERKN_ID AS RESOURCE_'.$rfieldid;
			$fieldlist[$gtabid] = $gfield[$gtabid]["sort"];
			$fieldlist[$gtabid][] = 'RESOURCE_'.$rfieldid;


			
			########### search in resouce ############
			
			# search single resource
			if($params["cal_resourceSearch"]){
				$resourceSearch = array_filter($params["cal_resourceSearch"]);
			}
			if($resourceSearch){
				$extension['where'][] = $gfield[$gtabid]["md5tab"][$gtab['params1'][$gtabid]].'.VERKN_ID IN ('.implode(',',array_map('parse_db_int',$resourceSearch)).')';
			# search in resource
			}elseif($gsr[$rgtabid]){
				foreach($gsr[$rgtabid] as $fieldid => $val){
					$qu = get_where($fieldid,$rgtabid,$gsr);
		
					# globale where in oberster Ebene
					if($qu['where_glob']){
						$where = array_merge($where,$qu['where_glob']);
					}
		
					if($qu["where"]){
						$query["where1"][] = implode(" AND ",$qu["where"]);
					}
					
					/*
					# Verknüpfungsbaum Unterabfragen
					if($qu["vwhere"]){
						$query["where1"][] = "(".implode(" OR ",$qu["vwhere"]).")";
					}
					# alle Verknüpfungsabfragen on top
					if($qu["aval"]){
						$where[] = "(".implode(" AND ",array_unique($qu["aval"])).")";
					}
					*/
		
				}
				# --- Suchkriterien --------
				if($query["where1"]){
					if(count($query["where1"]) > 1){$extension['where'][] = "(".implode(" AND ",$query["where1"]).")";}else{$extension['where'][] = $query["where1"][0];}
					$extension['from'][] = $gtab["table"][$rgtabid];
					$extension['where'][] = $gfield[$gtabid]["md5tab"][$rfieldid].'.VERKN_ID = '.$gtab["table"][$rgtabid].'.id';
				}
			}

		}
		
		# Query ausführen
		$filter["anzahl"][$gtabid] = 'all';
		$filter["nolimit"][$gtabid] = 1;
		$filter["order"][$gtabid] = "$gtabid&".$this->lmbCalFieldsID['STARTSTAMP']."&ASC";
		
		# Extension
		if(method_exists($this, 'lmb_getEventGSRExtend')){
		  $this->lmb_getEventGSRExtend($gtabid,$filter,$fieldlist,$extension,$params);
		}
		
		$gresult = get_gresult($gtabid,1,$filter,$gsr,$verkn,$fieldlist,null,$extension);
	
		return $gresult;
	}


	/**
	 * get event gsr EXTENSION
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $filter
	 * @param unknown_type $extension
	 * @param unknown_type $params
	 *
	 
	   function lmb_getEventGSRExtend($gtabid,&$filter,&$extension,&$params){	}
	
	*/


	
	
	/**
	 * get events
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $startstamp
	 * @param unknown_type $endstamp
	 * @param unknown_type $viewtype
	 * @param unknown_type $verkn
	 * @return unknown
	 */
	function lmb_getEvent(&$tresult,&$params){
		
		$gtabid = $params["gtabid"];
		$recurrent = $params["recurrent"];
		$gresult = $this->lmb_getEventGSR($gtabid,$params);
		$bzm = count($tresult);
		
		if($gresult[$gtabid]["id"]){
		foreach ($gresult[$gtabid]["id"] as $key => $value){
			
			$stst = get_stamp(lmb_substr($gresult[$gtabid][$this->lmbCalFieldsID['STARTSTAMP']][$key],0,17)."00");
			$endst = get_stamp(lmb_substr($gresult[$gtabid][$this->lmbCalFieldsID['ENDSTAMP']][$key],0,17)."00");
			if($stst AND $endst AND $endst >= $stst){

				$this->lmb_getEventBasic($tresult,$gresult,$gtabid,$key,$bzm,$stst,$endst,$recurrent);

				$bzm++;
			}
			
		}
		}

		return $tresult;
	}

	/**
	 * get events basic
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $startstamp
	 * @param unknown_type $endstamp
	 * @param unknown_type $viewtype
	 * @param unknown_type $verkn
	 * @return unknown
	 */
	function lmb_getEventBasic(&$tresult,&$gresult,$gtabid,$key,$bzm,$stst,$endst,$recurrent){
		global $umgvar;
		global $gtab;
		
		$color = null;

		# row-color from field
		if($gresult[$gtabid][$this->lmbCalFieldsID['COLOR']][$key]){
			$color = $gresult[$gtabid][$this->lmbCalFieldsID['COLOR']][$key];
			# row-color from indicator
		}elseif(is_array($gresult[$gtabid]["indicator"]["color"][$key])){
			$color = average_color($gresult[$gtabid]["indicator"]["color"][$key]);
			# row-color from user
		}elseif($gresult[$gtabid]["color"][$key]){
			$color = $gresult[$gtabid]["color"][$key];
		}

		if($color){
			$color = "#".$color;
			$text_color = lmbSuggestColor($color);
		}

		# row-title from indicator
		#$title = null;
		#if($gresult[$gtabid]["indicator"]["title"][$key]){
		#	$title = implode(", ",$gresult[$gtabid]["indicator"]["title"][$key]);
		#}

		# show indicator
		if($gresult[$gtabid]["indicator"]["object"][$key]){
			$preobject = array();
			foreach ($gresult[$gtabid]["indicator"]["object"][$key] as $ikey => $ival){
				$preobject[] = $ival;
			}
		}

		$tresult[$bzm]["id"] = $gresult[$gtabid]["id"][$key];
		$tresult[$bzm]["title"] = lmb_substr($gresult[$gtabid][$this->lmbCalFieldsID['SUBJECT']][$key],0,$umgvar['memolength']);
		$tresult[$bzm]["start"] = date("Y-m-d H:i:s",$stst);
		$tresult[$bzm]["end"]= date("Y-m-d H:i:s",$endst);
		$tresult[$bzm]["subject_noedit"] = $this->getFieldPermissions($value,array(1),$gtabid,$key,$gresult);
		$tresult[$bzm]["date_noedit"] = $this->getFieldPermissions($value,array(2,5),$gtabid,$key,$gresult);
		if($gresult[$gtabid][$this->lmbCalFieldsID['ALLDAY']][$key] OR (lmb_substr($tresult[$bzm]["start"],11,8) == '00:00:00' AND lmb_substr( $tresult[$bzm]["end"],11,8) == '00:00:00')){$tresult[$bzm]["allDay"] = true;}else{$tresult[$bzm]["allDay"] = false;}
		if($color){$tresult[$bzm]["color"] = $color;}
		if($border_color){$tresult[$bzm]["borderColor"] = $border_color;}
		if($text_color){$tresult[$bzm]["textColor"] = $text_color;}
		if($preobject){$tresult[$bzm]["imageurl"] = implode("",$preobject);}
		if($arg_result){$tresult[$bzm]["symbols"] = implode(",",$arg_result);}
		# allday
		if($endst-$stst > 86400){
			$tresult[$bzm]["allDay"]= true;
		}
		# recuring event
		if($gresult[$gtabid][$this->lmbCalFieldsID['REPETITION']][$key] AND $recurrent){
			$tresult[$bzm]["repeat"] = intval($gresult[$gtabid][$this->lmbCalFieldsID['REPETITION']][$key]);
			if($gresult[$gtabid][$this->lmbCalFieldsID['REPEATUNTIL']][$key]){$tresult[$bzm]["repeatEnd"] = get_format_date($gresult[$gtabid][$this->lmbCalFieldsID['REPEATUNTIL']][$key],'Y-m-d H:i:s');}
		}
		# resource
		$tresult[$bzm]["resource"] = $gresult[$gtabid]['RESOURCE_'.$gtab['params1'][$gtabid]][$key];
		
		if(method_exists($this, 'lmb_getEventExtend')){
		  $this->lmb_getEventExtend($tresult,$gresult,$gtabid,$key,$bzm,$stst,$endst);
		}
		
		
	}


	/**
	 * get events EXTENSION
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $startstamp
	 * @param unknown_type $endstamp
	 * @param unknown_type $viewtype
	 * @param unknown_type $verkn
	 * @return unknown

	   function lmb_getEventExtend(&$tresult,&$gresult,$gtabid,$key,$bzm,$stst,$endst){ }
	
	/*
	
	
	/**
	 * get Resources
	 *
	 * @param unknown_type $gtabid
	 * @param unknown_type $params
	 * @return unknown
	 */
	function getResources($gtabid,&$params){
		global $gtab;
		global $gfield;
		
		require_once('gtab/gtab.lib');
		require_once('gtab/gtab_type_erg.lib');
	
		$recsfield = $gtab['params1'][$gtabid];
		$rgtabid = $gfield[$gtabid]["verkntabid"][$recsfield];
		$showfields = $gfield[$gtabid]["verknview"][$recsfield];
		foreach ($showfields as $fkey => $fval){
			$onlyfields[$rgtabid][] = $fval;
		}
		$filter["anzahl"][$rgtabid] = 'all';
		$filter["nolimit"][$rgtabid] = 1;

		
		########### search in resouce ############

		# search single resource
		if($params["cal_resourceSearch"]){
			$resourceSearch = array_filter($params["cal_resourceSearch"]);
		}
		if($resourceSearch){
			$extension['where'][] = $gtab['table'][$rgtabid].'.ID IN ('.implode(',',array_map('parse_db_int',$resourceSearch)).')';
		}elseif($params["gs"][$rgtabid]){
			$gsr[$rgtabid] = $params["gs"][$rgtabid];
		}

		$gresult = get_gresult($rgtabid,1,$filter,$gsr,null,$onlyfields,null,$extension);
		if(!$gresult[$rgtabid]['id']){return false;}

		foreach ($gresult[$rgtabid]['id'] as $vkey => $vval){
			# ist of shown fields
			$retrn = array();
			foreach ($showfields as $fkey => $ffieldid){
				if(!$gfield[$rgtabid]["funcid"][$ffieldid]){continue;}
				$fname = "cftyp_".$gfield[$rgtabid]["funcid"][$ffieldid];
				$retrn[] = $fname($vkey,$ffieldid,$rgtabid,3,$gresult,0);
			}

			$resources['id'] = $vval;
			$resources['name'] = implode($gfield[$gtabid]["verknviewcut"][$recsfield],$retrn);
			
			$r[] = $resources;
			
		}
		
		if(method_exists($this, 'lmb_getResourcesExtend')){
		  $this->lmb_getResourcesExtend($gtabid,$params,$gresult,$r);
		}

		if($r){
			return $r;
		}
			
		return false;
	
	}
	
    /**
     * get Resources EXTENSION
     * 
     * @param unknown $gtabid
     * @param unknown $params
     * @param unknown $gresult
     * @param unknown $r

	   function lmb_getResourcesExtend($gtabid,&$params,&$gresult,&$r){	}

	 */

	
	
	
	
	function getFieldPermissions($ID,$fid,$gtabid,$i,&$gresult){
		global $gfield;
		global $session;
		global $umgvar;
	
		$noedit = 0;
	
		foreach ($fid as $key => $value){
			# ----------- Edit Permission -----------
			if(!$gfield[$gtabid]["perm_edit"][$value]){$noedit = 1;break;}
			# ----------- Editrule -----------
			if($gfield[$gtabid]["editrule"][$value]){
				$noedit = check_GtabRules($ID,$gtabid,$value,$gfield[$gtabid]["editrule"][$value]);
				if($noedit){break;}
			}
		}
	
		return $noedit;
	}

	/*
	function lmb_calContext($ID,$gtabid){
		global $userdat;
	
		$gresult = get_gresult($gtabid,1,null,null,null,null,$ID);
		$gresult = $gresult[$gtabid];
		
		# color
		if($gresult[11][0]){
			$color = $gresult[11][0];
		# row-color from indicator
		}elseif(is_array($gresult["indicator"]["color"][0])){
			$color = average_color($gresult["indicator"]["color"][0]);
		# row-color from user
		}elseif($gresult["color"][0]){
			$color = $gresult["color"][0];
		}else{
			$color = '3366CC';
		}
		
		$text_color = lmbSuggestColor($color);
		$color = '#'.$color;
		
		$out = "<div class=\"fc-context\" style=\"background-color:$color\">";
		
		# Header
		$out .= "<div class=\"fc-contextInnerTop\" style=\"color:$text_color\">";
		$out .= ''.lmb_substr(get_date($gresult[7][0]),11,5)." - ".lmb_substr(get_date($gresult[8][0]),11,5).'</b><br>';
		$out .= '</div>';

		$out .= "<div style=\"background-color:#FFFFFF;padding-top:2px;padding-bottom:4px\"><div class=\"fc-contextInner\" style=\"padding:3px;\">";
		
		# subject
		$out .= "<b>".$gresult[9][0]."</b><br><br>";
		
		# description
		$out .= nl2br(htmlentities($gresult[10][0],ENT_QUOTES,$GLOBALS["umgvar"]["charset"]));

		$out .= '</div></div></div>';
	
		return $out;
	}
	*/
	
	
	/**
	 * # adding bulk dates
	 *
	 * @param unknown_type $params
	 * @param unknown_type $verkn
	 */
	function lmb_addBulkDate(&$params,$verkn=null){
		global $gfield;
		global $session;
		global $umgvar;
		global $LINK;

		require_once("gtab/gtab.lib");

		if(!$LINK[3]){lmb_alert('permission denied!');return;}

		# adding bulk dates

		$calBulk_periodStart = dateToStamp($params["calBulk_periodStart"]);
		$calBulk_periodEnd = dateToStamp($params["calBulk_periodEnd"]);
		# validate dates
		if(!$calBulk_periodStart OR !$calBulk_periodEnd){lmb_alert('kein valider Zeitraum angegeben');return;}
		if($calBulk_periodStart > $calBulk_periodEnd){lmb_alert('Startdatum nach Enddatum!');return;}
		$insStart = array();
		$insEnd = array();
		$gtabid = $params['gtabid'];

		# day after day
		for ($t=$calBulk_periodStart; $t<=$calBulk_periodEnd; $t+=86400){

			$daynr = date('N',$t);
			# check if weekday is selected
			if($params['calBulk_schmeaDay'][$daynr]){

				# list of dates
				foreach ($params["calBulk_termStaH"] as $termKey => $termValue){

					# validate dates
					if(!$params["calBulk_termStaH"][$termKey] OR (!$params["calBulk_termEndH"][$termKey] AND !$params["calBulk_termLenD"][$termKey])){lmb_alert($params["calBulk_termStaH"][$termKey].':'.$params["calBulk_termStaM"][$termKey].' - Termin nicht vollständig!');continue;}
					if($params["calBulk_termLenD"][$termKey] AND !is_numeric($params["calBulk_termLenD"][$termKey])){lmb_alert($params["calBulk_termLenD"][$termKey].' - Dauer ist ungültig!');return;}
					if(!$params["calBulk_termStaM"][$termKey]){$params["calBulk_termStaM"][$termKey] = '00';}
					if(!$params["calBulk_termEndM"][$termKey]){$params["calBulk_termEndM"][$termKey] = '00';}

					# begin & end
					if($params["calBulk_termStaH"][$termKey] AND $params["calBulk_termEndH"][$termKey] AND !$params["calBulk_termLenD"][$termKey]){
						if(!$tStart = stampToDate(mktime($params["calBulk_termStaH"][$termKey],$params["calBulk_termStaM"][$termKey],null,date('m',$t),date('d',$t),date('Y',$t)),4)){lmb_alert('termin ist ungültig!');continue;}
						if(!$tEnd = stampToDate(mktime($params["calBulk_termEndH"][$termKey],$params["calBulk_termEndM"][$termKey],null,date('m',$t),date('d',$t),date('Y',$t)),4)){lmb_alert('termin ist ungültig!');return;}
						$insStart[] = $tStart;
						$insEnd[] = $tEnd;
						# begin & length
					}elseif($params["calBulk_termStaH"][$termKey] AND !$params["calBulk_termEndH"][$termKey] AND $params["calBulk_termLenD"][$termKey]){
						if(!$tStart = stampToDate(mktime($params["calBulk_termStaH"][$termKey],$params["calBulk_termStaM"][$termKey],null,date('m',$t),date('d',$t),date('Y',$t)),4)){lmb_alert('termin ist ungültig!');continue;}
						if(!$tEnd = stampToDate(mktime($params["calBulk_termStaH"][$termKey],$params["calBulk_termStaM"][$termKey]+$params["calBulk_termLenD"][$termKey],null,date('m',$t),date('d',$t),date('Y',$t)),4)){lmb_alert('termin ist ungültig!');continue;}
						$insStart[] = $tStart;
						$insEnd[] = $tEnd;
						# begin & end & length / fill period with dates
					}elseif($params["calBulk_termStaH"][$termKey] AND $params["calBulk_termEndH"][$termKey] AND $params["calBulk_termLenD"][$termKey]){
						$tlStart = mktime($params["calBulk_termStaH"][$termKey],$params["calBulk_termStaM"][$termKey],null,date('m',$t),date('d',$t),date('Y',$t));
						$tlEnd = mktime($params["calBulk_termEndH"][$termKey],$params["calBulk_termEndM"][$termKey],null,date('m',$t),date('d',$t),date('Y',$t));
						$tlen = ($params["calBulk_termLenD"][$termKey]*60);

						if($tlStart >= $tlEnd){lmb_alert($params["calBulk_termLenD"][$termKey].' - Termin ist ungültig!');continue;}

						for ($tl=$tlStart; $tl<$tlEnd; $tl+=$tlen){
							$tStart = stampToDate($tl,4);
							if($tl+$tlen > $tlEnd){
								$tEnd = stampToDate($tlEnd,4);
							}else{
								$tEnd = stampToDate($tl+$tlen,4);
							}

							$insStart[] = $tStart;
							$insEnd[] = $tEnd;
						}
					}
				}
			}
		}
		
		
		if(!$insStart){lmb_alert('keine Termine ausgewält');return;}
		
		# cretate events
		if($params['calBulk_precalc'] == 'create'){
			$this->lmb_insertBulkDate($gtabid,$insStart,$insEnd,$params);
		# confirm events
		}else{
			$this->lmb_confirmBulkDate($gtabid,$insStart,$insEnd,$params);
		}
		
	}
		
	/**
	 * # confirm bulk dates
	 *
	 * @param unknown_type $params
	 * @param unknown_type $verkn
	 */
	function lmb_confirmBulkDate($gtabid,&$insStart,&$insEnd,&$params){
		echo "<script>
				if(confirm('Sollen ".count($insStart)." Termine angelegt werden?')){
					send_form('','','','','create');
				}
				</script>";
	}
	
	
	/**
	 * # insert bulk dates
	 *
	 * @param unknown_type $params
	 * @param unknown_type $verkn
	 */
	function lmb_insertBulkDate($gtabid,&$insStart,&$insEnd,&$params){
		$params["history_fields"] .= ";$gtabid,7,0";
		$params["history_fields"] .= ";$gtabid,8,0";

		foreach ($insStart as $key => $value){
			$_REQUEST['g_'.$gtabid.'_7'] = $insStart[$key];
			$_REQUEST['g_'.$gtabid.'_8'] = $insEnd[$key];
			$this->lmb_historyUpdate($params);
		}
	}



	/**
	 * # update dataset 
	 *
	 * @param unknown_type $params
	 * @param unknown_type $verkn
	 */
	function lmb_historyUpdate(&$params){
		dyns_postHistoryFields($params);
	}


}


?>