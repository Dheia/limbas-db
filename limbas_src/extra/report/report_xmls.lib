<?php
/*
 * Copyright notice
 * (c) 1998-2019 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.6
 */

/*
 * ID:
 */


require_once('gtab/gtab.lib');


/*------- Text ---------*/
function print_text($dom,$report_id,$item,$ID,$rkey,&$report){
	global $gtab;
	global $gfield;
	global $glob_el;
	
	$value = trim($report["value"][$rkey]);
	
	if($value){
		$xmlst = "height:".$report["height"][$rkey].";width:".$report["width"][$rkey].";".set_style($report["style"][$rkey]);
		$item = add_dom_element($dom,$item,"element_".$report["id"][$rkey],$value,$xmlst,"text");
		$GLOBALS['glob_el'][$report["id"][$rkey]] = $arg_result;
	}
	
	return $item;
}


/*------- Formel ---------*/
function print_formel($dom,$report_id,$item,$ID,$rkey,&$report){
	global $gtab;
	global $gfield;
	global $glob_el;
	
	# eval
	$arg_result = '';
	$report_value = trim($report["value"][$rkey]);
	if($report_value){
		if(lmb_substr($report_value,0,6) == "return"){
			eval(str_replace("return","\$arg_result = ",$report_value));
		}else{
			eval($report_value);
		}
	}
	
	#if(gettype($item) == 'string' OR gettype($item) == 'integer' OR gettype($item) == 'double'){
		$xmlst = "height:".$report["height"][$rkey].";width:".$report["width"][$rkey].";".set_style($report["style"][$rkey]);
		$item = add_dom_element($dom,$item,"element_".$report["id"][$rkey],$arg_result,$xmlst,"text");
		$GLOBALS['glob_el'][$report["id"][$rkey]] = $arg_result;
	#}
	
	return $item;
}

/*------- Db Inhalte ---------*/
function print_dbdat($dom,$report_id,$item,$ID,$rkey,&$report){
	global $gtab;
	global $gfield;
	global $glob_el;
	
	$report_ID = $report["id"][$rkey];
	$referenz_tab = $report["referenz_tab"];
	$value = $report["value"][$rkey];
	$dbvalue = $report["dbvalue"][$rkey];
	$dbfield = $report["dbfield"][$rkey];

	$dbf = explode(";",$dbfield);
	$tab = $gtab["table"][$dbf[0]];
	$field = $gfield[$dbf[0]]["field_name"][$dbf[1]];

	if($field){
		$dbtype = explode("#*#",$dbvalue[0]);
		if($dbtype[0] == "IMAGE" OR $dbtype[0] == "PDF"){
			$dbvalue = $dbtype[1];
			$eltyp = "image";
		}elseif($dbtype[0] == "HTML"){
			$dbvalue = $dbtype[1];
			$eltyp = "html";
		}else{
			if($report["style"][$rkey][40]){$sep = $report["style"][$rkey][40];}else{$sep = "# ";}
			if($dbvalue){$dbvalue = implode($sep,$dbvalue);}
			$GLOBALS['el'][$report_ID] = $dbvalue;
			$eltyp = "text";
		}
		
		$xmlst = "height:".$report["height"][$rkey].";width:".$report["width"][$rkey].";".set_style($report["style"][$rkey]);
		$item = add_dom_element($dom,$item,$field.'_'.$report["id"][$rkey],$dbvalue,$xmlst,$eltyp);
		$GLOBALS['glob_el'][$report["id"][$rkey]] = $dbvalue;
		return $item;
	}else{
		return false;
	}
}
	

/*------- Tabelle ---------*/
function print_tab($dom,$report_id,$item,$ID,$el,&$report){

	global $db;
	global $umgvar;
	global $glob_el;
	global $glob_rowel;
	global $gtab;
	global $gfield;
	
	$report_style = $report["style"][$el];
	$report_tab = $report["tab"][$el];
	$report_tab_size = $report["tab_size"][$el];

	$tab_size = explode(";",$report_tab_size);
	$report_tab_cells = $tab_size[0];
	$report_tab_rows = $tab_size[1];

	# default values
	#$default = GetDefaultType();
	$columns = $report_tab_cells;

	//DEFAULT TABLE HEADER SETTINGS
	for($i=0; $i<$columns; $i++) $header_type[$i] = $default["header"];

	//DEFAULT TABLE DATA SETTINGS
	$data_type = Array();//reset the array
	for ($i=0; $i<$columns; $i++) $data_type[$i] = $default["data"];


	# Tabellenname des ersten DB-Elements für Elementbeschreibung
	$sqlquery = "SELECT DBFIELD FROM LMB_REPORTS WHERE BERICHT_ID = $report_id AND TAB = ".$report_tab." AND TYP = 'dbdat'";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(lmbdb_result($rs, "DBFIELD")){
		$tmp = explode(";",lmbdb_result($rs, "DBFIELD"));
		$el_tablename = $gtab["table"][$tmp[0]]."_".$report["id"][$el];
	}else{
		$el_tablename = "element_".$report["id"][$el];
	}

	# add dom table element
	$newTabElement = $dom->createElement("table");
	$newTabElement->setAttribute('name',lmb_strtolower(lmb_utf8_encode($el_tablename)));
	$newTabElement->setIdAttribute("name",1);
	$newTabElement->setAttribute('style',set_style($report["style"][$el]));
	
    # ------------------------------------------------------------------------------------------------------------

	# first get cellsize of first hidden line
	$sqlquery = "SELECT TAB_EL_COL,TAB_EL_COL_SIZE FROM LMB_REPORTS WHERE BERICHT_ID = $report_id AND TAB_EL_ROW = 0 AND TYP = 'tabhead' AND TAB = ".$report_tab." ORDER BY TAB_EL_COL";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	$bzm = 1;
	while(lmbdb_fetch_row($rs)) {
		$firstrow_width[$bzm] = lmbdb_result($rs, "TAB_EL_COL_SIZE");
		$bzm++;
	}

	/*------- Schleife Zeilen (Original-Tabelle) ---------*/
	$current_row = 1;
	$bzm2 = 1;
	$rowid = 1;
	while($bzm2 <= $report_tab_rows){ # tabrows = Anzahl Zeilen
		unset($tab_row);
		unset($cell_value);
		unset($cell_name);
		$seperator = null;

		/*------- Zeileninhalte aus Datensätzen (alle Felder einer Zeile als ganze Abfrage) ---------*/
		$dataArray = get_dataArray($ID,$report_id,$report_tab,$report,$report_tab_cells,$bzm2,$rowid);
		if($dataArray["count"]){
			$max_count = $dataArray["count"]; # Anzahl gefundener Datensätze
			$rowid = $dataArray["rowid"]; # rowid wird auf neuen Wert gesetzt
		}else{$max_count = 1;}

		/*------- Schleife Spalten (Original-Tabelle) ---------*/
		$bzm3 = 1;
		$bzm5 = 0;
		$has_row = 0;
		while($bzm3 <= $report_tab_cells){
			
			# Auslesen einzelner Zellenparameter
			$sqlquery = "SELECT EL_ID,POSX,POSY,HEIGHT,STYLE,TYP,TAB,INHALT,DBFIELD FROM LMB_REPORTS WHERE BERICHT_ID = $report_id AND TAB = ".$report_tab." AND TAB_EL_ROW = ".$bzm2." AND TAB_EL_COL = ".$bzm3." ORDER BY EL_ID ";
			$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
			$rep = null;
			while(lmbdb_fetch_row($rs)) {
			    $rep['el_id'][] = lmbdb_result($rs, 'EL_ID');
                $rep['posx'][] = lmbdb_result($rs, 'POSX');
                $rep['posy'][] = lmbdb_result($rs, 'POSY');
                $rep['height'][] = lmbdb_result($rs, 'HEIGHT');
                $rep['style'][] = lmbdb_result($rs, 'STYLE');
                $rep['typ'][] = lmbdb_result($rs, 'TYP');
                $rep['tab'][] = lmbdb_result($rs, 'TAB');
                $rep['inhalt'][] = lmbdb_result($rs, 'INHALT');
                $rep['dbfield'][] = lmbdb_result($rs, 'DBFIELD');
            }

			$cell_par[$bzm3] = array('',$rep['posx'][0],$rep['posy'][0],$firstrow_width[$bzm3],$rep['height'][0],explode(";",$rep['style'][0]),$rep['typ'][0],$rep['tab'][0]);

			if($rep){
				
				# cellname
				if($rep['typ'][0] == "dbdat"){
					$fn = explode(';',$rep['dbfield'][0]);
					$cell_name[$bzm3] = lmb_utf8_encode(trim($gfield[$fn[0]]['field_name'][$fn[1]]))."_".$rep['el_id'][0];
					#$cell_name[$bzm3] = lmb_utf8_decode(trim(lmbdb_result($rs, "INHALT")),1)."_".lmbdb_result($rs, "EL_ID");
				}elseif($rep['el_id'][0]){
					$cell_name[$bzm3] = "element_".$rep['el_id'][0];
				}else{
					$cell_name[$bzm3] = "";
				}

				/*------- Alle Elemente einer Zelle (für Dateninhalte) ---------*/
				$bzm4 = 1;
				foreach($rep['el_id'] as $key => $val){
					
					$dbelstyle = explode(";",$rep['style'][$key]);
					if($bzm4 == 1 AND $dbelstyle[40]){
						$seperator[$bzm2."_".$bzm3] = $dbelstyle[40];
					}

					#--------- Bei Typ Dateninhalt Zellenzeile auffüllen aus Datenabfrage --------------
					if($rep['typ'][$key] == "dbdat"){
						$cell_value[$bzm3][$bzm4] = $dataArray[$bzm5]; # auffüllen
						$GLOBALS["glob_el"][$rep['el_id'][$key]] = $cell_value[$bzm3][$bzm4];
						# Element verstecken
						if(hide_element($dbelstyle[29])){
							$cell_value[$bzm3][$bzm4] = null;
						}
						$bzm5++;
					}
					$bzm4++;
				}

				/*------- Alle Elemente einer Zelle (für Einzelelemente z.B. TEXT/Formel) ---------*/
				$bzm4 = 1;
				foreach($rep['el_id'] as $key => $val){
					$value = lmb_utf8_decode(trim($rep['inhalt'][$key]),1); # longtext handle
					$typ = $rep['typ'][$key];

					# Datum
					if($typ == "datum"){
						for($i=1; $i<=$max_count; $i++){
							$cell_value[$bzm3][$bzm4][] = local_date(1);
						}
					# Formel
					}elseif($typ == "formel"){
						# nochmalige Schleife aller vorher eingetragener Dateninhalte un dauf Formel prüfen
						for($i=0; $i<$max_count; $i++){
							$ROWNR = ($i + $current_row); # in Formel zu verwendende ROWNR
							$rtab_value = trim($value);
							if($rtab_value OR $rtab_value == "0"){
								$arg_result = null;
								if(lmb_substr($rtab_value,0,6) == "return"){
									eval(str_replace("return","\$arg_result = ",$rtab_value));
								}else{
									eval($rtab_value);
								}
							}
							$cell_value[$bzm3][$bzm4][] = $arg_result;
						}
					# Text/Sonstiges
					}elseif($typ != "dbdat"){
						for($i=1; $i<=$max_count; $i++){
							$cell_value[$bzm3][$bzm4][] = $value;
						}
					}
					$cell_value["count"][$bzm3] = $bzm4;
					
					$bzm4++;
				}


			}else{
				$cell_value[$bzm3][1][] = " ";
			}
			$bzm3++;
		}

		
		# call extension for table array
		if($call_extFct AND function_exists($call_extFct)){
			$cell_value = $call_extFct($cell_value,$max_count);
			$call_extFct=null;
		}
		
		# ------------------------------------------------------------------------------------------------------------
		$bzm5 = 0;
		# Zeilen --------------
		for($bzm5=0; $bzm5 < $max_count;$bzm5++){
			$data = array();
			#unset($tab_row["value"]);
			$HIDEROW = 0;
			$col = 0;
			# Spalten -------------
			for($i=1; $i<=$report_tab_cells;$i++){
				# Inhalt
				$thiscell_par = $cell_par[$i];
				unset($cellvalue);
				unset($ISVALUE);
				
				for($c=1; $c<=$cell_value["count"][$i];$c++){
					$cellvalue[] = $cell_value[$i][$c][$bzm5];
					if($cell_value[$i][$c][$bzm5] == "#HIDEROW"){$HIDEROW = 1;break;}
					if($cell_style[$i][$c][$bzm5]){$thiscell_par[5] = lmb_array_merge($thiscell_par[5],$cell_style[$i][$c][$bzm5]);}
					if($cell_value[$i][$c][$bzm5]){$ISVALUE = 1;}
				}

				if($cellvalue){
					if($seperator[$bzm2."_".$i] AND lmb_substr($seperator[$bzm2."_".$i],0,1) != "#"){
						$seperator_ = str_replace("\\\\t","\t",str_replace("\\\\n","\n",$seperator[$bzm2."_".$i]));
						$cellvalue = trim(implode($seperator_,$cellvalue));
					}else{
						$cellvalue = trim(implode(" ",$cellvalue));
					}
				}
				
				# data Array
				$data[$col]['WIDTH'] = $thiscell_par[3];
				# default cell style
				$data[$col]['STYLE'] = $thiscell_par[5];
				
				if($data[$col]['STYLE'][37]){
					$data[$col]['COLSPAN'] = "colspan:".$data[$col]['STYLE'][37];
				}

				# extendet style for line
				if($cell_value["style"][$i][$bzm5]){
					$data[$col] = array_merge($data[$col],$cell_value["style"][$i][$bzm5]);
				}
				$data[$col]['TEXT'] = $cellvalue;
				#$colspan = $data[$col]['STYLE'][37];

				# cellname
				if($cell_name[$i]){
					$data[$col]['NAME'] = $cell_name[$i]."_".$current_row;
				}
				


				# Colspan
				#if($colspan){
				#	$colspan=($colspan-1);
				#	if($colspan){
				#		$col++;
				#		continue;
				#	}
				#	$colspan = $colsp;
				#}

				$col++;
			}

			if(!$HIDEROW){
				# new dom row element
				$newElement = $dom->createElement("row");

				# new dom cell elements
				foreach ($data as $key => $val){
					$xmlst = "width:".$data[$key]['WIDTH'].";".set_style($data[$key]['STYLE']).$data[$key]['COLSPAN'];
					$newElement = add_dom_element($dom,$newElement,$data[$key]['NAME'],$data[$key]['TEXT'],$xmlst,"text");
					$isset = 1;
				}
				
				# append child
				$newTabElement->appendChild($newElement);

			}
			$current_row++;
		}
		$bzm2++;
		$rowid++;
	}

	if($isset){
		$item->appendChild($newTabElement);
	}
	
	return $item;

}

/**
 * hide element
 *
 */
function hide_element($hide){
	if($hide == 1 OR $hide == "true" OR ($hide == 2 AND $pagenr == 1) OR ($hide == 3 AND $pagenr > 1) OR ($hide == 4 AND $odd) OR ($hide == 5 AND !$odd)) {
		return true;
	}else{
		return false;
	}
}


# DOM Element hinzufügen
function add_dom_element($dom,$item,$name,$value,$style,$eltyp){
	
	$newElement = $dom->createElement(lmb_utf8_encode($eltyp));
	$newElement->setAttribute('name',lmb_strtolower(lmb_utf8_encode($name)));
	if($name){$newElement->setIdAttribute("name",1);}
	$newElement->setAttribute('style',lmb_utf8_encode($style));
	$newElement->appendChild($dom->createTextNode(lmb_utf8_encode($value)));
	$item->appendChild($newElement);
	return $item;
}


/*----------------- Element-Schleife XML -------------------*/
function create_dom_object($dom,$report_id,$item,$ID,&$report,$rep){
	global $gtab;
	# Elementschleife
	if($report["id"]){
	foreach ($report["id"] as $key => $value){
		if($report["typ"][$key] == "dbdat" OR $report["typ"][$key] == "formel" OR $report["typ"][$key] == "tab" OR $report["typ"][$key] == "text"){
			$fname = "print_".$report["typ"][$key];
			$item = $fname($dom,$report_id,$item,$ID,$key,$report);
		}
	}}
	return $item;
}




# --- XML ausgeben ---------------------------------
function store_xml($dom,$rep,$ID,$report_output){
	global $session;
	global $umgvar;
	global $db;
	global $lang;

	# ------- xml Pfad ---------
	$name = $rep["name"];
	$out = $umgvar["pfad"]."/USER/".$session["user_id"]."/temp/".$name;
	$path = $umgvar["pfad"]."/USER/".$session["user_id"]."/temp/".lmb_utf8_encode($name);


	# ------- xml schreiben ---------
	$fh = fopen ($path, 'w');
	fwrite($fh, $dom->saveXML());
	fclose($fh);

	if(file_exists($path)){
		# ------- archivieren ---------
		if($report_output == 2){
			# Archivieren
			reportArchiv($out,$rep,$ID,$report_output);
		}else{
			return $name;
		}
	}
	return false;
}


function xml_report($ID,$report_id,$use_record,&$rep){
	global $umgvar;
	global $gtab;
	
	// Creates a DOMDocumentType instance
	$dtd = DOMImplementation::createDocumentType('preliminary', '', $umgvar["pfad"]."/extra/report/ooReport/xml/preliminary.dtd");
	
	# neues DOM Objekt
	#$dom = new DomDocument('1.0', "utf-8");
	// Creates a DOMDocument instance
	$dom = DOMImplementation::createDocument(null, "", $dtd);
	
	$dom->encoding = 'UTF-8';
	$dom->standalone = $dom->xmlStandalone = false;
	$dom->formatOutput = true;


	/* --- Report umbenennen ------------- */
	# root Element (Berichtsname)
	$root = $dom->createElement("report");
	$root->setAttribute('name', $rep["name"]);
	$root->setIdAttribute("name",1);
	$reportlist = array();
	if(is_array($ID)){$reportlist = $ID;}
	elseif(isset($ID)){$reportlist[0] = $ID;}
	elseif($use_record){$reportlist = explode(";",$use_record);}
	
	foreach ($reportlist as $key => $ID_){
		$recel = explode("_",$ID_);
		if($recel[1]){
			if($recel[1] == $rep["referenz_tab"]){
				$SID = $recel[0];
			}
		}else{
			$SID = $recel[0];
		}
		
		if(isset($SID)){
			# report-Elemente
			$report = element_list($SID, $_passByRef = array("report_id" => $report_id),'');
			# root Element (Berichtsname)
			$item = $dom->createElement("item");
			$item->setAttribute('id', $SID);
			$item->setIdAttribute("id",1);
			$item = create_dom_object($dom,$report_id,$item,$SID,$report,$rep);
			$root->appendChild($item);
		}
	}

	# Rootelement schliesen
	$dom->appendChild($root);

	return array($dom,$rep);
}

?>