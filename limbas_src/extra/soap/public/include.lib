<?php
/*
 * Copyright notice
 * (c) 1998-2018 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.5
 */

/*
 * ID:
 */
require_once("lib/config.lib");


if($LIM["use_soap"]){
	session_name($LIM["session_soap_name"]);
	session_start();
}else{
	$orgpath = getcwd();
	chdir($LIM["lmpath"]);

	$_SERVER['PHP_AUTH_USER'] = $LIM["username"];
	$_SERVER['PHP_AUTH_PW'] = $LIM["pass"];

	# Cookie Session
	if(!session_id() AND $LIM["use_cookie"]){
		$cookie = soapCookieGet($LIM["session_name"]);
		if($cookie){
			session_name($LIM["session_name"]);
			session_id($cookie[$LIM["session_name"]]["val"]);
		}
	}
	
	define("IS_SOAP",1);

	require_once("inc/include_db.lib");
	require_once("lib/include.lib");
	require_once("lib/session.lib");
	require_once("extra/soap/server.php");

	chdir($orgpath);
}

function call_client($lmpar){
	global $lmbs;
	global $LIM;

	$lmpar["lmbs"] = $lmbs["session"]["s_id"]; # Session OK

	# ----- Aktion ausf�hren ----------
	if($lmpar AND $LIM["use_soap"]) {

		# Cookie Session
		if(!$lmbs["session"]["s_id"] AND $LIM["use_cookie"]){
			$cookie = soapCookieGet($LIM["session_name"]);
			if($cookie){
				$lmbs["session"]["s_id"] = $cookie[$LIM["session_name"]]["val"];
				$lmbs["session"]["s_name"] = $LIM["session_name"];
			}
		}

		$client = new SoapClient(NULL,
		array("login" =>$LIM["username"], "password" => $LIM["pass"], "location" => $LIM["lim_url"]."/main_soap.php?".$lmbs["session"]["s_name"]."=".$lmbs["session"]["s_id"],
		"uri" => "urn:xmethodsTestServer",
		"style" => SOAP_RPC,
		"use" => SOAP_ENCODED,
		"compression" => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_DEFLATE,
		"encoding"=>"ISO-8859-1"
		));

		try{
			$lmb = $client->__call("runlmb", array(serialize($lmpar)), array("uri" => "urn:xmethodsLimbasServer","soapaction" => "urn:xmethodsLimbasServer"));
		}catch(Exception $e){
			error_log($e->getMessage()."in ".$e->getFile()." on line #".$e->getLine()."\nerror on query:\n".print_r($lmpar,1)."\n{$_SERVER['HTTP_HOST']}:{$_SERVER['REQUEST_URI']}:{$_SERVER['QUERY_STRING']} with request:\n".print_r($_REQUEST,1));
		}
		if($lmb){$lmb = unserialize($lmb);}


		if($lmb["session"]["s_id"]){
			$lmbs["session"] = $lmb["session"];
			$lmbs["gtab"] = $lmb["gtab"];
			$lmbs["gfield"] = $lmb["gfield"];
			$lmbs["gselect"] = $lmb["gselect"];
			$_SESSION["lmbs"] = $lmbs;
			if($LIM["use_cookie"]){soapCookieSet($lmbs["session"]["s_name"],$lmbs["session"]["s_id"]);}
		}

	}elseif($lmpar){
		$orgpath = getcwd();
		chdir($LIM["lmpath"]);
		$lmb = parse_action($lmpar);
		chdir($orgpath);
		if($lmb["session"]["s_id"]){
			$lmbs["session"] = $lmb["session"];
			$lmbs["gtab"] = $lmb["gtab"];
			$lmbs["gfield"] = $lmb["gfield"];
			$lmbs["gselect"] = $lmb["gselect"];
			$_SESSION["lmbs"] = $lmbs;
			if($LIM["use_cookie"]){soapCookieSet($lmbs["session"]["s_name"],$lmbs["session"]["s_id"]);}
		}

	}

	return $lmb;
}



function soapCookieGet(){
	global $LIM;
	global $HTTP_HOST;

	# read cookie
	if(file_exists($LIM["cookie_path"])){
		$cookie_record = file($LIM["cookie_path"]);
		foreach ($cookie_record as $key => $value){
			if($key > 4){
				$cookie = explode("\t",$value);
				if($cookie[0] == $HTTP_HOST){
					$returncookie[$cookie[2]]["host"] = $cookie[0];
					$returncookie[$cookie[2]]["stamp"] = $cookie[1];
					$returncookie[$cookie[2]]["val"] = $cookie[3];
				}
			}
		}
		if($returncookie){
			return $returncookie;
		}
	}


	return false;

}


function soapCookieSet($cname,$cvalue){
	global $HTTP_HOST;
	global $LIM;

	$cookie = array();
	$header = array("# LIMBAS SOAP Cookie File","# http://www.limbas.org","# This is a generated file!  Do not edit.","# To delete cookies, drop file.","");

	# read cookie
	if(file_exists($LIM["cookie_path"])){
		$cookie = file($LIM["cookie_path"]);
	}else{
		$cookie = $header;
	}

	foreach ($cookie as $key => $value){
		$line = explode("\t",$value);
		if($line[0] == $HTTP_HOST AND $line[2] == $cname){
			unset($cookie[$key]);
		}else{
			$cookie[$key] = str_replace("\n","",$value);
		}
	}


	$cookie[] = $HTTP_HOST."\t".time()."\t".$cname."\t".$cvalue;

	# write cookie
	$fp = fopen($LIM["cookie_path"],"w+");
	fputs($fp,implode("\n",$cookie));
	fclose($fp);
}


function cache_call_client($lmpar){
	global $LIM;

	if($LIM["cacheQuery"] == false){
		$lmb = call_client($lmpar);
		return $lmb;
	}

	if($lmpar){
		foreach ($lmpar as $key => $request){
			if($request_ = LMB_isCached($request)){
				$cachedLmpar[] = $request_;
				$lmparHistory[$key] = "cached";
			}else{
				$newLmpar[] = $request;
				$lmparHistory[$key] = "new";
			}
		}

		if($newLmpar){
			$newLmb = call_client($newLmpar);
			LMB_cacheLmb($newLmpar,$newLmb);
		}
		if($cachedLmpar){
			$cachedLmb = LMB_call_client_from_cache($cachedLmpar);
		}
		
		if($lmparHistory){
		foreach ($lmparHistory as $key => $type){
			if($type == "new"){
				$lmb[] = $newLmb[$key];
			}elseif($type == "cached"){
				$lmb[] = $cachedLmb[$key];
			}
		}}
		
		return $lmb;
	}
}

function LMB_cacheLmb($lmpar,$lmb){
	global $LIM;

	if($lmb){
		foreach ($lmb as $keyLmb => $valLmb) {
			$tmpCache["request"] = serialize($lmpar[$keyLmb]);
			$tmpCache["result"] = $lmb[$keyLmb];
			$cache[] = $tmpCache;

			$fp = fopen($LIM["dbFolder"] . "/lmpar_" . md5($tmpCache["request"]) . ".dat","w");
			fputs($fp,Serialize($tmpCache["result"]));
			fclose($fp);
		}
	}

}

function LMB_call_client_from_cache($cachedLmpar){
	global $LIM;

	foreach ($cachedLmpar as $key => $serialize){
		#$serialize = serialize($val);
		$fileName = $LIM["dbFolder"] . "/lmpar_" . $serialize . ".dat";
		$fp = fopen($fileName,"r");
		$fgets = fread($fp,filesize($fileName));
		$lmb[$key] = unserialize($fgets);
		fclose($fp);

	}
	return $lmb;
}

function LMB_isCached($request){
	global $LIM;

	$found = false;

	$serialize = md5(serialize($request));
	if(file_exists($LIM["dbFolder"] . "/lmpar_" . $serialize . ".dat")){
		$found = true;
		return $serialize;
	}else{
		return false;
	}

	
}

?>