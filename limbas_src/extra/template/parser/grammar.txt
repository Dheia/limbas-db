Start
  = Part*

Part
  = IfConstruct
  / TemplateTag
  / Html

IfConstruct
  = condition:IfTag consequent:Part* ElseTag alternative:Part* EndifTag
  { return $condition ? TemplateConfig::$instance->getIfPlaceholderInstance($condition, $consequent, $alternative) : TemplateConfig::$instance->getHtmlInstance(""); }
  / condition:IfTag consequent:Part* EndifTag
  { return $condition ? TemplateConfig::$instance->getIfPlaceholderInstance($condition, $consequent, null) : TemplateConfig::$instance->getHtmlInstance(""); }

IfTag
  = TAGSTART medium:Medium? IF condition:IfCondition TAGEND
  { return (!$medium || TemplateConfig::$instance->getMedium() === $medium) ? $condition : null; }

IfCondition
  = DataPlaceholder
  / Function

ElseTag
  = TAGSTART ELSE TAGEND

EndifTag
  = TAGSTART ENDIF TAGEND

TemplateTag
  = ESCAPEDTAGSTART Medium? Template TAGEND
  { return $this->text(); }
  / TAGSTART medium:Medium? tpl:Template TAGEND
  { return (!$medium || TemplateConfig::$instance->getMedium() === $medium) ? $tpl : TemplateConfig::$instance->getHtmlInstance(""); }

Medium
  = medium:Identifier ":" _
  { return $medium; }

Template
  = DataPlaceholder
  / Function
  / Subtemplate

DataPlaceholder
  = head:FieldIdentifier tail:(FieldIdentifier)* options:Option* altvalue:AltValue?
  { array_unshift($tail, $head); return TemplateConfig::$instance->getDataPlaceholderInstance($tail, array_merge(...$options), $altvalue); }

Option
  = OPTIONSTART key:OptionKey OPTIONEND
  { return array($key => true); }
  / OPTIONSTART key:OptionKey OPTIONKEYVALSEP val:OptionVal OPTIONEND
  { return array($key => $val); }

OptionKey
  = OptionKeyChar*
  { return $this->text(); }

OptionKeyChar
  = "\\" OPTIONKEYVALSEP
  / "\\" OPTIONEND
  / !OPTIONKEYVALSEP !OPTIONEND .

OptionVal
  = OptionValChar*
  { return $this->text(); }

OptionValChar
  = "\\" OPTIONEND
  / !OPTIONEND .

AltValue
  = "|" param:StringParam
  { return $param; }

FieldIdentifier
  = tableIdentifier:(TABLEDATASTART Identifier)? DATASTART fieldIdentifier:Identifier
  { $ret = array('name' => $fieldIdentifier); if ($tableIdentifier) { $ret['table'] = $tableIdentifier[1]; } return $ret; }

Identifier
  = [A-Za-z0-9_]+
  { return $this->text(); }

Function
  = FUNCTIONSTART call:FunctionCall
  { return $call; }

FunctionCall
  = name:FunctionName _ "(" _ paramHead:Param paramTail:(_ "," _ Param)* _ ")"
  { $paramTail = array_map(function($p) { return $p[3]; }, $paramTail); array_unshift($paramTail, $paramHead); return TemplateConfig::$instance->getFunctionPlaceholderInstance($name, $paramTail); }
  / name:FunctionName _ "()"?
  { return TemplateConfig::$instance->getFunctionPlaceholderInstance($name, array()); }

FunctionName
  = [A-Za-z0-9]+
  { return $this->text(); }

Param
  = Function
  / DataPlaceholder
  / StringParam
  / NumberParam

StringParam
  = STRDELIMITER parts:QuotedStringCharacter* STRDELIMITER
  { return join('', $parts); }

QuotedStringCharacter
  = '\\"'
  / !STRDELIMITER .
  { return $this->text(); }

NumberParam
  = MINUS? [0-9]+ decimal:(DECIMALPOINT [0-9]+)?
  { return $decimal ? floatval($this->text()) : intval($this->text()); }

Subtemplate
  = (!FUNCTIONSTART !DATASTART !TAGEND !IF !ELSE !ENDIF .)+
    { return TemplateConfig::$instance->getSubTemplateElementPlaceholderInstance($this->text()); }

Html
  = (!TAGSTART !ESCAPEDTAGSTART .)+
    { return TemplateConfig::$instance->getHtmlInstance($this->text()); }

_ "whitespace"
  = [ \t\n\r]*

TAGSTART
  = "${"

ESCAPEDTAGSTART
  = "$${"

TAGEND
  = "}"

FUNCTIONSTART
  = "="

STRDELIMITER
  = '"'

DATASTART
  = "->"
  / "-&gt;"

TABLEDATASTART
  = "=>"
  / "=&gt;"

IF
  = "if "

ELSE
  = "else"

ENDIF
  = "endif"

MINUS
  = "-"

DECIMALPOINT
  = "."

OPTIONSTART
  = "["

OPTIONKEYVALSEP
  = "="

OPTIONEND
  = "]"