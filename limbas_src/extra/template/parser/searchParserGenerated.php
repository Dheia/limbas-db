<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */


/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode('&#$code;', ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("ord_unicode")) {
    function ord_unicode($character) {
        if (lmb_strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(lmb_substr($json, 3, 4));
        if (lmb_substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(lmb_substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (lmb_substr($pattern, -1) == "i") {
            return mb_eregi(lmb_substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(lmb_substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("SyntaxError", false)) {
    class SyntaxError extends Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class Parser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_lmb_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return lmb_substr(is_array($this->input) ? implode('', $this->input) : $this->input, $this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_lmb_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;

    private function peg_f0($condition, $consequent, $alternative) { return $condition ? TemplateConfig::$instance->getIfPlaceholderInstance($condition, $consequent, $alternative) : TemplateConfig::$instance->getHtmlInstance(""); }
    private function peg_f1($condition, $consequent) { return $condition ? TemplateConfig::$instance->getIfPlaceholderInstance($condition, $consequent, null) : TemplateConfig::$instance->getHtmlInstance(""); }
    private function peg_f2($medium, $condition) { return (!$medium || TemplateConfig::$instance->getMedium() === $medium) ? $condition : null; }
    private function peg_f3() { return $this->text(); }
    private function peg_f4($medium, $tpl) { return (!$medium || TemplateConfig::$instance->getMedium() === $medium) ? $tpl : TemplateConfig::$instance->getHtmlInstance(""); }
    private function peg_f5($medium) { return $medium; }
    private function peg_f6($head, $tail, $options, $altvalue) { array_unshift($tail, $head); return TemplateConfig::$instance->getDataPlaceholderInstance($tail, array_merge(...$options), $altvalue); }
    private function peg_f7($key) { return array($key => true); }
    private function peg_f8($key, $val) { return array($key => $val); }
    private function peg_f9($param) { return $param; }
    private function peg_f10($tableIdentifier, $fieldIdentifier) { $ret = array('name' => $fieldIdentifier); if ($tableIdentifier) { $ret['table'] = $tableIdentifier[1]; } return $ret; }
    private function peg_f11($call) { return $call; }
    private function peg_f12($name, $paramHead, $paramTail) { $paramTail = array_map(function($p) { return $p[3]; }, $paramTail); array_unshift($paramTail, $paramHead); return TemplateConfig::$instance->getFunctionPlaceholderInstance($name, $paramTail); }
    private function peg_f13($name) { return TemplateConfig::$instance->getFunctionPlaceholderInstance($name, array()); }
    private function peg_f14($parts) { return join('', $parts); }
    private function peg_f15($decimal) { return $decimal ? floatval($this->text()) : intval($this->text()); }
    private function peg_f16() { return TemplateConfig::$instance->getSubTemplateElementPlaceholderInstance($this->text()); }
    private function peg_f17() { return TemplateConfig::$instance->getHtmlInstance($this->text()); }

    private function peg_parseStart() {

      $s0 = array();
      $s1 = $this->peg_parsePart();
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        $s1 = $this->peg_parsePart();
      }

      return $s0;
    }

    private function peg_parsePart() {

      $s0 = $this->peg_parseIfConstruct();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseTemplateTag();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseHtml();
        }
      }

      return $s0;
    }

    private function peg_parseIfConstruct() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIfTag();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsePart();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsePart();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseElseTag();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_parsePart();
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_parsePart();
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseEndifTag();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f0($s1, $s2, $s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseIfTag();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = array();
          $s3 = $this->peg_parsePart();
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parsePart();
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseEndifTag();
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f1($s1, $s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseIfTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMedium();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIF();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseIfCondition();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseTAGEND();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f2($s2, $s4);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIfCondition() {

      $s0 = $this->peg_parseDataPlaceholder();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFunction();
      }

      return $s0;
    }

    private function peg_parseElseTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseELSE();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseTAGEND();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseEndifTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseENDIF();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseTAGEND();
          if ($s3 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseTemplateTag() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseESCAPEDTAGSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMedium();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseTemplate();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseTAGEND();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f3();
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseTAGSTART();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseMedium();
          if ($s2 === $this->peg_FAILED) {
            $s2 = null;
          }
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseTemplate();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseTAGEND();
              if ($s4 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f4($s2, $s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseMedium() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c0) {
          $s2 = $this->peg_c0;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parse_();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f5($s1);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseTemplate() {

      $s0 = $this->peg_parseDataPlaceholder();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFunction();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseSubtemplate();
        }
      }

      return $s0;
    }

    private function peg_parseDataPlaceholder() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFieldIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseFieldIdentifier();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseFieldIdentifier();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_parseOption();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parseOption();
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseAltValue();
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f6($s1, $s2, $s3, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseOption() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseOPTIONSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOptionKey();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseOPTIONEND();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f7($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseOPTIONSTART();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseOptionKey();
          if ($s2 !== $this->peg_FAILED) {
            $s3 = $this->peg_parseOPTIONKEYVALSEP();
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parseOptionVal();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parseOPTIONEND();
                if ($s5 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f8($s2, $s4);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseOptionKey() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseOptionKeyChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseOptionKeyChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f3();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseOptionKeyChar() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c2) {
        $s1 = $this->peg_c2;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c3);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOPTIONKEYVALSEP();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c2) {
          $s1 = $this->peg_c2;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c3);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parseOPTIONEND();
          if ($s2 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s2 = $this->peg_parseOPTIONKEYVALSEP();
          $this->peg_silentFails--;
          if ($s2 === $this->peg_FAILED) {
            $s1 = null;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
          if ($s1 !== $this->peg_FAILED) {
            $s2 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s3 = $this->peg_parseOPTIONEND();
            $this->peg_silentFails--;
            if ($s3 === $this->peg_FAILED) {
              $s2 = null;
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
              if ($this->input_length > $this->peg_currPos) {
                $s3 = $this->input_lmb_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c4);
                }
              }
              if ($s3 !== $this->peg_FAILED) {
                $s1 = array($s1, $s2, $s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        }
      }

      return $s0;
    }

    private function peg_parseOptionVal() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseOptionValChar();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseOptionValChar();
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f3();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseOptionValChar() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c2) {
        $s1 = $this->peg_c2;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c3);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOPTIONEND();
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s2 = $this->peg_parseOPTIONEND();
        $this->peg_silentFails--;
        if ($s2 === $this->peg_FAILED) {
          $s1 = null;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_length > $this->peg_currPos) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c4);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $s1 = array($s1, $s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseAltValue() {

      $s0 = $this->peg_currPos;
      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c5) {
        $s1 = $this->peg_c5;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c6);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseStringParam();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f9($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFieldIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_parseTABLEDATASTART();
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseIdentifier();
        if ($s3 !== $this->peg_FAILED) {
          $s2 = array($s2, $s3);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseDATASTART();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIdentifier();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f10($s1, $s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseIdentifier() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c7, $this->input_lmb_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c8);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c7, $this->input_lmb_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c8);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f3();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseFunction() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFUNCTIONSTART();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseFunctionCall();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f11($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFunctionCall() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFunctionName();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c9) {
            $s3 = $this->peg_c9;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c10);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseParam();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = array();
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_parse_();
                if ($s8 !== $this->peg_FAILED) {
                  if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c11) {
                    $s9 = $this->peg_c11;
                    $this->peg_currPos++;
                  } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c12);
                    }
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s10 = $this->peg_parse_();
                    if ($s10 !== $this->peg_FAILED) {
                      $s11 = $this->peg_parseParam();
                      if ($s11 !== $this->peg_FAILED) {
                        $s8 = array($s8, $s9, $s10, $s11);
                        $s7 = $s8;
                      } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s7;
                  $s7 = $this->peg_FAILED;
                }
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  $s7 = $this->peg_currPos;
                  $s8 = $this->peg_parse_();
                  if ($s8 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c11) {
                      $s9 = $this->peg_c11;
                      $this->peg_currPos++;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c12);
                      }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                      $s10 = $this->peg_parse_();
                      if ($s10 !== $this->peg_FAILED) {
                        $s11 = $this->peg_parseParam();
                        if ($s11 !== $this->peg_FAILED) {
                          $s8 = array($s8, $s9, $s10, $s11);
                          $s7 = $s8;
                        } else {
                          $this->peg_currPos = $s7;
                          $s7 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s7;
                      $s7 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_parse_();
                  if ($s7 !== $this->peg_FAILED) {
                    if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c13) {
                      $s8 = $this->peg_c13;
                      $this->peg_currPos++;
                    } else {
                      $s8 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c14);
                      }
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      $this->peg_reportedPos = $s0;
                      $s1 = $this->peg_f12($s1, $s5, $s6);
                      $s0 = $s1;
                    } else {
                      $this->peg_currPos = $s0;
                      $s0 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseFunctionName();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c15) {
              $s3 = $this->peg_c15;
              $this->peg_currPos += 2;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c16);
              }
            }
            if ($s3 === $this->peg_FAILED) {
              $s3 = null;
            }
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f13($s1);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseFunctionName() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      if (peg_regex_test($this->peg_c17, $this->input_lmb_substr($this->peg_currPos, 1))) {
        $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c18);
        }
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          if (peg_regex_test($this->peg_c17, $this->input_lmb_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c18);
            }
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f3();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseParam() {

      $s0 = $this->peg_parseFunction();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseDataPlaceholder();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseStringParam();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseNumberParam();
          }
        }
      }

      return $s0;
    }

    private function peg_parseStringParam() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseSTRDELIMITER();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseQuotedStringCharacter();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseQuotedStringCharacter();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseSTRDELIMITER();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f14($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseQuotedStringCharacter() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c19) {
        $s0 = $this->peg_c19;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c20);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s2 = $this->peg_parseSTRDELIMITER();
        $this->peg_silentFails--;
        if ($s2 === $this->peg_FAILED) {
          $s1 = null;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
          if ($this->input_length > $this->peg_currPos) {
            $s2 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c4);
            }
          }
          if ($s2 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f3();
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseNumberParam() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMINUS();
      if ($s1 === $this->peg_FAILED) {
        $s1 = null;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        if (peg_regex_test($this->peg_c21, $this->input_lmb_substr($this->peg_currPos, 1))) {
          $s3 = $this->input_lmb_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c22);
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            if (peg_regex_test($this->peg_c21, $this->input_lmb_substr($this->peg_currPos, 1))) {
              $s3 = $this->input_lmb_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c22);
              }
            }
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parseDECIMALPOINT();
          if ($s4 !== $this->peg_FAILED) {
            $s5 = array();
            if (peg_regex_test($this->peg_c21, $this->input_lmb_substr($this->peg_currPos, 1))) {
              $s6 = $this->input_lmb_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s6 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c22);
              }
            }
            if ($s6 !== $this->peg_FAILED) {
              while ($s6 !== $this->peg_FAILED) {
                $s5[] = $s6;
                if (peg_regex_test($this->peg_c21, $this->input_lmb_substr($this->peg_currPos, 1))) {
                  $s6 = $this->input_lmb_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s6 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c22);
                  }
                }
              }
            } else {
              $s5 = $this->peg_FAILED;
            }
            if ($s5 !== $this->peg_FAILED) {
              $s4 = array($s4, $s5);
              $s3 = $s4;
            } else {
              $this->peg_currPos = $s3;
              $s3 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f15($s3);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseSubtemplate() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s4 = $this->peg_parseFUNCTIONSTART();
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseDATASTART();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s6 = $this->peg_parseTAGEND();
          $this->peg_silentFails--;
          if ($s6 === $this->peg_FAILED) {
            $s5 = null;
          } else {
            $this->peg_currPos = $s5;
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s6 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s7 = $this->peg_parseIF();
            $this->peg_silentFails--;
            if ($s7 === $this->peg_FAILED) {
              $s6 = null;
            } else {
              $this->peg_currPos = $s6;
              $s6 = $this->peg_FAILED;
            }
            if ($s6 !== $this->peg_FAILED) {
              $s7 = $this->peg_currPos;
              $this->peg_silentFails++;
              $s8 = $this->peg_parseELSE();
              $this->peg_silentFails--;
              if ($s8 === $this->peg_FAILED) {
                $s7 = null;
              } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s9 = $this->peg_parseENDIF();
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                  $s8 = null;
                } else {
                  $this->peg_currPos = $s8;
                  $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                  if ($this->input_length > $this->peg_currPos) {
                    $s9 = $this->input_lmb_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                  } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c4);
                    }
                  }
                  if ($s9 !== $this->peg_FAILED) {
                    $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9);
                    $s2 = $s3;
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s4 = $this->peg_parseFUNCTIONSTART();
          $this->peg_silentFails--;
          if ($s4 === $this->peg_FAILED) {
            $s3 = null;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parseDATASTART();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
              $s4 = null;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_currPos;
              $this->peg_silentFails++;
              $s6 = $this->peg_parseTAGEND();
              $this->peg_silentFails--;
              if ($s6 === $this->peg_FAILED) {
                $s5 = null;
              } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s7 = $this->peg_parseIF();
                $this->peg_silentFails--;
                if ($s7 === $this->peg_FAILED) {
                  $s6 = null;
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = $this->peg_currPos;
                  $this->peg_silentFails++;
                  $s8 = $this->peg_parseELSE();
                  $this->peg_silentFails--;
                  if ($s8 === $this->peg_FAILED) {
                    $s7 = null;
                  } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $s8 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s9 = $this->peg_parseENDIF();
                    $this->peg_silentFails--;
                    if ($s9 === $this->peg_FAILED) {
                      $s8 = null;
                    } else {
                      $this->peg_currPos = $s8;
                      $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                      if ($this->input_length > $this->peg_currPos) {
                        $s9 = $this->input_lmb_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                      } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c4);
                        }
                      }
                      if ($s9 !== $this->peg_FAILED) {
                        $s3 = array($s3, $s4, $s5, $s6, $s7, $s8, $s9);
                        $s2 = $s3;
                      } else {
                        $this->peg_currPos = $s2;
                        $s2 = $this->peg_FAILED;
                      }
                    } else {
                      $this->peg_currPos = $s2;
                      $s2 = $this->peg_FAILED;
                    }
                  } else {
                    $this->peg_currPos = $s2;
                    $s2 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s2;
                  $s2 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f16();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseHtml() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_currPos;
      $s3 = $this->peg_currPos;
      $this->peg_silentFails++;
      $s4 = $this->peg_parseTAGSTART();
      $this->peg_silentFails--;
      if ($s4 === $this->peg_FAILED) {
        $s3 = null;
      } else {
        $this->peg_currPos = $s3;
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseESCAPEDTAGSTART();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          if ($this->input_length > $this->peg_currPos) {
            $s5 = $this->input_lmb_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c4);
            }
          }
          if ($s5 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4, $s5);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        while ($s2 !== $this->peg_FAILED) {
          $s1[] = $s2;
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $this->peg_silentFails++;
          $s4 = $this->peg_parseTAGSTART();
          $this->peg_silentFails--;
          if ($s4 === $this->peg_FAILED) {
            $s3 = null;
          } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parseESCAPEDTAGSTART();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
              $s4 = null;
            } else {
              $this->peg_currPos = $s4;
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_length > $this->peg_currPos) {
                $s5 = $this->input_lmb_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c4);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s3 = array($s3, $s4, $s5);
                $s2 = $s3;
              } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s2;
              $s2 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        }
      } else {
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f17();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = array();
      if (peg_regex_test($this->peg_c24, $this->input_lmb_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_lmb_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c25);
        }
      }
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        if (peg_regex_test($this->peg_c24, $this->input_lmb_substr($this->peg_currPos, 1))) {
          $s1 = $this->input_lmb_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c25);
          }
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c23);
        }
      }

      return $s0;
    }

    private function peg_parseTAGSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c26) {
        $s0 = $this->peg_c26;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c27);
        }
      }

      return $s0;
    }

    private function peg_parseESCAPEDTAGSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 3) === $this->peg_c28) {
        $s0 = $this->peg_c28;
        $this->peg_currPos += 3;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c29);
        }
      }

      return $s0;
    }

    private function peg_parseTAGEND() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c30) {
        $s0 = $this->peg_c30;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c31);
        }
      }

      return $s0;
    }

    private function peg_parseFUNCTIONSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c32) {
        $s0 = $this->peg_c32;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c33);
        }
      }

      return $s0;
    }

    private function peg_parseSTRDELIMITER() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c34) {
        $s0 = $this->peg_c34;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c35);
        }
      }

      return $s0;
    }

    private function peg_parseDATASTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c36) {
        $s0 = $this->peg_c36;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c37);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c38) {
          $s0 = $this->peg_c38;
          $this->peg_currPos += 5;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c39);
          }
        }
      }

      return $s0;
    }

    private function peg_parseTABLEDATASTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 2) === $this->peg_c40) {
        $s0 = $this->peg_c40;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c41);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c42) {
          $s0 = $this->peg_c42;
          $this->peg_currPos += 5;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c43);
          }
        }
      }

      return $s0;
    }

    private function peg_parseIF() {

      if ($this->input_lmb_substr($this->peg_currPos, 3) === $this->peg_c44) {
        $s0 = $this->peg_c44;
        $this->peg_currPos += 3;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c45);
        }
      }

      return $s0;
    }

    private function peg_parseELSE() {

      if ($this->input_lmb_substr($this->peg_currPos, 4) === $this->peg_c46) {
        $s0 = $this->peg_c46;
        $this->peg_currPos += 4;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c47);
        }
      }

      return $s0;
    }

    private function peg_parseENDIF() {

      if ($this->input_lmb_substr($this->peg_currPos, 5) === $this->peg_c48) {
        $s0 = $this->peg_c48;
        $this->peg_currPos += 5;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c49);
        }
      }

      return $s0;
    }

    private function peg_parseMINUS() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c50) {
        $s0 = $this->peg_c50;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c51);
        }
      }

      return $s0;
    }

    private function peg_parseDECIMALPOINT() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c52) {
        $s0 = $this->peg_c52;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c53);
        }
      }

      return $s0;
    }

    private function peg_parseOPTIONSTART() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c54) {
        $s0 = $this->peg_c54;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c55);
        }
      }

      return $s0;
    }

    private function peg_parseOPTIONKEYVALSEP() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c32) {
        $s0 = $this->peg_c32;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c33);
        }
      }

      return $s0;
    }

    private function peg_parseOPTIONEND() {

      if ($this->input_lmb_substr($this->peg_currPos, 1) === $this->peg_c56) {
        $s0 = $this->peg_c56;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c57);
        }
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new stdClass;
    $this->peg_c0 = ":";
    $this->peg_c1 = array( "type" => "literal", "value" => ":", "description" => "\":\"" );
    $this->peg_c2 = "\\";
    $this->peg_c3 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c4 = array("type" => "any", "description" => "any character" );
    $this->peg_c5 = "|";
    $this->peg_c6 = array( "type" => "literal", "value" => "|", "description" => "\"|\"" );
    $this->peg_c7 = "/^[A-Za-z0-9_]/";
    $this->peg_c8 = array( "type" => "class", "value" => "[A-Za-z0-9_]", "description" => "[A-Za-z0-9_]" );
    $this->peg_c9 = "(";
    $this->peg_c10 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c11 = ",";
    $this->peg_c12 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c13 = ")";
    $this->peg_c14 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c15 = "()";
    $this->peg_c16 = array( "type" => "literal", "value" => "()", "description" => "\"()\"" );
    $this->peg_c17 = "/^[A-Za-z0-9]/";
    $this->peg_c18 = array( "type" => "class", "value" => "[A-Za-z0-9]", "description" => "[A-Za-z0-9]" );
    $this->peg_c19 = "\\\"";
    $this->peg_c20 = array( "type" => "literal", "value" => "\\\"", "description" => "\"\\\\\\\"\"" );
    $this->peg_c21 = "/^[0-9]/";
    $this->peg_c22 = array( "type" => "class", "value" => "[0-9]", "description" => "[0-9]" );
    $this->peg_c23 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c24 = "/^[ \\t\\n\\r]/";
    $this->peg_c25 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );
    $this->peg_c26 = '${';
    $this->peg_c27 = array( "type" => "literal", "value" => '${', "description" => '\'${\'' );
    $this->peg_c28 = '$${';
    $this->peg_c29 = array( "type" => "literal", "value" => '$${', "description" => '\'$${\'' );
    $this->peg_c30 = "}";
    $this->peg_c31 = array( "type" => "literal", "value" => "}", "description" => "\"}\"" );
    $this->peg_c32 = "=";
    $this->peg_c33 = array( "type" => "literal", "value" => "=", "description" => "\"=\"" );
    $this->peg_c34 = "\"";
    $this->peg_c35 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c36 = "->";
    $this->peg_c37 = array( "type" => "literal", "value" => "->", "description" => "\"->\"" );
    $this->peg_c38 = "-&gt;";
    $this->peg_c39 = array( "type" => "literal", "value" => "-&gt;", "description" => "\"-&gt;\"" );
    $this->peg_c40 = "=>";
    $this->peg_c41 = array( "type" => "literal", "value" => "=>", "description" => "\"=>\"" );
    $this->peg_c42 = "=&gt;";
    $this->peg_c43 = array( "type" => "literal", "value" => "=&gt;", "description" => "\"=&gt;\"" );
    $this->peg_c44 = "if ";
    $this->peg_c45 = array( "type" => "literal", "value" => "if ", "description" => "\"if \"" );
    $this->peg_c46 = "else";
    $this->peg_c47 = array( "type" => "literal", "value" => "else", "description" => "\"else\"" );
    $this->peg_c48 = "endif";
    $this->peg_c49 = array( "type" => "literal", "value" => "endif", "description" => "\"endif\"" );
    $this->peg_c50 = "-";
    $this->peg_c51 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c52 = ".";
    $this->peg_c53 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c54 = "[";
    $this->peg_c55 = array( "type" => "literal", "value" => "[", "description" => "\"[\"" );
    $this->peg_c56 = "]";
    $this->peg_c57 = array( "type" => "literal", "value" => "]", "description" => "\"]\"" );

    $peg_startRuleFunctions = array( 'Start' => array($this, "peg_parseStart") );
    $peg_startRuleFunction  = array($this, "peg_parseStart");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};