<?php
/*
 * Copyright notice
 * (c) 1998-2018 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 3.5
 */

/*
 * ID:
 */

#$weekday = array("$lang[873]","$lang[874]","$lang[875]","$lang[876]","$lang[877]","$lang[878]","$lang[879]");



/**
 * convert stamp to date
 *
 * @param number $stamp
 * @param number $format (0,1,2,3,string)
 * @return datetime string
 */
function stampToDate($stamp,$format=0){
	
	# workaround for import
	if(is_numeric($stamp)){
		# >= php 5.3
		#$pv = explode('.',phpversion());
		#if($pv[0] >= 5 && $pv[1] >= 3){
			$pdt = new DateTime();
			$pdt->setTimestamp($stamp);
		#}else{
			#$f = setDateFormat(null,1);
			#$time = date($f,$stamp);
			#$pdt = new DateTime($time);
		#}
	}else{
		$pdt = $stamp;
	}
	
	if(!$pdt){return false;}
	
	#if(lmb_strlen($format) > 3){
	#	return $format;
	#}else{
	#	$format = setDateFormat($format,1);
	#}
	
	if(is_numeric($format)){
		$format = setDateFormat($format,1);
	}
	
	return $pdt->format($format);
}


/**
 * convert date to stamp
 *
 * @param string $date
 * @return number
 */
function dateToStamp($date_string,$getobj=0){
	$months = array();
	$months['jan'] = array('januar,january,jan');
	$months['feb'] = array('februar,february,feb');
	$months['mar'] = array('märz','mär','mar','march');
	$months['apr'] = array('april','apr');
	$months['mai'] = array('mai');
	$months['jun'] = array('juni','june','jun');
	$months['jul'] = array('juli','july','jul');
	$months['aug'] = array('august','aug');
	$months['oct'] = array('oktober','okt','october','oct');
	$months['nov'] = array('november','nov');
	$months['dec'] = array('dezember','dez','dec','december');
	if(!$date_string){return false;}
	# only year
	if(is_numeric($date_string)){$date_string = "01-01-".$date_string;}

	# translate month
	foreach($months as $key => $value){
		foreach ($value as $key2 => $value2){
			if (lmb_stripos(lmb_strtolower($date_string),$value2) !== false) {
				$date_string = str_replace($value2,$key,$date_string);
				break;
			}
		}
	}

	try {
		$pdt = new DateTime($date_string);
		if($getobj){
			return $pdt;
		}else{
			return $pdt->format("U");
		}
	}catch (Exception $e) {
		try {
			$pdt = DateTime::createFromFormat('Y-m-d H:i:s+', $date_string);
			if($getobj) {
				return $pdt;
			}else{
				return $pdt->format("U");
			}
		}catch (Exception $e) {
			return false;
		}
	}
}


/**
 * current date
 *
 * @param number $typ (0=date, 1=datetime)
 * @return date string
 */
function local_date($typ=1){
	return stampToDate(time(),$typ);
}

/**
 * current timestamp
 *
 * @param number $typ (1=datetime, 2=date)
 * @return timestamp
 */
function local_stamp($typ=null){
	if($typ == 2){
		return time();
	}else{
		return mktime(0,0,0,date("m"),date("d"),date("Y"));
	}
}

/**
 * convert Date from given format
 *
 * @param string $db_date
 * @param string $format ('%A - %B %e %Y')
 * @return date string
 */
function get_format_date($db_date,$format){
	if(!$db_date){return false;}
	
	$pdt = new DateTime($db_date);
	return $pdt->format($format);
}

/**
 * convert time for database
 *
 * @param string $db_time
 * @return date string
 */
function convert_time($db_time){
	if($db_time){
		$db_time = lmb_substr($db_time,0,19);
		$db_time = preg_replace("/[^0-9]/",";",$db_time);
		$db_time = explode(";",$db_time);

		if(!$db_time[0] = sprintf("%02d", $db_time[0]) OR $db_time[0] > 23){$db_time[0] = "00";}
		if(!$db_time[1] = sprintf("%02d", $db_time[1]) OR $db_time[0] > 59){$db_time[1] = "00";}
		if(!$db_time[2] = sprintf("%02d", $db_time[2]) OR $db_time[0] > 59){$db_time[2] = "00";}

		$result_time = $db_time[0].":".$db_time[1].":".$db_time[2];
	}
	
	if(!preg_match("/^[0-9]{2}:[0-9]{2}:[0-9]{2}$/",$result_time)){return false;}
	
	return $result_time;
}

/**
 * convert date for database
 * 
 * @param string $date_string
 * @return date string
 */
function convert_date($date_string,$t=0){
	if(!$date_string){return "";}
	$pdt = dateToStamp($date_string,1);
	if($pdt === false){return "";}
	return dbf_1($pdt,$t);
}


/**
 * convert stamp for database
 *
 * @param number $stamp
 * @return date string
 */
function convert_stamp($stamp,$t=0){
	# >= php 5.3
	#$pdt = new DateTime();
	#$pdt->setTimestamp($pdt);
	$time = date("d-m-Y H:i:s",$stamp);
	$pdt = new DateTime($time);
	return dbf_1($pdt,$t);
}



# ------ convert Date from Database --------
/**
 * convert date from database
 *
 * @param string $db_date
 * @param number $typ (1=date, 2=datetime, strftime format))
 * @return date string
 */
function get_date($db_date,$typ=0){
	if($typ == 2){$typ = 0;}
	if(!$db_date OR $db_date == '0000-00-00 00:00:00'){return false;}
	#$pdt = new DateTime($db_date);
	$pdt = new DateTime(lmb_substr($db_date,0,26));
	return stampToDate($pdt,$typ);
}


/**
 * convert stamp from database
 *
 * @param string $db_date
 * @return date string
 */
function get_stamp($db_date){
	if(!$db_date){return false;}
	#$pdt = new DateTime($db_date);
	$pdt = new DateTime(lmb_substr($db_date,0,26));
	$stamp = $pdt->format("U");
	if(is_numeric($stamp)){
		return $stamp;
	}
}



/**
 * Enter description here...
 *
 * @param unknown_type $filter  ex: #-1DAY#   or #123MONTH# or #-10YEAR#
 * @return date in format
 */
function dateDeltaToday($filter){
	$today = getdate();

	if($filter[0]=="<" || $filter[0]==">")
	{
		$filter = lmb_substr($filter,1);
	}

	if($filter[0]=="=")
	{
		$filter = lmb_substr($filter,1);
	}

	if(lmb_strpos($filter,"DAY#")>0){
		return date(mktime($today["hours"],$today["minutes"],1,$today["mon"],$today["mday"] + lmb_substr($filter,1,lmb_strpos($filter,"DAY#")),$today["year"]));
	}elseif(lmb_strpos($filter,"MONTH#")>0){
		return date(mktime($today["hours"],$today["minutes"],1,$today["mon"] + lmb_substr($filter,1,lmb_strpos($filter,"MONTH#")),$today["mday"],$today["year"]));
	}elseif(lmb_strpos($filter,"YEAR#")>0){
		return date(mktime($today["hours"],$today["minutes"],1,$today["mon"],$today["mday"],$today["year"] + lmb_substr($filter,1,lmb_strpos($filter,"YEAR#"))));
	}
}

/**
 * get first monday from week of year
 *
 * @param unknown_type $kw
 * @param unknown_type $year
 * @return unknown
 */
function get_mondaykw($kw,$year) {
	$wday = date('w',mktime(0,0,0,1,1,$year));

	if ($wday <= 4) {
		$firstmonday = mktime(0,0,0,1,1-($wday-1),$year);
	}else if($wday!=1) {
		$firstmonday = mktime(0,0,0,1,1+(7-$wday+1),$year);
	}else {
		$firstmonday = $wday;
	}

	$mon_month = date('m',$firstmonday);
	$mon_year = date('Y',$firstmonday);
	$mon_days = date('d',$firstmonday);

	$days =($kw-1)*7;

	$mondaykw = mktime(0,0,0,$mon_month,$mon_days+$days,$mon_year);
	return $mondaykw;
}
?>
