<?php
/*
 * Copyright notice
 * (c) 1998-2021 Limbas GmbH(support@limbas.org)
 * All rights reserved
 * This script is part of the LIMBAS project. The LIMBAS project is free software; you can redistribute it and/or modify it on 2 Ways:
 * Under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * Or
 * In a Propritary Software Licence http://limbas.org
 * The GNU General Public License can be found at http://www.gnu.org/copyleft/gpl.html.
 * A copy is found in the textfile GPL.txt and important notices to the license from the author is found in LICENSE.txt distributed with these scripts.
 * This script is distributed WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 * Version 4.3.36.1319
 */

/*
 * ID: 184
 */

function lmb_authLDAP($auth_user,$auth_pass){
	global $db;
	global $umgvar;
	global $lang;
	
	# EXTENSIONS
	if(file_exists($umgvar['path'].'EXTENSIONS/ldap/ext_ldap.inc')){
        require_once($umgvar['path'].'EXTENSIONS/ldap/ext_ldap.inc');
	}
	
	require_once('extern/adLDAP/src/adLDAP.php');
	
	$params['domain_controllers'] = array($umgvar['LDAP_domain']);
	$params['base_dn'] = $umgvar['LDAP_baseDn'];
	$params['useSSL'] = $umgvar['LDAP_useSSL'];
	#$params['realPrimaryGroup'] = true;
	$adldap = new adLDAP($params);
	$adldap->setAccountSuffix($umgvar['LDAP_accountSuffix']);
	#$adldap->setRealPrimaryGroup(true);

	# user authentication
	if($authUser = $adldap->user()->authenticate($auth_user, $auth_pass)){
		
		# get user information from LDAP
		$params = array('givenname','sn','description','mail','memberof','objectsid','primarygroupid','distinguishedname');
		$userinfo = $adldap->user()->info($auth_user,$params);

		# check if user exists & add user to limbas
		$sqlquery2 = "SELECT ID,USERNAME,SUB_GROUP,GROUP_ID FROM LMB_USERDB WHERE USERNAME = '".parse_db_string($auth_user,30)."'";
		$rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$action,__FILE__,__LINE__);
		if(!$rs2) {return false;}
		$LUID = lmbdb_result($rs2,"ID");
		$LUGROUP = lmbdb_result($rs2,"GROUP_ID");
		$LUSGROUP = lmbdb_result($rs2,"SUB_GROUP");

		# get all subgroups from user
		if($memberof = $adldap->user()->groups($auth_user,true)){
			
			# get group_id as string from LDAP member list
			$memberof_str = implode("','",$memberof);
			if(!$memberof_str){return false;}

			# get group_id as string from existing limbas groups
			$sqlquery2 = "SELECT GROUP_ID,NAME FROM LMB_GROUPS WHERE NAME IN ('".$memberof_str."') ORDER BY GROUP_ID";
			$rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$action,__FILE__,__LINE__);
			if(!$rs2) {return false;}

			while(lmbdb_fetch_row($rs2)) {
				$existinggroup[lmbdb_result($rs2,"NAME")] = lmbdb_result($rs2,"GROUP_ID");
				if(lmbdb_result($rs2,"NAME") != $userinfo[0]['distinguishedname'][0]){$existinggroupnomain[lmbdb_result($rs2,"NAME")] = lmbdb_result($rs2,"GROUP_ID");}
			}
			$existinggroup_list = implode(',',$existinggroup);
			$existinggroupnomain_list = implode(';',$existinggroupnomain);
			
			# override maingroup
			if($umgvar['LDAP_defaultGroup']){
				$existinggroup[$userinfo[0]['distinguishedname'][0]] = $existinggroup[$umgvar['LDAP_defaultGroup']];
			}

			if(!$existinggroup[$userinfo[0]['distinguishedname'][0]]){error_log("LDAP AUTHENTICATION - maingroup '".$userinfo[0]['distinguishedname'][0]."' does not exist!");return false;}
		}
		
		$adldap->close();

		# user exist
		if($LUID){
			
			# get subgroup-id string from limbas
			$lusgroup = explode(';',$LUSGROUP);
			$lusgroup[] = $LUGROUP;
			sort($lusgroup,SORT_NUMERIC);
			$lusgroup_str = implode(',',$lusgroup);

			# update subgroup list
			if($existinggroup_list != $lusgroup_str OR $LUGROUP != $existinggroup[$userinfo[0]['distinguishedname'][0]]){
				$sqlquery3 = "UPDATE LMB_USERDB SET GROUP_ID = ".$existinggroup[$userinfo[0]['distinguishedname'][0]]." , SUB_GROUP = '$existinggroupnomain_list' WHERE USER_ID = $LUID";
				$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
				if(!$rs3) {return false;}
			}
			return true;

		# user not exist
		}else{
			require_once('lib/include_admin.lib');
			require_once('admin/user/user_change_admin.lib');
			
			/* --- Sprachtabelle system für DMS Ordner auslesen ------------------- */
			$sqlquery3 = "SELECT ELEMENT_ID,WERT,JS FROM LMB_LANG WHERE LANGUAGE_ID = ".parse_db_int($umgvar["default_language"])." AND TYP = 1";
			$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
			if(!$rs3) {$commit = 1;}
			while(lmbdb_fetch_row($rs3)) {
				$lang[lmbdb_result($rs3,"ELEMENT_ID")] = $debug_lang.$lvalue;
			}

			# add limbas user
			$userdata = array('username'=>$auth_user,'passwort'=>$auth_pass,'vorname'=>$userinfo[0]['givenname'][0],'name'=>$userinfo[0]['sn'][0],'beschreibung'=>$userinfo[0]['description'][0],'email'=>$userinfo[0]['mail'][0],'group_id'=>$existinggroup[$userinfo[0]['distinguishedname'][0]],'subgroup'=>$existinggroupnomain_list);
			if(create_user($userdata)){
				error_log("LDAP AUTHENTICATION - limbas user $authUser successfully created");
                #lmb_log::error('LDAP AUTHENTICATION - limbas user $authUser successfully created');
				return true;
			}else{
				error_log("LDAP AUTHENTICATION - adding limbas user $authUser failed");
                #lmb_log::error("LDAP AUTHENTICATION - adding limbas user $authUser failed");
				return false;
			}
		}
	
	}
	
	return false;
	
}

if(session_id()){
	/* --- delete session --------------------------------- */
	$sqlquery2 = "DELETE FROM LMB_SESSION WHERE ID = '".session_id()."'";
	$rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$action,__FILE__,__LINE__);
	if(!$rs2) {$commit = 1;}
}

# check for authentication method / charset
$sqlquery2 = "SELECT ID,FORM_NAME,NORM FROM LMB_UMGVAR WHERE FORM_NAME LIKE '%_auth' OR FORM_NAME = 'charset' OR FORM_NAME = 'password_hash'";   #CATEGORY = 6 OR CATEGORY = 0
$rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$action,__FILE__,__LINE__);
$umgvar = array();
while(lmbdb_fetch_row($rs2)){
	$umgvar[lmbdb_result($rs2,"FORM_NAME")] = lmbdb_result($rs2,"NORM");
}

# --- mbstring include -------------------------------------------
if(strtoupper($umgvar["charset"]) == "UTF-8"){
	require_once("lib/include_mbstring.lib");
	ini_set('default_charset', 'utf-8');
}else{
    require_once("lib/include_string.lib");
    ini_set('default_charset', lmb_strtoupper($umgvar["charset"]));
}

$passwordChecked = false;

/* ----------------- auth from LDAP ------------------------ */
if ($umgvar['server_auth'] === 'LDAP' AND $auth_user AND $auth_pass AND $auth_user !== 'admin') {
	if (!lmb_authLDAP($auth_user,$auth_pass)) {
		$_REQUEST['rslogout'] = 1;
	} else {
	    $passwordChecked = true;
    }
	
/* ----------------- auth from extern (only SOAP) ------------------------ */
} elseif (defined('IS_SOAP') AND $umgvar['server_auth'] === 'extern' AND file_exists('EXTENSIONS/ext_auth.inc')) {
	# EXTENSIONS
	require_once('EXTENSIONS/ext_auth.inc');
	if (function_exists('lmb_authEXT') AND lmb_authEXT($auth_user,$auth_pass,$auth_group)) {
	    if (!$auth_pass) {
            $passwordChecked = true;
	    }
	} else {
	    $_REQUEST['rslogout'] = 1;
	}
}

/* ----------------- auth from intern ------------------------ */
# user authentication
$sqlquery2 = "SELECT * FROM LMB_USERDB WHERE USERNAME = '" . parse_db_string($auth_user, 30) . "'";
if ($auth_user !== 'admin') {
    $sqlquery2 .= ' AND (VALIDDATE >= ' . LMB_DBDEF_TIMESTAMP . ' OR VALID = ' . LMB_DBDEF_FALSE . ') AND DEL = ' . LMB_DBDEF_FALSE;
}
$rs2 = lmbdb_exec($db,$sqlquery2) or errorhandle(lmbdb_errormsg($db),$sqlquery2,$action,__FILE__,__LINE__);
if (!$rs2) { $commit = 1; }

/* --- Prüfung nach Passwort & IP --------------------------------- */
$ipok = 0;
if(lmbdb_fetch_row($rs2)) {
    # check password if not already done by extension/ldap
    if (!$passwordChecked) {
        if (!lmbPasswordVerify($auth_user, $auth_pass, lmbdb_result($rs2, 'PASSWORT'))) {
            $_REQUEST['rslogout'] = 1;
        }
    }

	if($auth_digest){
		// generate the valid response
		$A1 = md5($auth_digest['username'] . ':' . $auth_realm . ':' . 'limbas');
		$A2 = md5($_SERVER['REQUEST_METHOD'].':'.$auth_digest['uri']);
		$valid_response = md5($A1.':'.$auth_digest['nonce'].':'.$auth_digest['nc'].':'.$auth_digest['cnonce'].':'.$auth_digest['qop'].':'.$A2);
		if ($auth_digest['response'] != $valid_response) {$_REQUEST["rslogout"] = 1;};
	}
	$ipok = 1;
	if(lmbdb_result($rs2,"IPRANGE") AND lmbdb_result($rs2,"IPRANGE") != '*.*.*.*'){
		$rma = explode(".",lmb_getIpAddr());
		$rmar = explode("\n",lmbdb_result($rs2,"IPRANGE"));
		$bzm = 0;
		while($rmar[$bzm]){
			unset($ipcheck);
			$rmau = explode(".",trim($rmar[$bzm]));
			$i = 0;
			foreach($rmau as $key => $value){
				if($value == $rma[$i] OR $value == "*"){$ipcheck[] = 1;}else{$ipcheck[] = 0;}
				$i++;
			}
			if(!in_array(0,$ipcheck)){$ipok_[] = 1;}else{$ipok_[] = 0;}
			$bzm++;
		}
		if(in_array(1,$ipok_)){$ipok = 1;}else{$ipok = 0;}
	}
}

#---- prüfen auf Authentifizierung/IP-Range/logut -------
if($ipok AND !$_REQUEST["rslogout"] AND session_id()) {

	init_sessionvars($globvars);
	
	/* --- umgvar defaults ------------------- */
	$sqlquery3 = "SELECT FORM_NAME,NORM FROM LMB_UMGVAR";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$umgvar[lmbdb_result($rs3,"FORM_NAME")] = lmbdb_result($rs3,"NORM");
	}
	$umgvar["charset"] = lmb_strtoupper($umgvar["charset"]);
	if($umgvar["update_metadata"]){$umgvar["update_metadata"] = explode(',',$umgvar["update_metadata"]);}
	if($umgvar["read_metadata"]){$umgvar["read_metadata"] = explode(',',$umgvar["read_metadata"]);}
	if($umgvar["indize_filetype"]){$umgvar["indize_filetype"] = explode(',',$umgvar["indize_filetype"]);}
    if($umgvar["multi_language"]){$umgvar["multi_language"] = explode(',',$umgvar["multi_language"]);}
    if($umgvar['postgres_use_fulltextsearch'] and $DBA['DB'] !== 'postgres'){$umgvar['postgres_use_fulltextsearch'] = false;}

    /* --- Pfade ------------------- */
	$umgvar["path"] = rtrim($DBA["LMPATH"],"/");
	$umgvar["pfad"] = rtrim($DBA["LMPATH"],"/");
	$umgvar["temp"] = $umgvar["pfad"]."/TEMP";
	$umgvar["uploadpfad"] = $umgvar["pfad"]."/UPLOAD/";
	$umgvar["pdfpfad"] = $umgvar["pfad"]."/inc/fonts/";
	
	/* --- URL ------------------- */
	if(!$umgvar["url"]){
        $url = explode("/",$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI']);

        if ($_SERVER['SERVER_PORT'] != 80 && $_SERVER['SERVER_PORT'] != 443) {
            $url = explode("/",$_SERVER['SERVER_NAME'].':'.$_SERVER['SERVER_PORT'].$_SERVER['REQUEST_URI']);
        }
		$last = count($url)-1;

		if(lmb_strpos($_SERVER['REQUEST_URI'],".php")){
		    while($url[$last]){
		        if(lmb_strpos($url[$last],".php") === false){
		            unset($url[$last]);
                }else{
		            unset($url[$last]);
		            break;
                }

		        $last--;
            }
		}

		$url = implode("/",$url);
		
		if($_SERVER['HTTPS']){
			$umgvar["url"] = "https://".$url;
		}else{
			$umgvar["url"] = "http://".$url;
		}
	}
	
	/* --- using datetime class ------------------- */
	if($umgvar["use_datetimeclass"]){
		require_once("lib/include_DateTime.lib");
	}else{
		require_once("lib/include_datetime.lib");
	}
	
	# first setting of time-zone
	date_default_timezone_set("Europe/Berlin");
	
	/* --- session ------------------- */
	#@session_unset();
	#@session_destroy();
	$session["s_id"] = session_id();
	$session["s_name"] = session_name();
	$session["group_id"] = lmbdb_result($rs2,"GROUP_ID");
	$session["user_id"] = lmbdb_result($rs2,"USER_ID");
	$session["username"] = lmbdb_result($rs2,"USERNAME");
	$session["vorname"] = lmbdb_result($rs2,"VORNAME");
	$session["name"] = lmbdb_result($rs2,"NAME");
	$session["email"] = lmbdb_result($rs2,"EMAIL");
	$session["usercolor"] = lmbdb_result($rs2,"USERCOLOR");
	$session["maxresult"] = lmbdb_result($rs2,"MAXRESULT");
	$session["farbschema"] = lmbdb_result($rs2,"FARBSCHEMA");
	$session["data_hide"] = lmbdb_result($rs2,"DATA_HIDE");
	$session["data_display"] = lmbdb_result($rs2,"DATA_DISPLAY");
	$session["data_color"] = lmbdb_result($rs2,"DATA_COLOR");
	$session["language"] = lmbdb_result($rs2,"LANGUAGE");
	$session["dlanguage"] = lmbdb_result($rs2,"DLANGUAGE");
	$session["layout"] = lmbdb_result($rs2,"LAYOUT");
	$session["uploadsize"] = lmbdb_result($rs2,"UPLOADSIZE");
	$session["debug"] = lmbdb_result($rs2,"DEBUG");
	$session["logging"] = lmbdb_result($rs2,"LOGGING");
	$session["login_date"] = date("U");
	$session["change_pass"] = lmbdb_result($rs2,"CHANGE_PASS");
	$session["symbolbar"] = lmbdb_result($rs2,"SYMBOLBAR");
	$session["lockbackend"] = lmbdb_result($rs2,"LOCKBACKEND");
	$session["superadmin"] =  lmbdb_result($rs2,"SUPERADMIN");
	$session["gc_maxlifetime"] = lmbdb_result($rs2,"GC_MAXLIFETIME");
	$session["multiframe"] = $umgvar["multiframe"];
	if($multitenant_ = lmbdb_result($rs2,"MULTITENANT")){
	    $multitenant_ = explode(',',$multitenant_);
	    $session["multitenant"] = explode(';',$multitenant_[0]);
	    $session["mid"] = $multitenant_[1];
	    if(!$session["mid"]){$session["mid"] = $session["multitenant"][0];}
	}
	if(!lmbdb_result($rs2,"DATEFORMAT")){$session["dateformat"] = 1;}else{$session["dateformat"] = lmbdb_result($rs2,"DATEFORMAT");} #1=de, 2=usa, 3=fr}
	if(!lmbdb_result($rs2,"SETLOCAL")){$session["setlocale"] = "de_DE";}else{$session["setlocale"] = lmbdb_result($rs2,"SETLOCAL");}
	if(!lmbdb_result($rs2,"TIME_ZONE")){$session["timezone"] = "Europe/Berlin";}else{$session["timezone"] = lmbdb_result($rs2,"TIME_ZONE");}
	if($session["superadmin"]){$session["debug"] = 1;}
	
	# use system language
	if($session["language"] == -1){
		if(lmb_substr($_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2) == 'de'){
			$session["language"] = 1;
		}elseif(lmb_substr($_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2) == 'fr'){
			$session["language"] = 4;
		}elseif(lmb_substr($_SERVER['HTTP_ACCEPT_LANGUAGE'],0,2) == 'es'){
			$session["language"] = 3;
		}else{
			$session["language"] = 2;
		}
	}

	// data language
	if(!$session['dlanguage']){$session['dlanguage'] = $session['language'];}
	// Multilanguage description
    if($umgvar["multi_language"]) {
        // language definition
        $sqlquery3 = "SELECT LANGUAGE_ID,LANGUAGE FROM LMB_LANG GROUP BY LANGUAGE_ID,LANGUAGE";
        $rs3 = lmbdb_exec($db, $sqlquery3) or errorhandle(lmbdb_errormsg($db), $sqlquery3, $action, __FILE__, __LINE__);
        while(lmbdb_fetch_row($rs3)){
            $umgvar['multi_language_desc'][lmbdb_result($rs3,'LANGUAGE_ID')] = lmbdb_result($rs3,'LANGUAGE');
        }
    }

	/* --- timezone setzen ------------------- */
	setlocale(LC_ALL, $session["setlocale"]);
	date_default_timezone_set($session["timezone"]);
	
	if(!lmbdb_result($rs2,"SOUNDLIST")){
		$session["soundlist"] = array('notify.wav','rinring.wav','latetermin.wav');
	}else{
		$session["soundlist"] = explode(";",lmbdb_result($rs2,"SOUNDLIST"));
	}

	if(!is_dir("layout/".$session["layout"])){
		$session["layout"] = "comet";
	}

	#----------------- subgroup -------------------
	// extern auth
	if(defined('IS_SOAP') AND is_array($auth_group)){
	    $session["subgroup"] = $auth_group;
	// intern/LDAP auth
	}elseif($sub_group = lmbdb_result($rs2,"SUB_GROUP")){
	    $session["subgroup"] = explode(";",$sub_group);
	}
	$session["subgroup"][] = lmbdb_result($rs2,"GROUP_ID");

	#----------------- multitenant -------------------
    if($session["multitenant"]){
        $mltm = implode(',',$session["multitenant"]);
        $sqlquery3 = "SELECT ID,MID,NAME,SYNCSLAVE FROM LMB_MULTITENANT WHERE ID in ($mltm)";
        $rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
        while(lmbdb_fetch_row($rs3)) {
            $mid = lmbdb_result($rs3, "ID");
            $lmmultitenants['name'][$mid] = lmbdb_result($rs3, "NAME");
            $lmmultitenants['mid'][$mid] = lmbdb_result($rs3, "MID");
            $lmmultitenants['translate'][lmbdb_result($rs3, "MID")] = $mid;
            $lmmultitenants['syncslave'][$mid] = lmbdb_result($rs3, "SYNCSLAVE");
            # $lmmultitenants['mid'][$mid] = strval(lmbdb_result($rs3, "MID")); // todo char based
        }
    }

	if($esetting = lmbdb_result($rs2,"E_SETTING")){$session["e_setting"] = unserialize($esetting);}
	if($msetting = lmbdb_result($rs2,"M_SETTING")){$session["m_setting"] = unserialize($msetting);}
	$ugtab = unserialize(lmbdb_result($rs2,"UGTAB"));
	$filter = $ugtab["filter"];
	
	#$sqlquery3 = "SELECT UGTAB FROM LMB_USERDB WHERE USER_ID = ".$session["user_id"];
	#$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	#if(!$rs3) {$commit = 1;}
	#if($ugtab = lmbdb_result($rs3,"UGTAB")){
		#$ugtab = unserialize(@gzuncompress(base64_decode($ugtab)));
		#$filter = $ugtab["filter"];
	#}
	
	#if(lmbdb_result($rs2,"T_SETTING")){$session["t_setting"] = explode(";",lmbdb_result($rs2,"T_SETTING"));}
	if(lmb_strpos($HTTP_USER_AGENT,"MSIE")){
		$session["browser"] = "ie";
		$umgvar["usetablebody"] = 0;
	}else{
		$session["browser"] = "ns";
	}

	/* --- Letzter Login ------------------- */
	$sqlquery3 = "SELECT MAX(LOGIN_DATE) AS LASTLOGIN FROM LMB_HISTORY_USER WHERE USERID = ".$session["user_id"];
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	$session["lastlogin"] = get_date(lmbdb_result($rs3, "LASTLOGIN"),2);

	/* --- Datei Standardordner --------------------------------------------- */
	$sqlquery3 = "SELECT DISTINCT ID,LEVEL FROM LDMS_STRUCTURE WHERE FIX = ".LMB_DBDEF_TRUE." AND TYP = 1 AND LEVEL = 0";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	if(lmbdb_fetch_row($rs3)) {
		$session["filestruct"]["root"] = lmbdb_result($rs3,"ID");
	}
	
	/* --- Version auslesen ------------------- */
	$sqlquery3 = "SELECT REVISION,VERSION,MAJOR FROM LMB_DBPATCH ORDER BY MAJOR DESC, VERSION DESC,REVISION DESC";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if($rs3) {
	   $umgvar["db-version"] = lmbdb_result($rs3,"MAJOR").".".lmbdb_result($rs3,"VERSION").".".lmbdb_result($rs3,"REVISION");
	}else{
	   $umgvar["db-version"] = '4.0';
	}

	/* --- Sprachtabelle system auslesen (default) ------------------- */
	if($session["language"] != $umgvar["default_language"]){
		$sqlquery3 = "SELECT ELEMENT_ID,WERT,JS FROM LMB_LANG WHERE LANGUAGE_ID = ".$umgvar["default_language"];
		$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
		if(!$rs3) {$commit = 1;}
		while(lmbdb_fetch_row($rs3)) {
			if($session["group_id"] == 1 AND $umgvar["debug_lang"]){$debug_lang = "(".lmbdb_result($rs3,"ELEMENT_ID").")";}
			$lvalue = lmbdb_result($rs3,"WERT");
			if(lmbdb_result($rs3,"JS")){
				$lvalue = str_replace("\r\n","\\n",$lvalue);
				$lvalue = str_replace("\n","\\n",$lvalue);
				$lvalue = str_replace("\t","\\t",$lvalue);
				$lvalue = str_replace("'","\\'",$lvalue);
			}else{
				$lvalue = str_replace("\n","<br>",$lvalue);
				$lvalue = str_replace("\t","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",$lvalue);
			}
			$lang[lmbdb_result($rs3,"ELEMENT_ID")] = $debug_lang.$lvalue;
		}
	}

	/* --- Sprachtabelle system auslesen ------------------- */
	$sqlquery3 = "SELECT ELEMENT_ID,WERT,JS FROM LMB_LANG WHERE LANGUAGE_ID = ".$session['language'];
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		if($session["group_id"] == 1 AND $umgvar["debug_lang"]){$debug_lang = "(".lmbdb_result($rs3,"ELEMENT_ID").")";}
		if($lvalue = lmbdb_result($rs3,"WERT")){
			if(lmbdb_result($rs3,"JS")){
				$lvalue = str_replace("\r\n","\\n",$lvalue);
				$lvalue = str_replace("\n","\\n",$lvalue);
				$lvalue = str_replace("\t","\\t",$lvalue);
				$lvalue = str_replace("'","\\'",$lvalue);
			}else{
				$lvalue = str_replace("\n","<br>",$lvalue);
				$lvalue = str_replace("\t","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",$lvalue);
			}
			$lang[lmbdb_result($rs3,"ELEMENT_ID")] = $debug_lang.$lvalue;
		}
	}

	/* --- Sprachtabelle local default language auslesen ------------------- */
	if($session["language"] != $umgvar["default_language"]){
		$sqlquery3 = "SELECT ELEMENT_ID,WERT FROM LMB_LANG_DEPEND WHERE LANGUAGE_ID = ".$umgvar["default_language"];
		$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
		if(!$rs3) {$commit = 1;}
		while(lmbdb_fetch_row($rs3)) {
			$wert = trim(lmbdb_result($rs3,"WERT"));
			if($wert){
				if($session["group_id"] == 1 AND $umgvar["debug_lang"]){$debug_lang = "(".lmbdb_result($rs3,"ELEMENT_ID").")";}
				$lang[lmbdb_result($rs3,"ELEMENT_ID")] = $debug_lang.str_replace(chr(10),"",$wert);
			}
		}
	}

	/* --- Sprachtabelle local user language auslesen ------------------- */
	$sqlquery3 = "SELECT ELEMENT_ID,WERT FROM LMB_LANG_DEPEND WHERE LANGUAGE_ID = ".$session["language"];
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$wert = trim(lmbdb_result($rs3,"WERT"));
		if($wert){
			if($session["group_id"] == 1 AND $umgvar["debug_lang"]){$debug_lang = "(".lmbdb_result($rs3,"ELEMENT_ID").")";}
			$lang[lmbdb_result($rs3,"ELEMENT_ID")] = $debug_lang.str_replace(chr(10),"",$wert);
		}
	}

	/* --- Prüfung ob gesperrt --------------------------------- */
	if(($umgvar["lock"] OR lmbdb_result($rs2,"LMLOCK")) AND !$session["superadmin"]){
		require_once("extra/lock.php");
		session_destroy();
		die();
	}
	
	/* --- revision check --------------------------------- */
	if(file_exists("lib/version.inf")){
		$vers = file("lib/version.inf");
		$umgvar["version"] = trim($vers[0]);
		$revision = lmb_substr($umgvar["version"],0,lmb_strrpos($umgvar["version"],"."));
	}
	# check for updates if admin and enabled in umgvar
    lmbCheckForUpdates();

	if(trim($umgvar["db-version"]) != $revision AND !defined('IS_SOAP') AND !defined('IS_WEBDAV') AND !defined('IS_WSDL')){
		if($action == "setup_update"){
			save_sessionvars($globvars);
			return;
		}
		
		echo "
		<script language=\"JavaScript\">
		top.document.location.href = 'main_admin.php?action=setup_update&lmbalert=update'\n;
		</script>";
		# save session variables
		save_sessionvars($globvars);
		return;
	}


    /* --- load custom variables ------------------- */
    $custvar = array();
    $sqlquery3 = 'SELECT CKEY, CVALUE FROM LMB_CUSTVAR WHERE ACTIVE = '.LMB_DBDEF_TRUE;
    $rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
    if(!$rs3) {$commit = 1;}
    while(lmbdb_fetch_row($rs3)) {
        $custvar[lmbdb_result($rs3,"CKEY")] = lmbdb_result($rs3,"CVALUE");
    }

    /* --- load custom variables depend ------------------- */
    # multitenant
    if($umgvar['multitenant'] AND $lmmultitenants['mid'][$session['mid']]) {
        $sqlquery3 = "SELECT ID FROM LMB_CONF_TABLES WHERE UPPER(TABELLE) = 'LMB_CUSTVAR_DEPEND' AND MULTITENANT = ".LMB_DBDEF_TRUE;
        $rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
        if(lmbdb_fetch_row($rs3)) {
            $sqlmt = "AND LMB_CUSTVAR_DEPEND.LMB_MID = ".$lmmultitenants['mid'][$session['mid']];
        }
    }
    #$sqlquery3 = 'SELECT LMB_CUSTVAR_DEPEND.CKEY, LMB_CUSTVAR_DEPEND.CVALUE FROM LMB_CUSTVAR_DEPEND LEFT JOIN LMB_CUSTVAR ON LMB_CUSTVAR_DEPEND.CKEY = LMB_CUSTVAR.CKEY WHERE LMB_CUSTVAR.OVERRIDABLE = '.LMB_DBDEF_TRUE.' AND LMB_CUSTVAR.ACTIVE = '.LMB_DBDEF_TRUE.' AND LMB_CUSTVAR_DEPEND.ACTIVE = '.LMB_DBDEF_TRUE.' '.$sqlmt.' OR LMB_CUSTVAR.ID IS NULL';
    $sqlquery3 = 'SELECT LMB_CUSTVAR_DEPEND.CKEY, LMB_CUSTVAR_DEPEND.CVALUE 
    FROM LMB_CUSTVAR_DEPEND LEFT JOIN LMB_CUSTVAR ON LMB_CUSTVAR_DEPEND.CKEY = LMB_CUSTVAR.CKEY AND LMB_CUSTVAR.ACTIVE = TRUE AND LMB_CUSTVAR.OVERRIDABLE = FALSE
    WHERE LMB_CUSTVAR_DEPEND.ACTIVE = '.LMB_DBDEF_TRUE.' AND LMB_CUSTVAR.ID IS NULL '.$sqlmt;
    $rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
    if(!$rs3) {$commit = 1;}
    while(lmbdb_fetch_row($rs3)) {
        $custvar[lmbdb_result($rs3,"CKEY")] = lmbdb_result($rs3,"CVALUE");
    }

	/* --- Userdaten auslesen ------------------- */
	$bzm = 1;
	$sqlquery3 = "SELECT LMB_USERDB.TEL,LMB_USERDB.FAX,LMB_USERDB.POSITION,LMB_USERDB.EMAIL,LMB_USERDB.SUB_GROUP,LMB_USERDB.USERCOLOR,LMB_USERDB.USER_ID,LMB_USERDB.USERNAME,LMB_USERDB.NAME,LMB_USERDB.VORNAME,LMB_GROUPS.NAME AS GROUPNAME,LMB_USERDB.BESCHREIBUNG AS BU,LMB_GROUPS.DESCRIPTION AS BG,LMB_GROUPS.GROUP_ID FROM LMB_USERDB,LMB_GROUPS WHERE LMB_USERDB.GROUP_ID = LMB_GROUPS.GROUP_ID AND LMB_USERDB.DEL = ".LMB_DBDEF_FALSE;
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$tmp = lmbdb_result($rs3,"USER_ID");
		$userdat["id"][$bzm-1] = $tmp;
		$userdat["userid"][$tmp] = $tmp;
		$userdat["username"][$tmp] = lmbdb_result($rs3,"USERNAME");
		$userdat["name"][$tmp] = lmbdb_result($rs3,"NAME");
		$userdat["vorname"][$tmp] = lmbdb_result($rs3,"VORNAME");
		$userdat["bezeichnung"][$tmp] = $userdat["vorname"][$tmp]." ".$userdat["name"][$tmp];
		if(lmbdb_result($rs3,"BU")){$userdat["userdesc"][$tmp] = lmbdb_result($rs3,"BU");}
		$userdat["groupname"][$tmp] = lmbdb_result($rs3,"GROUPNAME");
		if(lmbdb_result($rs3,"BG")){$userdat["groupdesc"][$tmp] = lmbdb_result($rs3,"BG");}
		if(lmbdb_result($rs3,"USERCOLOR")){$userdat["usercolor"][$tmp] = lmbdb_result($rs3,"USERCOLOR");}
		$userdat["groupid"][$tmp] = lmbdb_result($rs3,"GROUP_ID");
		$userdat["email"][$tmp] = lmbdb_result($rs3,"EMAIL");
		if(lmbdb_result($rs3,"TEL")){$userdat["tel"][$tmp] = lmbdb_result($rs3,"TEL");}
		if(lmbdb_result($rs3,"FAX")){$userdat["fax"][$tmp] = lmbdb_result($rs3,"FAX");}
		if(lmbdb_result($rs3,"POSITION")){$userdat["position"][$tmp] = lmbdb_result($rs3,"POSITION");}
		if($sub_group = lmbdb_result($rs3,"SUB_GROUP")){
			$userdat["subgroup"][$tmp] = $userdat["groupid"][$tmp].",".str_replace(";",",",$sub_group);
		}else{
			$userdat["subgroup"][$tmp] = $userdat["groupid"][$tmp];
		}
		$bzm++;
	}

	/* --- Groupdaten auslesen ------------------- */
	$bzm = 1;
	$sqlquery3 = "SELECT GROUP_ID,NAME,DESCRIPTION,REDIRECT,MULTIFRAMELIST,LEVEL FROM LMB_GROUPS WHERE DEL = ".LMB_DBDEF_FALSE;
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$tmp = lmbdb_result($rs3,"GROUP_ID");
		$groupdat["id"][$bzm-1] = $tmp;
		$groupdat["name"][$tmp] = lmbdb_result($rs3,"NAME");
		if(lmbdb_result($rs3,"DESCRIPTION")){$groupdat["beschreibung"][$tmp] = lmbdb_result($rs3,"DESCRIPTION");}
		if(lmbdb_result($rs3,"REDIRECT")){$groupdat["redirect"][$tmp] = lmbdb_result($rs3,"REDIRECT");}
		$groupdat["level"][$tmp] = lmbdb_result($rs3,"LEVEL");
		$mflist = lmbdb_result($rs3,"MULTIFRAMELIST");
		if($mflist){$groupdat["multiframelist"][$tmp] = explode(";",$mflist);}
		$bzm++;
	}

	/* --- LINK System ------------------------------- */
	/*
	$sqlquery3 = "SELECT DISTINCT LMB_ACTION.HELP_URL,LMB_ACTION.TARGET,LMB_ACTION.EXTENSION,LMB_ACTION.SORT,LMB_ACTION.SUBGROUP,LMB_ACTION.MAINGROUP,LMB_ACTION.LINK_NAME,LMB_ACTION.LINK_URL,LMB_ACTION.BESCHREIBUNG,LMB_ACTION.ID,LMB_ACTION.ICON_URL,LMB_ACTION.ACTION FROM LMB_RULES_ACTION,LMB_ACTION
        WHERE (LMB_RULES_ACTION.GROUP_ID = ".implode(" OR LMB_RULES_ACTION.GROUP_ID = ",$session["subgroup"]).") AND LMB_RULES_ACTION.PERM = 2 AND LMB_ACTION.ID = LMB_RULES_ACTION.LINK_ID ORDER BY LMB_ACTION.MAINGROUP,LMB_ACTION.SUBGROUP,LMB_ACTION.SORT";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	 */
	$sqlquery3 = "SELECT DISTINCT LMB_ACTION.HELP_URL,LMB_ACTION.TARGET,LMB_ACTION.EXTENSION,LMB_ACTION.SORT,LMB_ACTION.SUBGROUP,LMB_ACTION.MAINGROUP,LMB_ACTION.LINK_NAME,LMB_ACTION.LINK_URL,LMB_ACTION.BESCHREIBUNG,LMB_ACTION.ID,LMB_ACTION.ICON_URL,LMB_ACTION.ACTION FROM LMB_RULES_ACTION,LMB_ACTION
        WHERE (LMB_RULES_ACTION.GROUP_ID = ".implode(" OR LMB_RULES_ACTION.GROUP_ID = ",$session["subgroup"]).") AND LMB_RULES_ACTION.PERM = 2 AND LMB_ACTION.ID = LMB_RULES_ACTION.LINK_ID
        UNION
        SELECT DISTINCT LMB_ACTION_DEPEND.HELP_URL,LMB_ACTION_DEPEND.TARGET,LMB_ACTION_DEPEND.EXTENSION,LMB_ACTION_DEPEND.SORT,LMB_ACTION_DEPEND.SUBGROUP,LMB_ACTION_DEPEND.MAINGROUP,LMB_ACTION_DEPEND.LINK_NAME,LMB_ACTION_DEPEND.LINK_URL,LMB_ACTION_DEPEND.BESCHREIBUNG,LMB_ACTION_DEPEND.ID,LMB_ACTION_DEPEND.ICON_URL,LMB_ACTION_DEPEND.ACTION FROM LMB_RULES_ACTION,LMB_ACTION_DEPEND
        WHERE (LMB_RULES_ACTION.GROUP_ID = ".implode(" OR LMB_RULES_ACTION.GROUP_ID = ",$session["subgroup"]).") AND LMB_RULES_ACTION.PERM = 2 AND LMB_ACTION_DEPEND.ID = LMB_RULES_ACTION.LINK_ID
        ORDER BY 6,5,4
        ";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$link_id = lmbdb_result($rs3,"ID");
		$LINK[$link_id] = 1;
		$LINK["name"][$link_id] = lmbdb_result($rs3,"LINK_NAME");
		$LINK["desc"][$link_id] = lmbdb_result($rs3,"BESCHREIBUNG");
		$LINK["icon_url"][$link_id] = lmbdb_result($rs3,"ICON_URL");
		$LINK["link_url"][$link_id] = lmbdb_result($rs3,"LINK_URL");
		$LINK["typ"][$link_id] = lmbdb_result($rs3,"MAINGROUP");
		$LINK["subgroup"][$link_id] = lmbdb_result($rs3,"SUBGROUP");
		$help_url = lmbdb_result($rs3,"HELP_URL");
		if($help_url AND $umgvar["helplink"]){$LINK["help_url"][$link_id] = trim($umgvar["helplink"],"/")."/".$help_url;}
		$extens = lmbdb_result($rs3,"EXTENSION");
		if($extens){$LINK["extension"][$link_id] = $extens;}
		$target = lmbdb_result($rs3,"TARGET");
		if($target){$LINK["target"][$link_id] = $target;}
		$tmp = lmbdb_result($rs3,"ACTION");
		if($tmp){
			$LINK_ID[$tmp] = $link_id;
			$LINK[$tmp] = 1;
			$LINK_ACTION[$link_id] = lmbdb_result($rs3,"ACTION");
		}
	}

	/* --- LINK local ------------------------------- */
	/*
	$sqlquery3 = "SELECT DISTINCT LMB_ACTION_DEPEND.HELP_URL,LMB_ACTION_DEPEND.TARGET,LMB_ACTION_DEPEND.EXTENSION,LMB_ACTION_DEPEND.SORT,LMB_ACTION_DEPEND.SUBGROUP,LMB_ACTION_DEPEND.MAINGROUP,LMB_ACTION_DEPEND.LINK_NAME,LMB_ACTION_DEPEND.LINK_URL,LMB_ACTION_DEPEND.BESCHREIBUNG,LMB_ACTION_DEPEND.ID,LMB_ACTION_DEPEND.ICON_URL,LMB_ACTION_DEPEND.ACTION FROM LMB_RULES_ACTION,LMB_ACTION_DEPEND
        WHERE (LMB_RULES_ACTION.GROUP_ID = ".implode(" OR LMB_RULES_ACTION.GROUP_ID = ",$session["subgroup"]).") AND LMB_RULES_ACTION.PERM = 2 AND LMB_ACTION_DEPEND.ID = LMB_RULES_ACTION.LINK_ID ORDER BY LMB_ACTION_DEPEND.MAINGROUP,LMB_ACTION_DEPEND.SUBGROUP,LMB_ACTION_DEPEND.SORT";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$link_id = lmbdb_result($rs3,"ID");
		$LINK[$link_id] = 1;
		$LINK["name"][$link_id] = lmbdb_result($rs3,"LINK_NAME");
		$LINK["desc"][$link_id] = lmbdb_result($rs3,"BESCHREIBUNG");
		$LINK["icon_url"][$link_id] = lmbdb_result($rs3,"ICON_URL");
		$LINK["link_url"][$link_id] = lmbdb_result($rs3,"LINK_URL");
		$LINK["typ"][$link_id] = lmbdb_result($rs3,"MAINGROUP");
		$LINK["subgroup"][$link_id] = lmbdb_result($rs3,"SUBGROUP");
		$help_url = lmbdb_result($rs3,"HELP_URL");
		if($help_url){$LINK["help_url"][$link_id] = $help_url;}
		$extens = lmbdb_result($rs3,"EXTENSION");
		if($extens){$LINK["extension"][$link_id] = $extens;}
		$target = lmbdb_result($rs3,"TARGET");
		if($target){$LINK["target"][$link_id] = $target;}
		$tmp = lmbdb_result($rs3,"ACTION");
		if($tmp){
			$LINK_ID[$tmp] = $link_id;
			$LINK[$tmp] = 1;
			$LINK_ACTION[$link_id] = lmbdb_result($rs3,"ACTION");
		}
	}
	*/

	/* --- Farbschema auslesen ------------------- */
	$sqlquery3 = "SELECT * FROM LMB_COLORSCHEMES WHERE ID = ".$session["farbschema"];
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	if(lmbdb_fetch_row($rs3)) {
		$session["farbschema"] = lmbdb_result($rs3,"ID");
		$farbschema["NAME"] = lmbdb_result($rs3,"NAME");

		for($i = 1;$i <= 14; $i++){
			$farbschema['WEB'.$i] = lmbdb_result($rs3,"WEB".$i);
			$farbschema['RGB'.$i] = hexdec(lmb_substr(lmbdb_result($rs3,"WEB".$i), 1, 2)).", ".hexdec(lmb_substr(lmbdb_result($rs3,"WEB".$i), 3, 2)).", ".hexdec(lmb_substr(lmbdb_result($rs3,"WEB".$i), 5, 2));
		}
	}

	/* --- Farbliste auslesen ------------------- */
	$sqlquery3 = "SELECT WERT FROM LMB_USER_COLORS WHERE USERID = ".$session['user_id']." OR USERID = 0";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	unset($user_colors);
	$user_colors["wert"][] = "";
	$user_colors["wert"][] = "transparent";
	$user_colors["wert"][] = "000000";
	$user_colors["wert"][] = "FFFFFF";
	while(lmbdb_fetch_row($rs3)) {
		$user_colors['wert'][] = lmbdb_result($rs3, "WERT");
	}


	/* --- Feldtypen auslesen ------------------- */
	$sqlquery3 = "SELECT * FROM LMB_FIELD_TYPES";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$data_type = lmbdb_result($rs3,"DATA_TYPE");
		$lmfieldtype[$data_type]["field_type"] = lmbdb_result($rs3,"FIELD_TYPE");
		$lmfieldtype[$data_type]["parse_type"] = lmbdb_result($rs3,"PARSE_TYPE");
		$lmfieldtype[$data_type]["size"] = lmbdb_result($rs3,"SIZE");
	}
	
	/* --- Feldtypen local auslesen ------------------- */
	/*
	$sqlquery3 = "SELECT * FROM LMB_FIELD_TYPES_DEPEND";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	if(!$rs3) {$commit = 1;}
	while(lmbdb_fetch_row($rs3)) {
		$data_type = lmbdb_result($rs3,"DATA_TYPE");
		$lmfieldtype[$data_type]["field_type"] = lmbdb_result($rs3,"FIELD_TYPE");
		$lmfieldtype[$data_type]["parse_type"] = lmbdb_result($rs3,"PARSE_TYPE");
		$lmfieldtype[$data_type]["size"] = lmbdb_result($rs3,"SIZE");
	}
	*/

    /* --- Währungskurstabelle auslesen ------------------- */
    $lmcurrencyrate = [];
    $sqlquery3 = 'SELECT LCR1.CURFROM, LCR1.CURTO, LCR1.RATE FROM LMB_CURRENCY_RATE LCR1 LEFT JOIN LMB_CURRENCY_RATE LCR2 ON ( LCR1.CURFROM = LCR2.CURFROM AND LCR1.RDAY < LCR2.RDAY ) WHERE LCR2.RDAY IS NULL';
    $rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);

    while(lmbdb_fetch_row($rs3)) {
        $curfrom = lmbdb_result($rs3, 'CURFROM');
        $lmcurrencyrate[$curfrom][lmbdb_result($rs3, 'CURTO')] = parse_db_float(lmbdb_result($rs3, 'RATE'));
    }


	/* --- Währungstabelle auslesen ------------------- */
	$sqlquery3 = "SELECT * FROM LMB_CURRENCY ORDER BY CODE";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	while(lmbdb_fetch_row($rs3)) {
        $cid = lmbdb_result($rs3, "ID");
		$code = lmbdb_result($rs3, "CODE");
        $lmcurrency["id"][$code] = $cid;
		$lmcurrency["currency"][$code] = lmbdb_result($rs3, "CURRENCY");
		$lmcurrency["code"][$code] = lmbdb_result($rs3, "CODE");
        $lmcurrency["rate"][$code] = [];
		if (array_key_exists($cid,$lmcurrencyrate)) {
            $lmcurrency["rate"][$code] = $lmcurrencyrate[$cid];
        }
		$lmcurrency["symbol"][$code] = lmbdb_result($rs3, "SYMBOL");
	}

	#----------------- Mimetypes -------------------
	$sqlquery3 = "SELECT * FROM LMB_MIMETYPES ORDER BY MIMETYPE";
	$rs3 = lmbdb_exec($db,$sqlquery3) or errorhandle(lmbdb_errormsg($db),$sqlquery3,$action,__FILE__,__LINE__);
	while(lmbdb_fetch_row($rs3)) {
		$key = lmbdb_result($rs3, "ID");
		$gmimetypes["mimetype"][$key] = lmbdb_result($rs3, "MIMETYPE");
		$gmimetypes["ext"][$key] = lmbdb_result($rs3, "EXT");
		$gmimetypes["pic"][$key] = lmbdb_result($rs3, "PIC");
		$gmimetypes["resolve"][$gmimetypes["ext"][$key]] = $gmimetypes["mimetype"][$key];
	}

	# auf Userverzeichniss prüfen
    create_user_folder($session["user_id"]);

	
	# EXTENSION Dateien einbinden
	if(is_dir($umgvar["pfad"]."/EXTENSIONS/")){
		if($extdir = read_dir($umgvar["pfad"]."/EXTENSIONS/",1)){
			foreach ($extdir["name"] as $key => $value){
				$filetype = explode(".",$value);
				if($extdir["typ"][$key] == "file" AND ($filetype[count($filetype)-1] == "inc" OR $filetype[count($filetype)-1] == "js" OR $filetype[count($filetype)-1] == "css")){
					if($filetype[count($filetype)-1] == "js" OR $filetype[count($filetype)-1] == "css"){
						$gLmbExt[$value][] = ltrim(str_replace($umgvar['path'],"",$extdir["path"][$key]),'/').$value;
					}else{
						$gLmbExt[$value][] = $extdir["path"][$key].$value;
					}
				}
			}
		}
	}

	/* --- temp-Verzeichnis löschen ---------------------------------------------- */
	rmdirr($umgvar["pfad"]."/USER/".$session["user_id"]."/temp");
	/* --- download-Verzeichnis löschen ---------------------------------------------- */
	rmdirr($umgvar["pfad"]."/USER/".$session["user_id"]."/download");

	if(!defined('IS_WSDL') AND !defined('IS_SOAP') AND !defined('IS_WEBDAV') AND !defined('IS_CRON')){
		# ---------- CSS Dateien erstellen -----------
		require("layout/".$session["layout"]."/css.php");
		#require("lib/jscalendar_css.php"); # ersetzt jquery pickupcalendar
		# ---------- JS Dateien erstellen -----------
		require("lib/syntaxcheck.php");
	}

	/* --- SESSION löschen die älter als 3 Tage --------------------------------- */
	$sqlquery4 = "DELETE FROM LMB_SESSION WHERE ".LMB_DBFUNC_DATE."ERSTDATUM) < '".convert_stamp(mktime(0,0,0,date("m"),date("d")-3,date("Y")),1)."'";
	$rs4 = lmbdb_exec($db,$sqlquery4) or errorhandle(lmbdb_errormsg($db),$sqlquery4,$action,__FILE__,__LINE__);
	if(!$rs4) {$commit = 1;}

	/* --- Session eintragen ---------------------------------------- */
	$sqlquery5 = "DELETE FROM LMB_SESSION WHERE ID = '".session_id()."'";
	$rs5 = lmbdb_exec($db,$sqlquery5) or errorhandle(lmbdb_errormsg($db),$sqlquery5,$action,__FILE__,__LINE__);
	if(!$rs5) {$commit = 1;}

	$sqlquery6 = "INSERT INTO LMB_SESSION (ID,USER_ID,GROUP_ID,LOGOUT,IP) VALUES ('".session_id()."',".$session["user_id"].",".$session["group_id"].",".LMB_DBDEF_FALSE.",'".lmb_getIpAddr()."')";
	$rs6 = lmbdb_exec($db,$sqlquery6) or errorhandle(lmbdb_errormsg($db),$sqlquery6,$action,__FILE__,__LINE__);
	if(!$rs6) {$commit = 1;}

	/* --- gtab_array ---------------------------------------------- */
	$tmp = "gtab/gtab_array.lib";
	require($tmp);

	/* --- Userstatistik eintragen ---------------------------------------- */
	$sqlquery4 = "SELECT ID FROM LMB_HISTORY_USER WHERE SESSIONID = '".session_id()."' AND USERID = ".$session["user_id"]." AND IP = '".lmb_getIpAddr()."' AND LOGIN_DATE >= '".convert_stamp($session["login_date"])."'";
	$rs4 = lmbdb_exec($db,$sqlquery4) or errorhandle(lmbdb_errormsg($db),$sqlquery4,$action,__FILE__,__LINE__);
	if(!$rs4) {$commit = 1;}
	if(!lmbdb_fetch_row($rs4)){
		/* --- Next ID -------------------------------------------------------- */
		$NEXTID = next_db_id('LMB_HISTORY_USER','ID',1);
		$sqlquery5 = "INSERT INTO LMB_HISTORY_USER (ID,USERID,SESSIONID,IP,HOST) VALUES (".$NEXTID.",".$session["user_id"].",'".session_id()."','".lmb_getIpAddr()."','".$_SERVER['REMOTE_HOST']."')";
		$rs5 = lmbdb_exec($db,$sqlquery5) or errorhandle(lmbdb_errormsg($db),$sqlquery5,$action,__FILE__,__LINE__);
		if(!$rs5) {$commit = 1;}
	}else{
		$sqlquery5 = "UPDATE LMB_HISTORY_USER SET UPDATE_DATE = '".convert_stamp(time())."',LOGIN_TIME = ".(date("U") - $session["login_date"])." WHERE SESSIONID = '".session_id()."' AND USERID = ".$session["user_id"]." AND LOGIN_DATE >= '".convert_stamp($session["login_date"])."'";
		$rs5 = lmbdb_exec($db,$sqlquery5) or errorhandle(lmbdb_errormsg($db),$sqlquery5,$action,__FILE__,__LINE__);
		if(!$rs5) {$commit = 1;}
	}
	
	# EXTENSIONS
	if($GLOBALS["gLmbExt"]["ext_session_auth.inc"]){
		foreach ($GLOBALS["gLmbExt"]["ext_session_auth.inc"] as $key => $extfile){
			require_once($extfile);
		}
	}

	# save session variables
	save_sessionvars($globvars);
	

}else{ //login failed

    $ip = lmb_getIpAddr();

    // access.log
    $rf = fopen('TEMP/log/access.log', 'a');
    fputs($rf, '['.date('D M d H:i:s').substr((string)microtime(),1,7)." ".date('Y')."] [auth_basic:error] [pid ".getmypid()."] [client ".$ip.":".$_SERVER['REMOTE_PORT']."] AH01617: user $auth_user: authentication failure for \"limbas/basic/auth\": Password Mismatch, referer: limbas/basic/auth\n");
    fclose($rf);

    // basic auth
    lmb_basicauth();
    die();
}

unset($commit);
