<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */



/* --- currencies --------------------------------------------- */
if($change && $changecur && !isset($currates)){
    $ctval = explode(',',$changecur);
    $ctval = array_filter(array_unique($ctval));
    foreach ($ctval as $key => $custvar_id){
        lmb_change_currency($custvar_id,${"cur_n".$custvar_id},${"cur_c".$custvar_id},${"cur_s".$custvar_id},$action);
    }
}

if($add && !isset($currates)){
    lmb_add_currency($name,$code,$symbol,$action);
}

if($del && !isset($currates)){
    lmb_delete_currency($id,$action);
}


$result_currencies = lmb_get_currencies($action);

/* --- exchange_rates --------------------------------------------- */

if($add && isset($currates)){
    lmb_add_currencyrate($result_currencies,$curfrom,$curto,$rate,$rday,$action);
}

if (isset($currates)) {
    $result_rates = lmb_get_currencyrates($action);
}


/**
 * returns an array of all currencies
 *
 * @param $action
 * @return array
 */
function lmb_get_currencies($action) {
    global $db;
    $result_currencies = [];
    $sqlquery = 'SELECT ID, CURRENCY, CODE, SYMBOL FROM LMB_CURRENCY ORDER BY CODE';
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    while(lmbdb_fetch_row($rs)) {
        $currency = array();
        $currency['name'] = lmbdb_result($rs, 'CURRENCY');
        $currency['code'] = lmbdb_result($rs, 'CODE');
        $currency['symbol'] = lmbdb_result($rs, 'SYMBOL');
        $result_currencies[lmbdb_result($rs, 'ID')] = $currency;
    }
    return $result_currencies;
}

/**
 * adds a currency to system table
 *
 * @param string $name
 * @param string $code
 * @param string $symbol
 * @param $action
 */
function lmb_add_currency($name,$code,$symbol,$action) {
    global $db;

    $name = parse_db_string( $name );
    $code = parse_db_string(  $code,3);
    $symbol = parse_db_string( $symbol );

    $NEXTID = next_db_id("LMB_CURRENCY");

    $sqlquery = "INSERT INTO LMB_CURRENCY (ID,CURRENCY,CODE,SYMBOL) VALUES ($NEXTID,'$name','$code','$symbol')";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
}

/**
 * updates a currency
 *
 * @param int $id
 * @param string $name
 * @param string $code
 * @param string $symbol
 * @param $action
 */
function lmb_change_currency($id,$name,$code,$symbol,$action) {
    global $db;

    if(is_numeric($id)){
        $name = parse_db_string( $name );
        $code = parse_db_string(  $code,3);
        $symbol = parse_db_string( $symbol );

        $sqlquery1 = "UPDATE LMB_CURRENCY SET CURRENCY = '$name', CODE = '$code', SYMBOL = '$symbol'  WHERE ID = $id";
        $rs1 = lmbdb_exec($db,$sqlquery1) or errorhandle(lmbdb_errormsg($db),$sqlquery1,$action,__FILE__,__LINE__);
    }
}

/**
 * deletes a currency and all associated exchange rates
 *
 * @param int $id
 * @param $action
 */
function lmb_delete_currency($id,$action) {
    global $db;
    $id = parse_db_int($id);
    $sqlquery = "DELETE FROM LMB_CURRENCY WHERE ID = $id";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    //delete all associated exchange rates
    $sqlquery = "DELETE FROM LMB_CURRENCY_RATE WHERE CURFROM = $id OR CURTO = $id";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
}

/**
 * returns all saved exchange rates
 *
 * @param $action
 * @return array
 */
function lmb_get_currencyrates($action) {
    global $db;
    $result_rates = [];
    $sqlquery = 'SELECT Count(LMB_CURRENCY_RATE.ID) as EXCOUNT, CURFROM, CURTO, LMBC1.CODE AS CURFROMC, LMBC2.CODE AS CURTOC FROM LMB_CURRENCY_RATE INNER JOIN LMB_CURRENCY LMBC1 ON LMBC1.ID = CURFROM INNER JOIN LMB_CURRENCY LMBC2 ON LMBC2.ID = CURTO  GROUP BY CURFROM, CURTO, CURFROMC, CURTOC ORDER BY CURFROM';
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
    while(lmbdb_fetch_row($rs)) {
        $exrate = array();
        $exrate['curfrom'] = lmbdb_result($rs, 'CURFROM');
        $exrate['curfromc'] = lmbdb_result($rs, 'CURFROMC');
        $exrate['curto'] = lmbdb_result($rs, 'CURTO');
        $exrate['curtoc'] = lmbdb_result($rs, 'CURTOC');
        $exrate['excount'] = lmbdb_result($rs, 'EXCOUNT');
        $result_rates[] = $exrate;
    }
    return $result_rates;
}

/**
 * adds an exchange rate
 *
 * @param array $currencies
 * @param string $curfrom
 * @param string $curto
 * @param float $rate
 * @param string $rday
 * @param $action
 */
function lmb_add_currencyrate(&$currencies, $curfrom,$curto,$rate,$rday,$action) {
    global $db;

    $allowedcur = array_keys($currencies);
    if (!in_array($curfrom,$allowedcur) || !in_array($curto,$allowedcur) || $curfrom == $curto) {
        return;
    }

    $curfrom = parse_db_int($curfrom);
    $curto = parse_db_int($curto);
    $rate = parse_db_float( $rate );
    $rday = parse_db_string(  $rday);

    $NEXTID = next_db_id("LMB_CURRENCY_RATE");

    $sqlquery = "INSERT INTO LMB_CURRENCY_RATE (ID,CURFROM,CURTO,RATE,RDAY) VALUES ($NEXTID,$curfrom,$curto,$rate,'$rday')";
    $rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
}


















?>

