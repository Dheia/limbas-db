<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




require_once(COREPATH . 'gtab/gtab.lib');


/*------- Formel ---------*/
function print_formel($dom,$report_id,$item,$ID,$rkey,&$report){
	global $gtab;
	global $gfield;
	global $glob_el;
	
	# eval
	$report_value = trim($report["value"][$rkey]);
	if($report_value){
		eval($report_value);
	}
	$item = add_dom_element($dom,$item,"element_".$report["id"][$rkey],$arg_result,"text");
	$GLOBALS['glob_el'][$report["id"][$rkey]] = $arg_result;
	return $item;
}


/*------- Db Inhalte ---------*/
function print_dbdat($dom,$report_id,$item,$ID,$rkey,&$report){
	global $gtab;
	global $gfield;
	global $glob_el;
	
	$report_ID = $report["id"][$rkey];
	$referenz_tab = $report["referenz_tab"];
	$value = $report["value"][$rkey];
	$dbvalue = $report["dbvalue"][$rkey];
	$dbfield = $report["dbfield"][$rkey];

	$dbf = explode(";",$dbfield);
	$tab = $gtab["table"][$dbf[0]];
	$field = $gfield[$dbf[0]]["field_name"][$dbf[1]];

	if($field){
		$dbtype = explode("#*#",$dbvalue[0]);
		if($dbtype[0] == "IMAGE" OR $dbtype[0] == "PDF"){
			$dbvalue = $dbvalue[1];
			$eltyp = "image";
		}elseif($dbtype[0] == "HTML"){
			$dbvalue = htmlentities($dbvalue[1],ENT_QUOTES,$GLOBALS["umgvar"]["charset"]);
			$eltyp = "html";
		}else{
			if($report["style"][$rkey][40]){$sep = $report["style"][$rkey][40];}else{$sep = "# ";}
			$dbvalue = implode($sep,$dbvalue);
			$GLOBALS['el'][$report_ID] = $dbvalue;
			$eltyp = "text";
		}
		
		$item = add_dom_element($dom,$item,$field,$dbvalue,$eltyp);
		$GLOBALS['glob_el'][$report["id"][$rkey]] = $dbvalue;
		return $item;
	}else{
		return false;
	}
}



/*------- Tabelle ---------*/
function print_tab($dom,$report_id,$item,$ID,$rkey,&$report){

	global $db;
	global $umgvar;
	global $gtab;
	global $glob_rowel;
	global $glob_el;
	global $gfield;
	
	$report_ID = $report["id"][$rkey];
	$referenz_tab = $report["referenz_tab"];
	$value = $report["value"][$rkey];
	$dbvalue = $report["dbvalue"][$rkey];
	$dbfield = $report["dbfield"][$rkey];
	$report_tab = $report["tab"][$rkey];
	$report_tab_size = $report["tab_size"][$rkey];

	$tab_size = explode(";",$report_tab_size);
	$report_tab_cells = $tab_size[0];
	$report_tab_rows = $tab_size[1];
	$ROWNR = 1;
	
	# Tabellenname des ersten DB-Elements für Elementbeschreibung
	$sqlquery = "SELECT DBFIELD FROM LMB_REPORTS WHERE BERICHT_ID = $report_id AND TAB = ".$report_tab." AND TYP = 'dbdat'";
	$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);
	if(lmbdb_result($rs, "DBFIELD")){
		$tmp = explode(";",lmbdb_result($rs, "DBFIELD"));
		$el_tablename = $gtab["table"][$tmp[0]]."_".$report_ID;
	}else{
		$el_tablename = "element_".$report_ID;
	}

	$newTabElement = $dom->createElement("table");
	$newTabElement->setAttribute('name',lmb_strtolower(lmb_utf8_encode($el_tablename)));

	/*------- Zeilen ---------*/
	$bzm2 = 1;
	while($bzm2 <= $report_tab_rows){
		/*------- get databaseresult ---------*/
		$dataArray = get_dataArray($ID,$report_id,$report_tab,$report,$report_tab_cells,$bzm2,$rowid);
		if($dataArray["count"]){
			$max_count = $dataArray["count"];
			$rowid = $dataArray["rowid"];
		}else{$max_count = 1;}	
		
		unset($tab_row);
		unset($cell_value);
		/*------- Spalten ---------*/
		$bzm3 = 1;
		$bzm5 = 0;
		while($bzm3 <= $report_tab_cells){
			$cols = array();
			
			$sqlquery = "SELECT DISTINCT EL_ID,INHALT,DBFIELD,TYP,POSX,POSY,TAB_EL_COL_SIZE,HEIGHT,STYLE,TAB FROM LMB_REPORTS WHERE BERICHT_ID = $report_id AND TAB = ".$report_tab." AND TAB_EL_ROW = ".$bzm2." AND TAB_EL_COL = ".$bzm3." ORDER BY EL_ID ";
			$rs = lmbdb_exec($db,$sqlquery) or errorhandle(lmbdb_errormsg($db),$sqlquery,$action,__FILE__,__LINE__);

			while(lmbdb_fetch_row($rs)) {
				$cols["value"][] = lmbdb_result($rs, "INHALT");
				$cols["typ"][] = lmbdb_result($rs, "TYP");
				$cols["id"][] = lmbdb_result($rs, "EL_ID");
				$cols["style"][] = lmbdb_result($rs, "STYLE");
				$cols["dbfield"][] = lmbdb_result($rs, "DBFIELD");
			}
			
			if(is_array($cols["id"])){
				
				# falls Einzelelement ID ist Feldbeschreibung
				$cell_value["id"][$bzm3] = $cols["id"][0];
				$cell_value["typ"][$bzm3] = $cols["typ"][0];
				
				# erste Zeile ist Feldbeschreibung
				#if($bzm2 == 1 AND $cols["value"][0] AND $cols["typ"][0] != "dbdat"){
				#	/* --- Feld umbenennen ------------- */
				#	$fl = lmb_utf8_encode($cols["value"][0]);					
				#	$cell_name[$bzm3] = $fl;
				#	$ROWNR++;
				#}elseif($bzm2 == 1){
				#	/* --- Feld umbenennen ------------- */
				#	$cell_name[$bzm3] = "element_".$cols["id"][0];
				#	$ROWNR++;
				#}else{
				
				if($cols["typ"][0] == "dbdat"){
					$fn = explode(';',$cols["dbfield"][0]);
					$cell_name[$bzm3] = lmb_utf8_encode($gfield[$fn[0]]['field_name'][$fn[1]]);
				}
				
					/*------- Spalteninhalte Dateninhalte + max_count ---------*/
					$bzm4=1;
					foreach ($cols["value"] as $key => $value){
						
						$dbelstyle = explode(";",$cols["style"][$key]);
						if($bzm4 == 1 AND $dbelstyle[40]){
							$seperator[$bzm2."_".$bzm3] = $dbelstyle[40];
						}
						
						#--------- db-field --------------
						if($cols["typ"][$key] == "dbdat"){
							$cell_value[$bzm3][$bzm4] = $dataArray[$bzm5];
							$GLOBALS["glob_el"][$cols["id"][$key]] = $cell_value[$bzm3][$bzm4];
							# Element verstecken
							if($dbelstyle[29] == 1){
								$cell_value[$bzm3][$bzm4] = null;
							}
							$bzm5++;
						}
						if($max_count < lmb_count($cell_value[$bzm3][$bzm4])){$max_count = lmb_count($cell_value[$bzm3][$bzm4]);}
						$bzm4++;
					}
					
					/*------- Spalteninhalte sonst. + auffüllen ---------*/
					for($i=1; $i<=$max_count; $i++){
						$ROWNR++;
						$bzm4=1;
						foreach ($cols["value"] as $key => $value){
							#--------- db-field --------------
							if($cols["typ"][$key] == "datum"){
								$cell_value[$bzm3][$bzm4][] = local_date(0);
							}elseif($cols["typ"][$key] == "formel"){
								$rtab_value = trim($cols["value"][$key]);
								if($rtab_value){
									eval($rtab_value);
								}
								$cell_value[$bzm3][$bzm4][] = $arg_result;
							}

							$cell_value["count"][$bzm3] = $bzm4;
							$bzm4++;
						}
					}
				#}

			}else{
				$cell_value[$bzm3][0][] = "";
			}
			$bzm3++;
		}

		# ----- Anzahl max. benötigter Zeilen -----
		if($bzm2 != 1){
			for($bzm5=0;$bzm5<$max_count;$bzm5++){
				# is list element
				if($dataArray["list"]){
					# neuesElement (Tabellennahme)
					$newElement = $dom->createElement("row");
					for($i=1; $i<=$report_tab_cells;$i++){

						# Inhalt
						$cellvalue = array();
						for($c=1; $c<=$cell_value["count"][$i];$c++){
							if($cell_value[$i][$c][$bzm5] == "#HIDEROW"){break;}
							$cellvalue[] = $cell_value[$i][$c][$bzm5];
						}

						if($seperator[$bzm2."_".$i] AND lmb_substr($seperator[$bzm2."_".$i],0,1) != "#"){
							$seperator_ = str_replace("\\\\t","\t",str_replace("\\\\n","\n",$seperator[$bzm2."_".$i]));
							$cellvalue = trim(implode($seperator_,$cellvalue));
						}else{
							$cellvalue = trim(implode(" ",$cellvalue));
						}

						if($cell_name[$i] AND $cell_value["typ"][$i] == 'dbdat'){
							$newElement = add_dom_element($dom,$newElement,$cell_name[$i]."_".$cell_value["id"][$i],$cellvalue,"text");
							$isset = 1;
						}
						
					}
					# Element anhängen
					$newTabElement->appendChild($newElement);
				# is single element
				}else{
					for($i=1; $i<=$report_tab_cells;$i++){
						$cellvalue = array();
						for($c=1; $c<=$cell_value["count"][$i];$c++){
							$cellvalue[] = $cell_value[$i][$c][$bzm5];
						}
						$cellvalue= trim(implode(" ",$cellvalue));
						if($cell_value["id"][$i] AND ($cell_value["typ"][$i] == 'dbdat' OR $cell_value["typ"][$i] == 'formel')){
							if($cell_name[$i]){$elname = $cell_name[$i]."_".$cell_value["id"][$i];}else{$elname = "element_".$cell_value["id"][$i];}
							$newElement = add_dom_element($dom,$item,$elname,$cellvalue,"text");
						}
					}
				}
			}
		}
		$bzm2++;
		$rowid++;
	}
	
	if($isset){
		$item->appendChild($newTabElement);
	}
	
	return $item;
}


# DOM Element hinzufügen
function add_dom_element($dom,$item,$name,$value,$eltyp){
	$newElement = $dom->createElement(lmb_utf8_encode($eltyp));
	$newElement->setAttribute('name',lmb_strtolower(lmb_utf8_encode($name)));
	$newElement->appendChild($dom->createTextNode(lmb_utf8_encode($value)));
	$item->appendChild($newElement);
	return $item;
}


/*----------------- Element-Schleife XML -------------------*/
function create_dom_object($dom,$report_id,$item,$ID,$report,$rep){
	global $gtab;
	# Elementschleife
	if($report["id"]){
	foreach ($report["id"] as $key => $value){
		if($report["typ"][$key] == "dbdat" OR $report["typ"][$key] == "formel" OR $report["typ"][$key] == "tab"){
			$fname = "print_".$report["typ"][$key];
			$item = $fname($dom,$report_id,$item,$ID,$key,$report);
		}
	}}
	return $item;
}




# --- XML ausgeben ---------------------------------
function store_xml($dom,$rep,$ID,$report_output){
	global $session;
	global $umgvar;
	global $db;
	global $lang;

	# ------- xml Pfad ---------
	$name = $rep["name"];
	$out = USERPATH.$session["user_id"]."/temp/".$name;
	$path = USERPATH.$session["user_id"]."/temp/".lmb_utf8_encode($name);

	# ------- xml schreiben ---------
	$fh = fopen ($path, 'w');
	fwrite($fh, $dom->saveXML());
	fclose($fh);

	if(file_exists($path)){
		# ------- archivieren ---------
		if($report_output == 2){
			# Archivieren
			reportArchiv($out,$rep,$ID);
		}else{
			return $name;
		}
	}
	return false;
}


function xml_report($ID,$report_id,$use_record,&$rep){
	global $umgvar;
	global $gtab;
	
	// Creates a DOMDocumentType instance
	$dtd = DOMImplementation::createDocumentType('preliminary', '', $umgvar["pfad"]."/extra/report/ooReport/xml/preliminary.dtd");
	
	# neues DOM Objekt
	#$dom = new DomDocument('1.0', "utf-8");
	// Creates a DOMDocument instance
	$dom = DOMImplementation::createDocument(null, "", $dtd);
	
	$dom->encoding = 'UTF-8';
	$dom->standalone = $dom->xmlStandalone = false;
	$dom->formatOutput = true;


	/* --- Report umbenennen ------------- */
	# root Element (Berichtsname)
	$root = $dom->createElement("report");
	$root->setAttribute('name', $rep["name"]);
	
	$reportlist = array();
	if(is_array($ID)){$reportlist = $ID;}
	elseif($ID){$reportlist[0] = $ID;}
	elseif($use_record){$reportlist = explode(";",$use_record);}
	
	foreach ($reportlist as $key => $ID_){
		$recel = explode("_",$ID_);
		if($recel[1]){
			if($recel[1] == $rep["referenz_tab"]){
				$SID = $recel[0];
			}
		}else{
			$SID = $recel[0];
		}
		
		if($SID){
			# report-Elemente
			$report = array("report_id" => $report_id);
			$report = element_list($SID,  $report,'');
			# root Element (Berichtsname)
			$item = $dom->createElement("item");
			$item->setAttribute('id', $SID);
			$item = create_dom_object($dom,$report_id,$item,$SID,$report,$rep);
			$root->appendChild($item);
		}
	}

	# Rootelement schliesen
	$dom->appendChild($root);

	return array($dom,$rep);
}

?>
