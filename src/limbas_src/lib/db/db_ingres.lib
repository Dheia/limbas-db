<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */




# LMB_DBTYPE #
define("LMB_DBTYPE_CHAR","CHAR");
define("LMB_DBTYPE_VARCHAR","VARCHAR");
define("LMB_DBTYPE_INTEGER","INTEGER");
define("LMB_DBTYPE_SMALLINT","SMALLINT");
define("LMB_DBTYPE_FLOAT","FLOAT");
define("LMB_DBTYPE_FIXED","DECIMAL");
define("LMB_DBTYPE_BOOLEAN","TINYINT");
define("LMB_DBTYPE_DATE","DATE");
define("LMB_DBTYPE_TIME","TIME");
define("LMB_DBTYPE_TIMESTAMP","TIMESTAMP");
define("LMB_DBTYPE_LONG","VARCHAR(10000)");
define("LMB_DBTYPE_ASCII","");
define("LMB_DBTYPE_BYTE","");

# LMB_DBDEF #
define("LMB_DBDEF_TIME","CURRENT_TIME");
define("LMB_DBDEF_DATE","CURRENT_DATE");
define("LMB_DBDEF_TIMESTAMP","CURRENT_TIMESTAMP");
define("LMB_DBDEF_FALSE",0);
define("LMB_DBDEF_TRUE",1);
define("LMB_DBDEF_NULL","NULL");
define("LMB_DBDEF_DTNULL","NULL");
 
# LMB_DBRETYPE #
define("LMB_DBRETYPE_CHAR","CHAR");
define("LMB_DBRETYPE_VARCHAR","VARCHAR");
define("LMB_DBRETYPE_INTEGER","INTEGER");
define("LMB_DBRETYPE_SMALLINT","SMALLINT");
define("LMB_DBRETYPE_FLOAT","FLOAT");
define("LMB_DBRETYPE_DECIMAL","FIXED");
define("LMB_DBRETYPE_INTEGER1","BOOLEAN");
define("LMB_DBRETYPE_DATE","DATE");
define("LMB_DBRETYPE_DATE_WITH_TIME_ZONE","DATE");
define("LMB_DBRETYPE_DATE_WITHOUT_TIME_ZONE","DATE");
define("LMB_DBRETYPE_INGRESDATE","DATE");
define("LMB_DBRETYPE_TIME","TIME");
define("LMB_DBRETYPE_TIME_WITH_TIME_ZONE","TIME");
define("LMB_DBRETYPE_TIME_WITHOUT_TIME_ZONE","TIME");
define("LMB_DBRETYPE_TIMESTAMP","TIMESTAMP");
define("LMB_DBRETYPE_TIMESTAMP_WITH_TIME_ZONE","TIMESTAMP");
define("LMB_DBRETYPE_TIMESTAMP_WITHOUT_TIME_ZONE","TIMESTAMP");
define("LMB_DBRETYPE_LONG_VARCHAR","LONG");

# LMB_DBREDEF #
define("LMB_DBREDEF_NOW()","DEFAULT TIMESTAMP");

# LMB_DBFUNC #
define("LMB_DBFUNC_ISNULL","IS NULL");
define("LMB_DBFUNC_PRIMARY_KEY","PRIMARY KEY");
define("LMB_DBFUNC_UNIQUE","UNIQUE");
define("LMB_DBFUNC_CONCAT","||");
define("LMB_DBFUNC_UMASCB","\\");
define("LMB_DBFUNC_LIMIT","");
define("LMB_DBFUNC_ROWNO","");
define("LMB_DBFUNC_SPLIT_TRIGGER","EXECUTE PROCEDURE");
define("LMB_DBFUNC_ADD_COLUMN_FIRST","ADD COLUMN");
define("LMB_DBFUNC_ADD_COLUMN_NEXT","ADD COLUMN");
define("LMB_DBFUNC_DROP_COLUMN_FIRST","DROP COLUMN");
define("LMB_DBFUNC_DROP_COLUMN_NEXT","DROP COLUMN");
define("LMB_DBFUNC_DATE","DATE(");
define("LMB_DBFUNC_TIME","TIME(");
define("LMB_DBFUNC_YEAR","EXTRACT(YEAR FROM ");
define("LMB_DBFUNC_MONTH","EXTRACT(MONTH FROM ");
define("LMB_DBFUNC_DAY","EXTRACT(DAY FROM ");
define("LMB_DBFUNC_HOUR","EXTRACT(HOUR FROM ");
define("LMB_DBFUNC_MINUTE","EXTRACT(MINUTE FROM ");
define("LMB_DBFUNC_LONGHANDLE",0);
define("LMB_DBFUNC_PROCEDUREHANDLE",0);
define("LMB_DBFUNC_FKEYHANDLE",1);
define("LMB_DBFUNC_FLOATHANDLE",0);
define("LMB_DBFUNC_NUMROWS",1);
define("LMB_DBFUNC_VIEWGALIAS",1);

# DBCURSOR #
define("LMB_DBCURSOR",0);

require_once(COREPATH . 'lib/db/db_odbc.lib');

# odbc connect:
function dbq_0($host,$database,$dbuser,$dbpass,$dbdriver=null){
	if($dbdriver){
		$dsn = "Driver=$dbdriver;Server=$host;Database=$database;ReadOnly=No";
		#SQL_CUR_USE_ODBC
		#SQL_CUR_DEFAULT
		#SQL_CUR_USE_DRIVER
		#SQL_CUR_USE_IF_NEEDED
		#SQL_ODBC_CURSORS
		$db = lmbdb_pconnect ($dsn, $dbuser, $dbpass);
	}else{
		$db = lmbdb_pconnect($database,$dbuser,$dbpass);
	}
	if($db){return $db;}
	else{echo("<h1>Database connection failed</h1><p>($dsn)<BR>".lmbdb_errormsg()."</p>"); return false;}
}

/**
 * convert stamp for db
 *
 * @param number $p
 * @return string
 */
function dbf_1($p,$t=0){	
	if(!$p){$p=1;}
    if($t){
        return $p->format("Y-m-d");
    }else{
        return $p->format("Y-m-d H:i:s");
    }
}

/**
 * convert date from db to stamp
 *
 * @param string $p
 * @return number
 */
function dbf_2($p){
	if(!$p){return false;}
	$db_date = lmb_substr($p,0,19);
	$db_date = preg_replace("/[^0-9]/",";",$db_date);
	$db_date = explode(";",$db_date);
	if(is_numeric($db_date[0])){
		$result_stamp = mktime($db_date[3],$db_date[4],$db_date[5],$db_date[1],$db_date[2],$db_date[0]);
	}else{$result_stamp = 0;}
	return $result_stamp;
}


/**
 * parse blob
 *
 * @param string $p
 * @return string
 */
function dbf_6($p){
	return addslashes($p);
	
}

/**
 * parse string
 *
 * @param string $p
 * @return string
 */
function dbf_7($p){
	return addslashes($p);
}

/**
 * case sensitive
 *
 * @param string $p
 * @return string
 */
function dbf_4($p){
	return lmb_strtolower($p);
}

?>
