<?php
/**
 * @copyright Limbas GmbH <https://limbas.com>
 * @license https://opensource.org/licenses/GPL-2.0 GPL-2.0
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */



# LMB_DBTYPE #

define("LMB_DBTYPE_CHAR","CHAR");
define("LMB_DBTYPE_VARCHAR","VARCHAR");
define("LMB_DBTYPE_INTEGER","INTEGER");
define("LMB_DBTYPE_SMALLINT","SMALLINT");
define("LMB_DBTYPE_BIGINT","BIGINT");
define("LMB_DBTYPE_FLOAT","BINARY_FLOAT");
define("LMB_DBTYPE_FIXED","NUMBER");
define("LMB_DBTYPE_NUMERIC","NUMBER");
define("LMB_DBTYPE_BOOLEAN","NUMBER(1)");
define("LMB_DBTYPE_DATE","DATE");
define("LMB_DBTYPE_TIME","DATE");#-------------------------------------------------------Zeit ist in date enthalten
define("LMB_DBTYPE_TIMESTAMP","TIMESTAMP");
define("LMB_DBTYPE_LONG","CLOB");
define("LMB_DBTYPE_ASCII","");
define("LMB_DBTYPE_BYTE","");

# LMB_DBDEF #Default
define("LMB_DBDEF_TIME","SYSDATE");#NLS_TIMESTAMP_FORMAT ist default wert zu setzen
define("LMB_DBDEF_DATE","SYSDATE");
define("LMB_DBDEF_TIMESTAMP","SYSTIMESTAMP");
define("LMB_DBDEF_FALSE","0");
define("LMB_DBDEF_TRUE","1");
define("LMB_DBDEF_NULL","NULL");

# LMB_DBRETYPE #
define("LMB_DBRETYPE_CHAR","CHAR");
define("LMB_DBRETYPE_VARCHAR","VARCHAR");
define("LMB_DBRETYPE_VARCHAR2","VARCHAR");
#define("LMB_DBRETYPE_NVARCHAR2","VARCHAR");
define("LMB_DBRETYPE_INTEGER","INTEGER");
define("LMB_DBRETYPE_SMALLINT","SMALLINT");
define("LMB_DBRETYPE_FLOAT","FLOAT");
#define("LMB_DBRETYPE_FIXED","FIXED");
define("LMB_DBRETYPE_NUMERIC","NUMERIC");
#define("LMB_DBRETYPE_BOOLEAN","BOOLEAN");
define("LMB_DBRETYPE_DATE","DATE");
#define("LMB_DBRETYPE_TIME","TIME");
define("LMB_DBRETYPE_TIMESTAMP","TIMESTAMP");
define("LMB_DBRETYPE_CLOB","LONG");

# LMB_DBREDEF #
define("LMB_DBREDEF_TIMESTAMP","TIMESTAMP");

# LMB_DBFUNC #
define("LMB_DBFUNC_ISNULL","IS NULL");
define("LMB_DBFUNC_PRIMARY_KEY","PRIMARY KEY");
define("LMB_DBFUNC_UNIQUE","UNIQUE");
define("LMB_DBFUNC_CONCAT",".");
define("LMB_DBFUNC_UMASCB","\\\\");
define("LMB_DBFUNC_LIMIT","");#abzukl채ren
define("LMB_DBFUNC_ROWNO","ROWNUM");
define("LMB_DBFUNC_SPLIT_TRIGGER","EXECUTE");#Ausf체hrung eines Triggers
define("LMB_DBFUNC_ADD_COLUMN_FIRST","ADD");#alter table TABELLE add testZahl number not null;
define("LMB_DBFUNC_ADD_COLUMN_NEXT","");#alter table TABELLE add (testZahl number not null, testString varchar2(10));
define("LMB_DBFUNC_DROP_COLUMN_FIRST","DROP");#alter table TABELLE drop column testZahl;
define("LMB_DBFUNC_DROP_COLUMN_NEXT","");#alter table TABELLE drop (testZahl, testNummer);
define("LMB_DBFUNC_DATE","DATE(");#Parameter ist Feld Timestamp oder Date
define("LMB_DBFUNC_TIME","TIME(");#select to_char(sysdate, 'hh24:MI:SS') from dual
define("LMB_DBFUNC_YEAR","YEAR(");#select to_char(sysdate, 'yyyy') from dual
define("LMB_DBFUNC_MONTH","MONTH(");#select to_char(sysdate, 'mm') from dual
define("LMB_DBFUNC_DAY","DAY(");#select to_char(sysdate, 'dd') from dual
define("LMB_DBFUNC_HOUR","HOUR(");#select to_char(sysdate, 'hh24') from dual
define("LMB_DBFUNC_MINUTE","MINUTE(");#select to_char(sysdate, 'MI') from dual

define("LMB_DBFUNC_LONGHANDLE",1);#Abzukl채ren ob Einschr채nkungen beim Bearbeiten
define("LMB_DBFUNC_PROCEDUREHANDLE",1);
define("LMB_DBFUNC_FKEYHANDLE",1);
define("LMB_DBFUNC_FLOATHANDLE",1);
define("LMB_DBFUNC_PREPAREHANDLE",1);
define("LMB_DBFUNC_TIMEHANDLE",0);
define("LMB_DBFUNC_NUMROWS",1);
define("LMB_DBFUNC_VIEWGALIAS",0);
define("LMB_DBFUNC_VIEWDEPENDENCY",0);
define("LMB_DBFUNC_MAXFIELDNAMESIZE",30);
define("LMB_DBFUNC_MAXTABLENAMESIZE",30);

# DBCURSOR #
define("LMB_DBCURSOR",1);

#require_once('lib/db/db_odbc.lib');


# odbc connect:
function dbq_0($host,$database,$dbuser,$dbpass,$dbdriver=null){
	if($dbdriver == "DSN"){
		$db = lmbdb_pconnect("$database","$dbuser","$dbpass");
	}elseif($dbdriver){
		$dsn = "Driver=$dbdriver;ServerNode=$host;ServerDB=$database;ReadOnly=No";
		$db = lmbdb_pconnect ($dsn, $dbuser, $dbpass);
	}else{
		$db = lmbdb_pconnect("$host:$database","$dbuser","$dbpass");
	}
	if($db){return $db;}
	else{echo("<h1>Database connection failed</h1><p>($dsn)<BR>".lmbdb_errormsg()."</p>"); return false;}
}

#function dbq_0($host,$database,$dbuser,$dbpass,$odbcdriver=null){
#	$db = lmbdb_pconnect("$host:$database","$dbuser","$dbpass") or die("<BR><BR><CENTER>Database connection failed!<BR>".lmbdb_errormsg($db)."</CENTER>");
#	return $db;
#}


/**
 * convert stamp for db
 *
 * @param number $p
 * @return string
 */
function dbf_1($p,$t=0){
	if($t){
        if(!is_object($p)){return date("Y-m-d",1);}
        return $p->format("Y-m-d");
    }else{
        if(!is_object($p)){return date("Y-m-d H:i:s.",1);}
        return $p->format("Y-m-d H:i:s.");
    }
}

/**
 * parse blob
 *
 * @param string $p
 * @return string
 */
function dbf_6($p){
    return dbf_7($p);
}

/**
 * parse string
 *
 * @param string $p
 * @return string
 */
function dbf_7($p){
    return str_replace("'","''",$p);
}

/**
 * get sequence
 *
 * @param array $p[0]=name
 */
function dbf_8($p){
	global $db;

	$rs = lmbdb_exec($db,"SELECT ".dbf_4($p).".NEXTVAL AS NEXTSEQ FROM DUAL") or errorhandle(lmbdb_errormsg($db),$prepare_string,"get next sequence",$FILE,$LINE);
	return lmbdb_result($rs,"NEXTSEQ");
}

/**
 * case sensitive
 *
 * @param string $p
 * @return string
 */
function dbf_4($p){
	return lmb_strtoupper($p);
}

?>
